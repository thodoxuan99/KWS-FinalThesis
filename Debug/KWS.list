
KWS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b24  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08006cec  08006cec  00016cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e40  08006e40  000200a0  2**0
                  CONTENTS
  4 .ARM          00000000  08006e40  08006e40  000200a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006e40  08006e40  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e40  08006e40  00016e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e44  08006e44  00016e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08006e48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c0  200000a0  08006ee8  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000460  08006ee8  00020460  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aada  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fe7  00000000  00000000  0003abaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001510  00000000  00000000  0003db98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013c0  00000000  00000000  0003f0a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c76a  00000000  00000000  00040468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018e14  00000000  00000000  0006cbd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001200bd  00000000  00000000  000859e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a5aa3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f08  00000000  00000000  001a5af8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200000a0 	.word	0x200000a0
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006cd4 	.word	0x08006cd4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200000a4 	.word	0x200000a4
 8000204:	08006cd4 	.word	0x08006cd4

08000208 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b088      	sub	sp, #32
 800020c:	af00      	add	r7, sp, #0
 800020e:	607b      	str	r3, [r7, #4]
 8000210:	4603      	mov	r3, r0
 8000212:	81fb      	strh	r3, [r7, #14]
 8000214:	460b      	mov	r3, r1
 8000216:	81bb      	strh	r3, [r7, #12]
 8000218:	4613      	mov	r3, r2
 800021a:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 800021c:	2300      	movs	r3, #0
 800021e:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8000220:	89bb      	ldrh	r3, [r7, #12]
 8000222:	b2db      	uxtb	r3, r3
 8000224:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8000226:	89bb      	ldrh	r3, [r7, #12]
 8000228:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800022c:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 800022e:	2300      	movs	r3, #0
 8000230:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8000232:	f001 fc71 	bl	8001b18 <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8000236:	89fb      	ldrh	r3, [r7, #14]
 8000238:	b2db      	uxtb	r3, r3
 800023a:	2203      	movs	r2, #3
 800023c:	f44f 7181 	mov.w	r1, #258	; 0x102
 8000240:	4618      	mov	r0, r3
 8000242:	f001 fafb 	bl	800183c <CODEC_IO_Write>
 8000246:	4603      	mov	r3, r0
 8000248:	461a      	mov	r2, r3
 800024a:	69fb      	ldr	r3, [r7, #28]
 800024c:	4413      	add	r3, r2
 800024e:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8000250:	89fb      	ldrh	r3, [r7, #14]
 8000252:	b2db      	uxtb	r3, r3
 8000254:	2200      	movs	r2, #0
 8000256:	f640 0117 	movw	r1, #2071	; 0x817
 800025a:	4618      	mov	r0, r3
 800025c:	f001 faee 	bl	800183c <CODEC_IO_Write>
 8000260:	4603      	mov	r3, r0
 8000262:	461a      	mov	r2, r3
 8000264:	69fb      	ldr	r3, [r7, #28]
 8000266:	4413      	add	r3, r2
 8000268:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 800026a:	89fb      	ldrh	r3, [r7, #14]
 800026c:	b2db      	uxtb	r3, r3
 800026e:	2200      	movs	r2, #0
 8000270:	f44f 7181 	mov.w	r1, #258	; 0x102
 8000274:	4618      	mov	r0, r3
 8000276:	f001 fae1 	bl	800183c <CODEC_IO_Write>
 800027a:	4603      	mov	r3, r0
 800027c:	461a      	mov	r2, r3
 800027e:	69fb      	ldr	r3, [r7, #28]
 8000280:	4413      	add	r3, r2
 8000282:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 8000284:	89fb      	ldrh	r3, [r7, #14]
 8000286:	b2db      	uxtb	r3, r3
 8000288:	226c      	movs	r2, #108	; 0x6c
 800028a:	2139      	movs	r1, #57	; 0x39
 800028c:	4618      	mov	r0, r3
 800028e:	f001 fad5 	bl	800183c <CODEC_IO_Write>
 8000292:	4603      	mov	r3, r0
 8000294:	461a      	mov	r2, r3
 8000296:	69fb      	ldr	r3, [r7, #28]
 8000298:	4413      	add	r3, r2
 800029a:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 800029c:	8afb      	ldrh	r3, [r7, #22]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d00c      	beq.n	80002bc <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 80002a2:	89fb      	ldrh	r3, [r7, #14]
 80002a4:	b2db      	uxtb	r3, r3
 80002a6:	2213      	movs	r2, #19
 80002a8:	2101      	movs	r1, #1
 80002aa:	4618      	mov	r0, r3
 80002ac:	f001 fac6 	bl	800183c <CODEC_IO_Write>
 80002b0:	4603      	mov	r3, r0
 80002b2:	461a      	mov	r2, r3
 80002b4:	69fb      	ldr	r3, [r7, #28]
 80002b6:	4413      	add	r3, r2
 80002b8:	61fb      	str	r3, [r7, #28]
 80002ba:	e00b      	b.n	80002d4 <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 80002bc:	89fb      	ldrh	r3, [r7, #14]
 80002be:	b2db      	uxtb	r3, r3
 80002c0:	2203      	movs	r2, #3
 80002c2:	2101      	movs	r1, #1
 80002c4:	4618      	mov	r0, r3
 80002c6:	f001 fab9 	bl	800183c <CODEC_IO_Write>
 80002ca:	4603      	mov	r3, r0
 80002cc:	461a      	mov	r2, r3
 80002ce:	69fb      	ldr	r3, [r7, #28]
 80002d0:	4413      	add	r3, r2
 80002d2:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 80002d4:	2032      	movs	r0, #50	; 0x32
 80002d6:	f001 fc87 	bl	8001be8 <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 80002da:	8b3b      	ldrh	r3, [r7, #24]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	f000 815f 	beq.w	80005a0 <wm8994_Init+0x398>
  {
    outputEnabled = 1;
 80002e2:	4bae      	ldr	r3, [pc, #696]	; (800059c <wm8994_Init+0x394>)
 80002e4:	2201      	movs	r2, #1
 80002e6:	601a      	str	r2, [r3, #0]

    switch (output_device)
 80002e8:	8b3b      	ldrh	r3, [r7, #24]
 80002ea:	2b03      	cmp	r3, #3
 80002ec:	f000 808c 	beq.w	8000408 <wm8994_Init+0x200>
 80002f0:	2b03      	cmp	r3, #3
 80002f2:	f300 8111 	bgt.w	8000518 <wm8994_Init+0x310>
 80002f6:	2b01      	cmp	r3, #1
 80002f8:	d002      	beq.n	8000300 <wm8994_Init+0xf8>
 80002fa:	2b02      	cmp	r3, #2
 80002fc:	d042      	beq.n	8000384 <wm8994_Init+0x17c>
 80002fe:	e10b      	b.n	8000518 <wm8994_Init+0x310>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8000300:	89fb      	ldrh	r3, [r7, #14]
 8000302:	b2db      	uxtb	r3, r3
 8000304:	f640 420c 	movw	r2, #3084	; 0xc0c
 8000308:	2105      	movs	r1, #5
 800030a:	4618      	mov	r0, r3
 800030c:	f001 fa96 	bl	800183c <CODEC_IO_Write>
 8000310:	4603      	mov	r3, r0
 8000312:	461a      	mov	r2, r3
 8000314:	69fb      	ldr	r3, [r7, #28]
 8000316:	4413      	add	r3, r2
 8000318:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 800031a:	89fb      	ldrh	r3, [r7, #14]
 800031c:	b2db      	uxtb	r3, r3
 800031e:	2200      	movs	r2, #0
 8000320:	f240 6101 	movw	r1, #1537	; 0x601
 8000324:	4618      	mov	r0, r3
 8000326:	f001 fa89 	bl	800183c <CODEC_IO_Write>
 800032a:	4603      	mov	r3, r0
 800032c:	461a      	mov	r2, r3
 800032e:	69fb      	ldr	r3, [r7, #28]
 8000330:	4413      	add	r3, r2
 8000332:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8000334:	89fb      	ldrh	r3, [r7, #14]
 8000336:	b2db      	uxtb	r3, r3
 8000338:	2200      	movs	r2, #0
 800033a:	f240 6102 	movw	r1, #1538	; 0x602
 800033e:	4618      	mov	r0, r3
 8000340:	f001 fa7c 	bl	800183c <CODEC_IO_Write>
 8000344:	4603      	mov	r3, r0
 8000346:	461a      	mov	r2, r3
 8000348:	69fb      	ldr	r3, [r7, #28]
 800034a:	4413      	add	r3, r2
 800034c:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800034e:	89fb      	ldrh	r3, [r7, #14]
 8000350:	b2db      	uxtb	r3, r3
 8000352:	2202      	movs	r2, #2
 8000354:	f240 6104 	movw	r1, #1540	; 0x604
 8000358:	4618      	mov	r0, r3
 800035a:	f001 fa6f 	bl	800183c <CODEC_IO_Write>
 800035e:	4603      	mov	r3, r0
 8000360:	461a      	mov	r2, r3
 8000362:	69fb      	ldr	r3, [r7, #28]
 8000364:	4413      	add	r3, r2
 8000366:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8000368:	89fb      	ldrh	r3, [r7, #14]
 800036a:	b2db      	uxtb	r3, r3
 800036c:	2202      	movs	r2, #2
 800036e:	f240 6105 	movw	r1, #1541	; 0x605
 8000372:	4618      	mov	r0, r3
 8000374:	f001 fa62 	bl	800183c <CODEC_IO_Write>
 8000378:	4603      	mov	r3, r0
 800037a:	461a      	mov	r2, r3
 800037c:	69fb      	ldr	r3, [r7, #28]
 800037e:	4413      	add	r3, r2
 8000380:	61fb      	str	r3, [r7, #28]
      break;
 8000382:	e110      	b.n	80005a6 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8000384:	89fb      	ldrh	r3, [r7, #14]
 8000386:	b2db      	uxtb	r3, r3
 8000388:	f240 3203 	movw	r2, #771	; 0x303
 800038c:	2105      	movs	r1, #5
 800038e:	4618      	mov	r0, r3
 8000390:	f001 fa54 	bl	800183c <CODEC_IO_Write>
 8000394:	4603      	mov	r3, r0
 8000396:	461a      	mov	r2, r3
 8000398:	69fb      	ldr	r3, [r7, #28]
 800039a:	4413      	add	r3, r2
 800039c:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800039e:	89fb      	ldrh	r3, [r7, #14]
 80003a0:	b2db      	uxtb	r3, r3
 80003a2:	2201      	movs	r2, #1
 80003a4:	f240 6101 	movw	r1, #1537	; 0x601
 80003a8:	4618      	mov	r0, r3
 80003aa:	f001 fa47 	bl	800183c <CODEC_IO_Write>
 80003ae:	4603      	mov	r3, r0
 80003b0:	461a      	mov	r2, r3
 80003b2:	69fb      	ldr	r3, [r7, #28]
 80003b4:	4413      	add	r3, r2
 80003b6:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80003b8:	89fb      	ldrh	r3, [r7, #14]
 80003ba:	b2db      	uxtb	r3, r3
 80003bc:	2201      	movs	r2, #1
 80003be:	f240 6102 	movw	r1, #1538	; 0x602
 80003c2:	4618      	mov	r0, r3
 80003c4:	f001 fa3a 	bl	800183c <CODEC_IO_Write>
 80003c8:	4603      	mov	r3, r0
 80003ca:	461a      	mov	r2, r3
 80003cc:	69fb      	ldr	r3, [r7, #28]
 80003ce:	4413      	add	r3, r2
 80003d0:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80003d2:	89fb      	ldrh	r3, [r7, #14]
 80003d4:	b2db      	uxtb	r3, r3
 80003d6:	2200      	movs	r2, #0
 80003d8:	f240 6104 	movw	r1, #1540	; 0x604
 80003dc:	4618      	mov	r0, r3
 80003de:	f001 fa2d 	bl	800183c <CODEC_IO_Write>
 80003e2:	4603      	mov	r3, r0
 80003e4:	461a      	mov	r2, r3
 80003e6:	69fb      	ldr	r3, [r7, #28]
 80003e8:	4413      	add	r3, r2
 80003ea:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80003ec:	89fb      	ldrh	r3, [r7, #14]
 80003ee:	b2db      	uxtb	r3, r3
 80003f0:	2200      	movs	r2, #0
 80003f2:	f240 6105 	movw	r1, #1541	; 0x605
 80003f6:	4618      	mov	r0, r3
 80003f8:	f001 fa20 	bl	800183c <CODEC_IO_Write>
 80003fc:	4603      	mov	r3, r0
 80003fe:	461a      	mov	r2, r3
 8000400:	69fb      	ldr	r3, [r7, #28]
 8000402:	4413      	add	r3, r2
 8000404:	61fb      	str	r3, [r7, #28]
      break;
 8000406:	e0ce      	b.n	80005a6 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8000408:	8afb      	ldrh	r3, [r7, #22]
 800040a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800040e:	d141      	bne.n	8000494 <wm8994_Init+0x28c>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8000410:	89fb      	ldrh	r3, [r7, #14]
 8000412:	b2db      	uxtb	r3, r3
 8000414:	f640 720f 	movw	r2, #3855	; 0xf0f
 8000418:	2105      	movs	r1, #5
 800041a:	4618      	mov	r0, r3
 800041c:	f001 fa0e 	bl	800183c <CODEC_IO_Write>
 8000420:	4603      	mov	r3, r0
 8000422:	461a      	mov	r2, r3
 8000424:	69fb      	ldr	r3, [r7, #28]
 8000426:	4413      	add	r3, r2
 8000428:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 800042a:	89fb      	ldrh	r3, [r7, #14]
 800042c:	b2db      	uxtb	r3, r3
 800042e:	2203      	movs	r2, #3
 8000430:	f240 6101 	movw	r1, #1537	; 0x601
 8000434:	4618      	mov	r0, r3
 8000436:	f001 fa01 	bl	800183c <CODEC_IO_Write>
 800043a:	4603      	mov	r3, r0
 800043c:	461a      	mov	r2, r3
 800043e:	69fb      	ldr	r3, [r7, #28]
 8000440:	4413      	add	r3, r2
 8000442:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 8000444:	89fb      	ldrh	r3, [r7, #14]
 8000446:	b2db      	uxtb	r3, r3
 8000448:	2203      	movs	r2, #3
 800044a:	f240 6102 	movw	r1, #1538	; 0x602
 800044e:	4618      	mov	r0, r3
 8000450:	f001 f9f4 	bl	800183c <CODEC_IO_Write>
 8000454:	4603      	mov	r3, r0
 8000456:	461a      	mov	r2, r3
 8000458:	69fb      	ldr	r3, [r7, #28]
 800045a:	4413      	add	r3, r2
 800045c:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 800045e:	89fb      	ldrh	r3, [r7, #14]
 8000460:	b2db      	uxtb	r3, r3
 8000462:	2203      	movs	r2, #3
 8000464:	f240 6104 	movw	r1, #1540	; 0x604
 8000468:	4618      	mov	r0, r3
 800046a:	f001 f9e7 	bl	800183c <CODEC_IO_Write>
 800046e:	4603      	mov	r3, r0
 8000470:	461a      	mov	r2, r3
 8000472:	69fb      	ldr	r3, [r7, #28]
 8000474:	4413      	add	r3, r2
 8000476:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 8000478:	89fb      	ldrh	r3, [r7, #14]
 800047a:	b2db      	uxtb	r3, r3
 800047c:	2203      	movs	r2, #3
 800047e:	f240 6105 	movw	r1, #1541	; 0x605
 8000482:	4618      	mov	r0, r3
 8000484:	f001 f9da 	bl	800183c <CODEC_IO_Write>
 8000488:	4603      	mov	r3, r0
 800048a:	461a      	mov	r2, r3
 800048c:	69fb      	ldr	r3, [r7, #28]
 800048e:	4413      	add	r3, r2
 8000490:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 8000492:	e088      	b.n	80005a6 <wm8994_Init+0x39e>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8000494:	89fb      	ldrh	r3, [r7, #14]
 8000496:	b2db      	uxtb	r3, r3
 8000498:	f640 720f 	movw	r2, #3855	; 0xf0f
 800049c:	2105      	movs	r1, #5
 800049e:	4618      	mov	r0, r3
 80004a0:	f001 f9cc 	bl	800183c <CODEC_IO_Write>
 80004a4:	4603      	mov	r3, r0
 80004a6:	461a      	mov	r2, r3
 80004a8:	69fb      	ldr	r3, [r7, #28]
 80004aa:	4413      	add	r3, r2
 80004ac:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80004ae:	89fb      	ldrh	r3, [r7, #14]
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	2201      	movs	r2, #1
 80004b4:	f240 6101 	movw	r1, #1537	; 0x601
 80004b8:	4618      	mov	r0, r3
 80004ba:	f001 f9bf 	bl	800183c <CODEC_IO_Write>
 80004be:	4603      	mov	r3, r0
 80004c0:	461a      	mov	r2, r3
 80004c2:	69fb      	ldr	r3, [r7, #28]
 80004c4:	4413      	add	r3, r2
 80004c6:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80004c8:	89fb      	ldrh	r3, [r7, #14]
 80004ca:	b2db      	uxtb	r3, r3
 80004cc:	2201      	movs	r2, #1
 80004ce:	f240 6102 	movw	r1, #1538	; 0x602
 80004d2:	4618      	mov	r0, r3
 80004d4:	f001 f9b2 	bl	800183c <CODEC_IO_Write>
 80004d8:	4603      	mov	r3, r0
 80004da:	461a      	mov	r2, r3
 80004dc:	69fb      	ldr	r3, [r7, #28]
 80004de:	4413      	add	r3, r2
 80004e0:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80004e2:	89fb      	ldrh	r3, [r7, #14]
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	2202      	movs	r2, #2
 80004e8:	f240 6104 	movw	r1, #1540	; 0x604
 80004ec:	4618      	mov	r0, r3
 80004ee:	f001 f9a5 	bl	800183c <CODEC_IO_Write>
 80004f2:	4603      	mov	r3, r0
 80004f4:	461a      	mov	r2, r3
 80004f6:	69fb      	ldr	r3, [r7, #28]
 80004f8:	4413      	add	r3, r2
 80004fa:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 80004fc:	89fb      	ldrh	r3, [r7, #14]
 80004fe:	b2db      	uxtb	r3, r3
 8000500:	2202      	movs	r2, #2
 8000502:	f240 6105 	movw	r1, #1541	; 0x605
 8000506:	4618      	mov	r0, r3
 8000508:	f001 f998 	bl	800183c <CODEC_IO_Write>
 800050c:	4603      	mov	r3, r0
 800050e:	461a      	mov	r2, r3
 8000510:	69fb      	ldr	r3, [r7, #28]
 8000512:	4413      	add	r3, r2
 8000514:	61fb      	str	r3, [r7, #28]
      break;
 8000516:	e046      	b.n	80005a6 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8000518:	89fb      	ldrh	r3, [r7, #14]
 800051a:	b2db      	uxtb	r3, r3
 800051c:	f240 3203 	movw	r2, #771	; 0x303
 8000520:	2105      	movs	r1, #5
 8000522:	4618      	mov	r0, r3
 8000524:	f001 f98a 	bl	800183c <CODEC_IO_Write>
 8000528:	4603      	mov	r3, r0
 800052a:	461a      	mov	r2, r3
 800052c:	69fb      	ldr	r3, [r7, #28]
 800052e:	4413      	add	r3, r2
 8000530:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8000532:	89fb      	ldrh	r3, [r7, #14]
 8000534:	b2db      	uxtb	r3, r3
 8000536:	2201      	movs	r2, #1
 8000538:	f240 6101 	movw	r1, #1537	; 0x601
 800053c:	4618      	mov	r0, r3
 800053e:	f001 f97d 	bl	800183c <CODEC_IO_Write>
 8000542:	4603      	mov	r3, r0
 8000544:	461a      	mov	r2, r3
 8000546:	69fb      	ldr	r3, [r7, #28]
 8000548:	4413      	add	r3, r2
 800054a:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800054c:	89fb      	ldrh	r3, [r7, #14]
 800054e:	b2db      	uxtb	r3, r3
 8000550:	2201      	movs	r2, #1
 8000552:	f240 6102 	movw	r1, #1538	; 0x602
 8000556:	4618      	mov	r0, r3
 8000558:	f001 f970 	bl	800183c <CODEC_IO_Write>
 800055c:	4603      	mov	r3, r0
 800055e:	461a      	mov	r2, r3
 8000560:	69fb      	ldr	r3, [r7, #28]
 8000562:	4413      	add	r3, r2
 8000564:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8000566:	89fb      	ldrh	r3, [r7, #14]
 8000568:	b2db      	uxtb	r3, r3
 800056a:	2200      	movs	r2, #0
 800056c:	f240 6104 	movw	r1, #1540	; 0x604
 8000570:	4618      	mov	r0, r3
 8000572:	f001 f963 	bl	800183c <CODEC_IO_Write>
 8000576:	4603      	mov	r3, r0
 8000578:	461a      	mov	r2, r3
 800057a:	69fb      	ldr	r3, [r7, #28]
 800057c:	4413      	add	r3, r2
 800057e:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8000580:	89fb      	ldrh	r3, [r7, #14]
 8000582:	b2db      	uxtb	r3, r3
 8000584:	2200      	movs	r2, #0
 8000586:	f240 6105 	movw	r1, #1541	; 0x605
 800058a:	4618      	mov	r0, r3
 800058c:	f001 f956 	bl	800183c <CODEC_IO_Write>
 8000590:	4603      	mov	r3, r0
 8000592:	461a      	mov	r2, r3
 8000594:	69fb      	ldr	r3, [r7, #28]
 8000596:	4413      	add	r3, r2
 8000598:	61fb      	str	r3, [r7, #28]
      break;
 800059a:	e004      	b.n	80005a6 <wm8994_Init+0x39e>
 800059c:	200000bc 	.word	0x200000bc
    }
  }
  else
  {
    outputEnabled = 0;
 80005a0:	4b99      	ldr	r3, [pc, #612]	; (8000808 <wm8994_Init+0x600>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 80005a6:	8afb      	ldrh	r3, [r7, #22]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	f000 81ab 	beq.w	8000904 <wm8994_Init+0x6fc>
  {
    inputEnabled = 1;
 80005ae:	4b97      	ldr	r3, [pc, #604]	; (800080c <wm8994_Init+0x604>)
 80005b0:	2201      	movs	r2, #1
 80005b2:	601a      	str	r2, [r3, #0]
    switch (input_device)
 80005b4:	8afb      	ldrh	r3, [r7, #22]
 80005b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80005ba:	f000 8129 	beq.w	8000810 <wm8994_Init+0x608>
 80005be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80005c2:	f300 819b 	bgt.w	80008fc <wm8994_Init+0x6f4>
 80005c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80005ca:	d05a      	beq.n	8000682 <wm8994_Init+0x47a>
 80005cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80005d0:	f300 8194 	bgt.w	80008fc <wm8994_Init+0x6f4>
 80005d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80005d8:	f000 80c6 	beq.w	8000768 <wm8994_Init+0x560>
 80005dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80005e0:	f040 818c 	bne.w	80008fc <wm8994_Init+0x6f4>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 80005e4:	89fb      	ldrh	r3, [r7, #14]
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 80005ec:	2104      	movs	r1, #4
 80005ee:	4618      	mov	r0, r3
 80005f0:	f001 f924 	bl	800183c <CODEC_IO_Write>
 80005f4:	4603      	mov	r3, r0
 80005f6:	461a      	mov	r2, r3
 80005f8:	69fb      	ldr	r3, [r7, #28]
 80005fa:	4413      	add	r3, r2
 80005fc:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 80005fe:	89fb      	ldrh	r3, [r7, #14]
 8000600:	b2db      	uxtb	r3, r3
 8000602:	22db      	movs	r2, #219	; 0xdb
 8000604:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8000608:	4618      	mov	r0, r3
 800060a:	f001 f917 	bl	800183c <CODEC_IO_Write>
 800060e:	4603      	mov	r3, r0
 8000610:	461a      	mov	r2, r3
 8000612:	69fb      	ldr	r3, [r7, #28]
 8000614:	4413      	add	r3, r2
 8000616:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 8000618:	89fb      	ldrh	r3, [r7, #14]
 800061a:	b2db      	uxtb	r3, r3
 800061c:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8000620:	2102      	movs	r1, #2
 8000622:	4618      	mov	r0, r3
 8000624:	f001 f90a 	bl	800183c <CODEC_IO_Write>
 8000628:	4603      	mov	r3, r0
 800062a:	461a      	mov	r2, r3
 800062c:	69fb      	ldr	r3, [r7, #28]
 800062e:	4413      	add	r3, r2
 8000630:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8000632:	89fb      	ldrh	r3, [r7, #14]
 8000634:	b2db      	uxtb	r3, r3
 8000636:	2202      	movs	r2, #2
 8000638:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 800063c:	4618      	mov	r0, r3
 800063e:	f001 f8fd 	bl	800183c <CODEC_IO_Write>
 8000642:	4603      	mov	r3, r0
 8000644:	461a      	mov	r2, r3
 8000646:	69fb      	ldr	r3, [r7, #28]
 8000648:	4413      	add	r3, r2
 800064a:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 800064c:	89fb      	ldrh	r3, [r7, #14]
 800064e:	b2db      	uxtb	r3, r3
 8000650:	2202      	movs	r2, #2
 8000652:	f240 6109 	movw	r1, #1545	; 0x609
 8000656:	4618      	mov	r0, r3
 8000658:	f001 f8f0 	bl	800183c <CODEC_IO_Write>
 800065c:	4603      	mov	r3, r0
 800065e:	461a      	mov	r2, r3
 8000660:	69fb      	ldr	r3, [r7, #28]
 8000662:	4413      	add	r3, r2
 8000664:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 8000666:	89fb      	ldrh	r3, [r7, #14]
 8000668:	b2db      	uxtb	r3, r3
 800066a:	220e      	movs	r2, #14
 800066c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000670:	4618      	mov	r0, r3
 8000672:	f001 f8e3 	bl	800183c <CODEC_IO_Write>
 8000676:	4603      	mov	r3, r0
 8000678:	461a      	mov	r2, r3
 800067a:	69fb      	ldr	r3, [r7, #28]
 800067c:	4413      	add	r3, r2
 800067e:	61fb      	str	r3, [r7, #28]
      break;
 8000680:	e143      	b.n	800090a <wm8994_Init+0x702>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 8000682:	89fb      	ldrh	r3, [r7, #14]
 8000684:	b2db      	uxtb	r3, r3
 8000686:	2211      	movs	r2, #17
 8000688:	2128      	movs	r1, #40	; 0x28
 800068a:	4618      	mov	r0, r3
 800068c:	f001 f8d6 	bl	800183c <CODEC_IO_Write>
 8000690:	4603      	mov	r3, r0
 8000692:	461a      	mov	r2, r3
 8000694:	69fb      	ldr	r3, [r7, #28]
 8000696:	4413      	add	r3, r2
 8000698:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
 800069a:	89fb      	ldrh	r3, [r7, #14]
 800069c:	b2db      	uxtb	r3, r3
 800069e:	2235      	movs	r2, #53	; 0x35
 80006a0:	2129      	movs	r1, #41	; 0x29
 80006a2:	4618      	mov	r0, r3
 80006a4:	f001 f8ca 	bl	800183c <CODEC_IO_Write>
 80006a8:	4603      	mov	r3, r0
 80006aa:	461a      	mov	r2, r3
 80006ac:	69fb      	ldr	r3, [r7, #28]
 80006ae:	4413      	add	r3, r2
 80006b0:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
 80006b2:	89fb      	ldrh	r3, [r7, #14]
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	2235      	movs	r2, #53	; 0x35
 80006b8:	212a      	movs	r1, #42	; 0x2a
 80006ba:	4618      	mov	r0, r3
 80006bc:	f001 f8be 	bl	800183c <CODEC_IO_Write>
 80006c0:	4603      	mov	r3, r0
 80006c2:	461a      	mov	r2, r3
 80006c4:	69fb      	ldr	r3, [r7, #28]
 80006c6:	4413      	add	r3, r2
 80006c8:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 80006ca:	89fb      	ldrh	r3, [r7, #14]
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	f240 3203 	movw	r2, #771	; 0x303
 80006d2:	2104      	movs	r1, #4
 80006d4:	4618      	mov	r0, r3
 80006d6:	f001 f8b1 	bl	800183c <CODEC_IO_Write>
 80006da:	4603      	mov	r3, r0
 80006dc:	461a      	mov	r2, r3
 80006de:	69fb      	ldr	r3, [r7, #28]
 80006e0:	4413      	add	r3, r2
 80006e2:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80006e4:	89fb      	ldrh	r3, [r7, #14]
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	22db      	movs	r2, #219	; 0xdb
 80006ea:	f44f 6188 	mov.w	r1, #1088	; 0x440
 80006ee:	4618      	mov	r0, r3
 80006f0:	f001 f8a4 	bl	800183c <CODEC_IO_Write>
 80006f4:	4603      	mov	r3, r0
 80006f6:	461a      	mov	r2, r3
 80006f8:	69fb      	ldr	r3, [r7, #28]
 80006fa:	4413      	add	r3, r2
 80006fc:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 80006fe:	89fb      	ldrh	r3, [r7, #14]
 8000700:	b2db      	uxtb	r3, r3
 8000702:	f246 3250 	movw	r2, #25424	; 0x6350
 8000706:	2102      	movs	r1, #2
 8000708:	4618      	mov	r0, r3
 800070a:	f001 f897 	bl	800183c <CODEC_IO_Write>
 800070e:	4603      	mov	r3, r0
 8000710:	461a      	mov	r2, r3
 8000712:	69fb      	ldr	r3, [r7, #28]
 8000714:	4413      	add	r3, r2
 8000716:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8000718:	89fb      	ldrh	r3, [r7, #14]
 800071a:	b2db      	uxtb	r3, r3
 800071c:	2202      	movs	r2, #2
 800071e:	f240 6106 	movw	r1, #1542	; 0x606
 8000722:	4618      	mov	r0, r3
 8000724:	f001 f88a 	bl	800183c <CODEC_IO_Write>
 8000728:	4603      	mov	r3, r0
 800072a:	461a      	mov	r2, r3
 800072c:	69fb      	ldr	r3, [r7, #28]
 800072e:	4413      	add	r3, r2
 8000730:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8000732:	89fb      	ldrh	r3, [r7, #14]
 8000734:	b2db      	uxtb	r3, r3
 8000736:	2202      	movs	r2, #2
 8000738:	f240 6107 	movw	r1, #1543	; 0x607
 800073c:	4618      	mov	r0, r3
 800073e:	f001 f87d 	bl	800183c <CODEC_IO_Write>
 8000742:	4603      	mov	r3, r0
 8000744:	461a      	mov	r2, r3
 8000746:	69fb      	ldr	r3, [r7, #28]
 8000748:	4413      	add	r3, r2
 800074a:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 800074c:	89fb      	ldrh	r3, [r7, #14]
 800074e:	b2db      	uxtb	r3, r3
 8000750:	220d      	movs	r2, #13
 8000752:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000756:	4618      	mov	r0, r3
 8000758:	f001 f870 	bl	800183c <CODEC_IO_Write>
 800075c:	4603      	mov	r3, r0
 800075e:	461a      	mov	r2, r3
 8000760:	69fb      	ldr	r3, [r7, #28]
 8000762:	4413      	add	r3, r2
 8000764:	61fb      	str	r3, [r7, #28]
      break;
 8000766:	e0d0      	b.n	800090a <wm8994_Init+0x702>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 8000768:	89fb      	ldrh	r3, [r7, #14]
 800076a:	b2db      	uxtb	r3, r3
 800076c:	f44f 7243 	mov.w	r2, #780	; 0x30c
 8000770:	2104      	movs	r1, #4
 8000772:	4618      	mov	r0, r3
 8000774:	f001 f862 	bl	800183c <CODEC_IO_Write>
 8000778:	4603      	mov	r3, r0
 800077a:	461a      	mov	r2, r3
 800077c:	69fb      	ldr	r3, [r7, #28]
 800077e:	4413      	add	r3, r2
 8000780:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8000782:	89fb      	ldrh	r3, [r7, #14]
 8000784:	b2db      	uxtb	r3, r3
 8000786:	22db      	movs	r2, #219	; 0xdb
 8000788:	f44f 6188 	mov.w	r1, #1088	; 0x440
 800078c:	4618      	mov	r0, r3
 800078e:	f001 f855 	bl	800183c <CODEC_IO_Write>
 8000792:	4603      	mov	r3, r0
 8000794:	461a      	mov	r2, r3
 8000796:	69fb      	ldr	r3, [r7, #28]
 8000798:	4413      	add	r3, r2
 800079a:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 800079c:	89fb      	ldrh	r3, [r7, #14]
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	f246 3250 	movw	r2, #25424	; 0x6350
 80007a4:	2102      	movs	r1, #2
 80007a6:	4618      	mov	r0, r3
 80007a8:	f001 f848 	bl	800183c <CODEC_IO_Write>
 80007ac:	4603      	mov	r3, r0
 80007ae:	461a      	mov	r2, r3
 80007b0:	69fb      	ldr	r3, [r7, #28]
 80007b2:	4413      	add	r3, r2
 80007b4:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80007b6:	89fb      	ldrh	r3, [r7, #14]
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	2202      	movs	r2, #2
 80007bc:	f240 6106 	movw	r1, #1542	; 0x606
 80007c0:	4618      	mov	r0, r3
 80007c2:	f001 f83b 	bl	800183c <CODEC_IO_Write>
 80007c6:	4603      	mov	r3, r0
 80007c8:	461a      	mov	r2, r3
 80007ca:	69fb      	ldr	r3, [r7, #28]
 80007cc:	4413      	add	r3, r2
 80007ce:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80007d0:	89fb      	ldrh	r3, [r7, #14]
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	2202      	movs	r2, #2
 80007d6:	f240 6107 	movw	r1, #1543	; 0x607
 80007da:	4618      	mov	r0, r3
 80007dc:	f001 f82e 	bl	800183c <CODEC_IO_Write>
 80007e0:	4603      	mov	r3, r0
 80007e2:	461a      	mov	r2, r3
 80007e4:	69fb      	ldr	r3, [r7, #28]
 80007e6:	4413      	add	r3, r2
 80007e8:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80007ea:	89fb      	ldrh	r3, [r7, #14]
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	220d      	movs	r2, #13
 80007f0:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80007f4:	4618      	mov	r0, r3
 80007f6:	f001 f821 	bl	800183c <CODEC_IO_Write>
 80007fa:	4603      	mov	r3, r0
 80007fc:	461a      	mov	r2, r3
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	4413      	add	r3, r2
 8000802:	61fb      	str	r3, [r7, #28]
      break; 
 8000804:	e081      	b.n	800090a <wm8994_Init+0x702>
 8000806:	bf00      	nop
 8000808:	200000bc 	.word	0x200000bc
 800080c:	200000c0 	.word	0x200000c0
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 8000810:	89fb      	ldrh	r3, [r7, #14]
 8000812:	b2db      	uxtb	r3, r3
 8000814:	f640 723c 	movw	r2, #3900	; 0xf3c
 8000818:	2104      	movs	r1, #4
 800081a:	4618      	mov	r0, r3
 800081c:	f001 f80e 	bl	800183c <CODEC_IO_Write>
 8000820:	4603      	mov	r3, r0
 8000822:	461a      	mov	r2, r3
 8000824:	69fb      	ldr	r3, [r7, #28]
 8000826:	4413      	add	r3, r2
 8000828:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 800082a:	89fb      	ldrh	r3, [r7, #14]
 800082c:	b2db      	uxtb	r3, r3
 800082e:	22db      	movs	r2, #219	; 0xdb
 8000830:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8000834:	4618      	mov	r0, r3
 8000836:	f001 f801 	bl	800183c <CODEC_IO_Write>
 800083a:	4603      	mov	r3, r0
 800083c:	461a      	mov	r2, r3
 800083e:	69fb      	ldr	r3, [r7, #28]
 8000840:	4413      	add	r3, r2
 8000842:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8000844:	89fb      	ldrh	r3, [r7, #14]
 8000846:	b2db      	uxtb	r3, r3
 8000848:	22db      	movs	r2, #219	; 0xdb
 800084a:	f44f 6188 	mov.w	r1, #1088	; 0x440
 800084e:	4618      	mov	r0, r3
 8000850:	f000 fff4 	bl	800183c <CODEC_IO_Write>
 8000854:	4603      	mov	r3, r0
 8000856:	461a      	mov	r2, r3
 8000858:	69fb      	ldr	r3, [r7, #28]
 800085a:	4413      	add	r3, r2
 800085c:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 800085e:	89fb      	ldrh	r3, [r7, #14]
 8000860:	b2db      	uxtb	r3, r3
 8000862:	f246 32a0 	movw	r2, #25504	; 0x63a0
 8000866:	2102      	movs	r1, #2
 8000868:	4618      	mov	r0, r3
 800086a:	f000 ffe7 	bl	800183c <CODEC_IO_Write>
 800086e:	4603      	mov	r3, r0
 8000870:	461a      	mov	r2, r3
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	4413      	add	r3, r2
 8000876:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8000878:	89fb      	ldrh	r3, [r7, #14]
 800087a:	b2db      	uxtb	r3, r3
 800087c:	2202      	movs	r2, #2
 800087e:	f240 6106 	movw	r1, #1542	; 0x606
 8000882:	4618      	mov	r0, r3
 8000884:	f000 ffda 	bl	800183c <CODEC_IO_Write>
 8000888:	4603      	mov	r3, r0
 800088a:	461a      	mov	r2, r3
 800088c:	69fb      	ldr	r3, [r7, #28]
 800088e:	4413      	add	r3, r2
 8000890:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8000892:	89fb      	ldrh	r3, [r7, #14]
 8000894:	b2db      	uxtb	r3, r3
 8000896:	2202      	movs	r2, #2
 8000898:	f240 6107 	movw	r1, #1543	; 0x607
 800089c:	4618      	mov	r0, r3
 800089e:	f000 ffcd 	bl	800183c <CODEC_IO_Write>
 80008a2:	4603      	mov	r3, r0
 80008a4:	461a      	mov	r2, r3
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	4413      	add	r3, r2
 80008aa:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 80008ac:	89fb      	ldrh	r3, [r7, #14]
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	2202      	movs	r2, #2
 80008b2:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 80008b6:	4618      	mov	r0, r3
 80008b8:	f000 ffc0 	bl	800183c <CODEC_IO_Write>
 80008bc:	4603      	mov	r3, r0
 80008be:	461a      	mov	r2, r3
 80008c0:	69fb      	ldr	r3, [r7, #28]
 80008c2:	4413      	add	r3, r2
 80008c4:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 80008c6:	89fb      	ldrh	r3, [r7, #14]
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	2202      	movs	r2, #2
 80008cc:	f240 6109 	movw	r1, #1545	; 0x609
 80008d0:	4618      	mov	r0, r3
 80008d2:	f000 ffb3 	bl	800183c <CODEC_IO_Write>
 80008d6:	4603      	mov	r3, r0
 80008d8:	461a      	mov	r2, r3
 80008da:	69fb      	ldr	r3, [r7, #28]
 80008dc:	4413      	add	r3, r2
 80008de:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80008e0:	89fb      	ldrh	r3, [r7, #14]
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	220d      	movs	r2, #13
 80008e6:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80008ea:	4618      	mov	r0, r3
 80008ec:	f000 ffa6 	bl	800183c <CODEC_IO_Write>
 80008f0:	4603      	mov	r3, r0
 80008f2:	461a      	mov	r2, r3
 80008f4:	69fb      	ldr	r3, [r7, #28]
 80008f6:	4413      	add	r3, r2
 80008f8:	61fb      	str	r3, [r7, #28]
      break;    
 80008fa:	e006      	b.n	800090a <wm8994_Init+0x702>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	3301      	adds	r3, #1
 8000900:	61fb      	str	r3, [r7, #28]
      break;
 8000902:	e002      	b.n	800090a <wm8994_Init+0x702>
    }
  }
  else
  {
    inputEnabled = 0;
 8000904:	4ba4      	ldr	r3, [pc, #656]	; (8000b98 <wm8994_Init+0x990>)
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	4aa3      	ldr	r2, [pc, #652]	; (8000b9c <wm8994_Init+0x994>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d079      	beq.n	8000a06 <wm8994_Init+0x7fe>
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	4aa1      	ldr	r2, [pc, #644]	; (8000b9c <wm8994_Init+0x994>)
 8000916:	4293      	cmp	r3, r2
 8000918:	f200 80ad 	bhi.w	8000a76 <wm8994_Init+0x86e>
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000922:	4293      	cmp	r3, r2
 8000924:	d061      	beq.n	80009ea <wm8994_Init+0x7e2>
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800092c:	4293      	cmp	r3, r2
 800092e:	f200 80a2 	bhi.w	8000a76 <wm8994_Init+0x86e>
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000938:	4293      	cmp	r3, r2
 800093a:	f000 808e 	beq.w	8000a5a <wm8994_Init+0x852>
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000944:	4293      	cmp	r3, r2
 8000946:	f200 8096 	bhi.w	8000a76 <wm8994_Init+0x86e>
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8000950:	d03d      	beq.n	80009ce <wm8994_Init+0x7c6>
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8000958:	f200 808d 	bhi.w	8000a76 <wm8994_Init+0x86e>
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	f245 6222 	movw	r2, #22050	; 0x5622
 8000962:	4293      	cmp	r3, r2
 8000964:	d06b      	beq.n	8000a3e <wm8994_Init+0x836>
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	f245 6222 	movw	r2, #22050	; 0x5622
 800096c:	4293      	cmp	r3, r2
 800096e:	f200 8082 	bhi.w	8000a76 <wm8994_Init+0x86e>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8000978:	d01b      	beq.n	80009b2 <wm8994_Init+0x7aa>
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8000980:	d879      	bhi.n	8000a76 <wm8994_Init+0x86e>
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8000988:	d005      	beq.n	8000996 <wm8994_Init+0x78e>
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	f642 3211 	movw	r2, #11025	; 0x2b11
 8000990:	4293      	cmp	r3, r2
 8000992:	d046      	beq.n	8000a22 <wm8994_Init+0x81a>
 8000994:	e06f      	b.n	8000a76 <wm8994_Init+0x86e>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8000996:	89fb      	ldrh	r3, [r7, #14]
 8000998:	b2db      	uxtb	r3, r3
 800099a:	2203      	movs	r2, #3
 800099c:	f44f 7104 	mov.w	r1, #528	; 0x210
 80009a0:	4618      	mov	r0, r3
 80009a2:	f000 ff4b 	bl	800183c <CODEC_IO_Write>
 80009a6:	4603      	mov	r3, r0
 80009a8:	461a      	mov	r2, r3
 80009aa:	69fb      	ldr	r3, [r7, #28]
 80009ac:	4413      	add	r3, r2
 80009ae:	61fb      	str	r3, [r7, #28]
    break;
 80009b0:	e06f      	b.n	8000a92 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 80009b2:	89fb      	ldrh	r3, [r7, #14]
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	2233      	movs	r2, #51	; 0x33
 80009b8:	f44f 7104 	mov.w	r1, #528	; 0x210
 80009bc:	4618      	mov	r0, r3
 80009be:	f000 ff3d 	bl	800183c <CODEC_IO_Write>
 80009c2:	4603      	mov	r3, r0
 80009c4:	461a      	mov	r2, r3
 80009c6:	69fb      	ldr	r3, [r7, #28]
 80009c8:	4413      	add	r3, r2
 80009ca:	61fb      	str	r3, [r7, #28]
    break;
 80009cc:	e061      	b.n	8000a92 <wm8994_Init+0x88a>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 80009ce:	89fb      	ldrh	r3, [r7, #14]
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	2263      	movs	r2, #99	; 0x63
 80009d4:	f44f 7104 	mov.w	r1, #528	; 0x210
 80009d8:	4618      	mov	r0, r3
 80009da:	f000 ff2f 	bl	800183c <CODEC_IO_Write>
 80009de:	4603      	mov	r3, r0
 80009e0:	461a      	mov	r2, r3
 80009e2:	69fb      	ldr	r3, [r7, #28]
 80009e4:	4413      	add	r3, r2
 80009e6:	61fb      	str	r3, [r7, #28]
    break;
 80009e8:	e053      	b.n	8000a92 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80009ea:	89fb      	ldrh	r3, [r7, #14]
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	2283      	movs	r2, #131	; 0x83
 80009f0:	f44f 7104 	mov.w	r1, #528	; 0x210
 80009f4:	4618      	mov	r0, r3
 80009f6:	f000 ff21 	bl	800183c <CODEC_IO_Write>
 80009fa:	4603      	mov	r3, r0
 80009fc:	461a      	mov	r2, r3
 80009fe:	69fb      	ldr	r3, [r7, #28]
 8000a00:	4413      	add	r3, r2
 8000a02:	61fb      	str	r3, [r7, #28]
    break;
 8000a04:	e045      	b.n	8000a92 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8000a06:	89fb      	ldrh	r3, [r7, #14]
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	22a3      	movs	r2, #163	; 0xa3
 8000a0c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000a10:	4618      	mov	r0, r3
 8000a12:	f000 ff13 	bl	800183c <CODEC_IO_Write>
 8000a16:	4603      	mov	r3, r0
 8000a18:	461a      	mov	r2, r3
 8000a1a:	69fb      	ldr	r3, [r7, #28]
 8000a1c:	4413      	add	r3, r2
 8000a1e:	61fb      	str	r3, [r7, #28]
    break;
 8000a20:	e037      	b.n	8000a92 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8000a22:	89fb      	ldrh	r3, [r7, #14]
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	2213      	movs	r2, #19
 8000a28:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f000 ff05 	bl	800183c <CODEC_IO_Write>
 8000a32:	4603      	mov	r3, r0
 8000a34:	461a      	mov	r2, r3
 8000a36:	69fb      	ldr	r3, [r7, #28]
 8000a38:	4413      	add	r3, r2
 8000a3a:	61fb      	str	r3, [r7, #28]
    break;
 8000a3c:	e029      	b.n	8000a92 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8000a3e:	89fb      	ldrh	r3, [r7, #14]
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	2243      	movs	r2, #67	; 0x43
 8000a44:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f000 fef7 	bl	800183c <CODEC_IO_Write>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	461a      	mov	r2, r3
 8000a52:	69fb      	ldr	r3, [r7, #28]
 8000a54:	4413      	add	r3, r2
 8000a56:	61fb      	str	r3, [r7, #28]
    break;
 8000a58:	e01b      	b.n	8000a92 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8000a5a:	89fb      	ldrh	r3, [r7, #14]
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	2273      	movs	r2, #115	; 0x73
 8000a60:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000a64:	4618      	mov	r0, r3
 8000a66:	f000 fee9 	bl	800183c <CODEC_IO_Write>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	69fb      	ldr	r3, [r7, #28]
 8000a70:	4413      	add	r3, r2
 8000a72:	61fb      	str	r3, [r7, #28]
    break; 
 8000a74:	e00d      	b.n	8000a92 <wm8994_Init+0x88a>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8000a76:	89fb      	ldrh	r3, [r7, #14]
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	2283      	movs	r2, #131	; 0x83
 8000a7c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000a80:	4618      	mov	r0, r3
 8000a82:	f000 fedb 	bl	800183c <CODEC_IO_Write>
 8000a86:	4603      	mov	r3, r0
 8000a88:	461a      	mov	r2, r3
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	61fb      	str	r3, [r7, #28]
    break; 
 8000a90:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8000a92:	8afb      	ldrh	r3, [r7, #22]
 8000a94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a98:	d10e      	bne.n	8000ab8 <wm8994_Init+0x8b0>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 8000a9a:	89fb      	ldrh	r3, [r7, #14]
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	f244 0218 	movw	r2, #16408	; 0x4018
 8000aa2:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f000 fec8 	bl	800183c <CODEC_IO_Write>
 8000aac:	4603      	mov	r3, r0
 8000aae:	461a      	mov	r2, r3
 8000ab0:	69fb      	ldr	r3, [r7, #28]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	61fb      	str	r3, [r7, #28]
 8000ab6:	e00d      	b.n	8000ad4 <wm8994_Init+0x8cc>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 8000ab8:	89fb      	ldrh	r3, [r7, #14]
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	f244 0210 	movw	r2, #16400	; 0x4010
 8000ac0:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f000 feb9 	bl	800183c <CODEC_IO_Write>
 8000aca:	4603      	mov	r3, r0
 8000acc:	461a      	mov	r2, r3
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 8000ad4:	89fb      	ldrh	r3, [r7, #14]
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	2200      	movs	r2, #0
 8000ada:	f240 3102 	movw	r1, #770	; 0x302
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f000 feac 	bl	800183c <CODEC_IO_Write>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	69fb      	ldr	r3, [r7, #28]
 8000aea:	4413      	add	r3, r2
 8000aec:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 8000aee:	89fb      	ldrh	r3, [r7, #14]
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	220a      	movs	r2, #10
 8000af4:	f44f 7102 	mov.w	r1, #520	; 0x208
 8000af8:	4618      	mov	r0, r3
 8000afa:	f000 fe9f 	bl	800183c <CODEC_IO_Write>
 8000afe:	4603      	mov	r3, r0
 8000b00:	461a      	mov	r2, r3
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	4413      	add	r3, r2
 8000b06:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 8000b08:	89fb      	ldrh	r3, [r7, #14]
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b12:	4618      	mov	r0, r3
 8000b14:	f000 fe92 	bl	800183c <CODEC_IO_Write>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	69fb      	ldr	r3, [r7, #28]
 8000b1e:	4413      	add	r3, r2
 8000b20:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 8000b22:	8b3b      	ldrh	r3, [r7, #24]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	f000 817b 	beq.w	8000e20 <wm8994_Init+0xc18>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 8000b2a:	8b3b      	ldrh	r3, [r7, #24]
 8000b2c:	2b02      	cmp	r3, #2
 8000b2e:	d157      	bne.n	8000be0 <wm8994_Init+0x9d8>
    {      
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 8000b30:	89fb      	ldrh	r3, [r7, #14]
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b38:	212d      	movs	r1, #45	; 0x2d
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f000 fe7e 	bl	800183c <CODEC_IO_Write>
 8000b40:	4603      	mov	r3, r0
 8000b42:	461a      	mov	r2, r3
 8000b44:	69fb      	ldr	r3, [r7, #28]
 8000b46:	4413      	add	r3, r2
 8000b48:	61fb      	str	r3, [r7, #28]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);    
 8000b4a:	89fb      	ldrh	r3, [r7, #14]
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b52:	212e      	movs	r1, #46	; 0x2e
 8000b54:	4618      	mov	r0, r3
 8000b56:	f000 fe71 	bl	800183c <CODEC_IO_Write>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	4413      	add	r3, r2
 8000b62:	61fb      	str	r3, [r7, #28]
            
      /* Startup sequence for Headphone */
      if(ColdStartup)
 8000b64:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <wm8994_Init+0x998>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d01b      	beq.n	8000ba4 <wm8994_Init+0x99c>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 8000b6c:	89fb      	ldrh	r3, [r7, #14]
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	f44f 4201 	mov.w	r2, #33024	; 0x8100
 8000b74:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f000 fe5f 	bl	800183c <CODEC_IO_Write>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	461a      	mov	r2, r3
 8000b82:	69fb      	ldr	r3, [r7, #28]
 8000b84:	4413      	add	r3, r2
 8000b86:	61fb      	str	r3, [r7, #28]
        
        ColdStartup=0;
 8000b88:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <wm8994_Init+0x998>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        AUDIO_IO_Delay(300);
 8000b8e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b92:	f001 f829 	bl	8001be8 <AUDIO_IO_Delay>
 8000b96:	e016      	b.n	8000bc6 <wm8994_Init+0x9be>
 8000b98:	200000c0 	.word	0x200000c0
 8000b9c:	00017700 	.word	0x00017700
 8000ba0:	20000030 	.word	0x20000030
      }
      else /* Headphone Warm Start-Up */
      { 
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 8000ba4:	89fb      	ldrh	r3, [r7, #14]
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	f248 1208 	movw	r2, #33032	; 0x8108
 8000bac:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f000 fe43 	bl	800183c <CODEC_IO_Write>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	461a      	mov	r2, r3
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        AUDIO_IO_Delay(50);
 8000bc0:	2032      	movs	r0, #50	; 0x32
 8000bc2:	f001 f811 	bl	8001be8 <AUDIO_IO_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8000bc6:	89fb      	ldrh	r3, [r7, #14]
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f000 fe33 	bl	800183c <CODEC_IO_Write>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	461a      	mov	r2, r3
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	4413      	add	r3, r2
 8000bde:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 8000be0:	89fb      	ldrh	r3, [r7, #14]
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000be8:	2103      	movs	r1, #3
 8000bea:	4618      	mov	r0, r3
 8000bec:	f000 fe26 	bl	800183c <CODEC_IO_Write>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	69fb      	ldr	r3, [r7, #28]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 8000bfa:	89fb      	ldrh	r3, [r7, #14]
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2122      	movs	r1, #34	; 0x22
 8000c02:	4618      	mov	r0, r3
 8000c04:	f000 fe1a 	bl	800183c <CODEC_IO_Write>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	69fb      	ldr	r3, [r7, #28]
 8000c0e:	4413      	add	r3, r2
 8000c10:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 8000c12:	89fb      	ldrh	r3, [r7, #14]
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	2200      	movs	r2, #0
 8000c18:	2123      	movs	r1, #35	; 0x23
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f000 fe0e 	bl	800183c <CODEC_IO_Write>
 8000c20:	4603      	mov	r3, r0
 8000c22:	461a      	mov	r2, r3
 8000c24:	69fb      	ldr	r3, [r7, #28]
 8000c26:	4413      	add	r3, r2
 8000c28:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 8000c2a:	89fb      	ldrh	r3, [r7, #14]
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000c32:	2136      	movs	r1, #54	; 0x36
 8000c34:	4618      	mov	r0, r3
 8000c36:	f000 fe01 	bl	800183c <CODEC_IO_Write>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	4413      	add	r3, r2
 8000c42:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 8000c44:	89fb      	ldrh	r3, [r7, #14]
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	f243 0203 	movw	r2, #12291	; 0x3003
 8000c4c:	2101      	movs	r1, #1
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f000 fdf4 	bl	800183c <CODEC_IO_Write>
 8000c54:	4603      	mov	r3, r0
 8000c56:	461a      	mov	r2, r3
 8000c58:	69fb      	ldr	r3, [r7, #28]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8000c5e:	8afb      	ldrh	r3, [r7, #22]
 8000c60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000c64:	d10d      	bne.n	8000c82 <wm8994_Init+0xa7a>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 8000c66:	89fb      	ldrh	r3, [r7, #14]
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	f240 2205 	movw	r2, #517	; 0x205
 8000c6e:	2151      	movs	r1, #81	; 0x51
 8000c70:	4618      	mov	r0, r3
 8000c72:	f000 fde3 	bl	800183c <CODEC_IO_Write>
 8000c76:	4603      	mov	r3, r0
 8000c78:	461a      	mov	r2, r3
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	61fb      	str	r3, [r7, #28]
 8000c80:	e00b      	b.n	8000c9a <wm8994_Init+0xa92>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 8000c82:	89fb      	ldrh	r3, [r7, #14]
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	2205      	movs	r2, #5
 8000c88:	2151      	movs	r1, #81	; 0x51
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f000 fdd6 	bl	800183c <CODEC_IO_Write>
 8000c90:	4603      	mov	r3, r0
 8000c92:	461a      	mov	r2, r3
 8000c94:	69fb      	ldr	r3, [r7, #28]
 8000c96:	4413      	add	r3, r2
 8000c98:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8000c9a:	8b7b      	ldrh	r3, [r7, #26]
 8000c9c:	f443 534c 	orr.w	r3, r3, #13056	; 0x3300
 8000ca0:	f043 0303 	orr.w	r3, r3, #3
 8000ca4:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8000ca6:	89fb      	ldrh	r3, [r7, #14]
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	8b7a      	ldrh	r2, [r7, #26]
 8000cac:	2101      	movs	r1, #1
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f000 fdc4 	bl	800183c <CODEC_IO_Write>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	4413      	add	r3, r2
 8000cbc:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 8000cbe:	89fb      	ldrh	r3, [r7, #14]
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	2222      	movs	r2, #34	; 0x22
 8000cc4:	2160      	movs	r1, #96	; 0x60
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f000 fdb8 	bl	800183c <CODEC_IO_Write>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	461a      	mov	r2, r3
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 8000cd6:	89fb      	ldrh	r3, [r7, #14]
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	f649 7225 	movw	r2, #40741	; 0x9f25
 8000cde:	214c      	movs	r1, #76	; 0x4c
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f000 fdab 	bl	800183c <CODEC_IO_Write>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	461a      	mov	r2, r3
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	4413      	add	r3, r2
 8000cee:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 8000cf0:	200f      	movs	r0, #15
 8000cf2:	f000 ff79 	bl	8001be8 <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 8000cf6:	89fb      	ldrh	r3, [r7, #14]
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	212d      	movs	r1, #45	; 0x2d
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f000 fd9c 	bl	800183c <CODEC_IO_Write>
 8000d04:	4603      	mov	r3, r0
 8000d06:	461a      	mov	r2, r3
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 8000d0e:	89fb      	ldrh	r3, [r7, #14]
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	2201      	movs	r2, #1
 8000d14:	212e      	movs	r1, #46	; 0x2e
 8000d16:	4618      	mov	r0, r3
 8000d18:	f000 fd90 	bl	800183c <CODEC_IO_Write>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	461a      	mov	r2, r3
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	4413      	add	r3, r2
 8000d24:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 8000d26:	89fb      	ldrh	r3, [r7, #14]
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	f44f 724c 	mov.w	r2, #816	; 0x330
 8000d2e:	2103      	movs	r1, #3
 8000d30:	4618      	mov	r0, r3
 8000d32:	f000 fd83 	bl	800183c <CODEC_IO_Write>
 8000d36:	4603      	mov	r3, r0
 8000d38:	461a      	mov	r2, r3
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8000d40:	89fb      	ldrh	r3, [r7, #14]
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	2233      	movs	r2, #51	; 0x33
 8000d46:	2154      	movs	r1, #84	; 0x54
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f000 fd77 	bl	800183c <CODEC_IO_Write>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	461a      	mov	r2, r3
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	4413      	add	r3, r2
 8000d56:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(257);
 8000d58:	f240 1001 	movw	r0, #257	; 0x101
 8000d5c:	f000 ff44 	bl	8001be8 <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 8000d60:	89fb      	ldrh	r3, [r7, #14]
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	22ee      	movs	r2, #238	; 0xee
 8000d66:	2160      	movs	r1, #96	; 0x60
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f000 fd67 	bl	800183c <CODEC_IO_Write>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	461a      	mov	r2, r3
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	4413      	add	r3, r2
 8000d76:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8000d78:	89fb      	ldrh	r3, [r7, #14]
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	22c0      	movs	r2, #192	; 0xc0
 8000d7e:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8000d82:	4618      	mov	r0, r3
 8000d84:	f000 fd5a 	bl	800183c <CODEC_IO_Write>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	4413      	add	r3, r2
 8000d90:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 8000d92:	89fb      	ldrh	r3, [r7, #14]
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	22c0      	movs	r2, #192	; 0xc0
 8000d98:	f240 6111 	movw	r1, #1553	; 0x611
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f000 fd4d 	bl	800183c <CODEC_IO_Write>
 8000da2:	4603      	mov	r3, r0
 8000da4:	461a      	mov	r2, r3
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	4413      	add	r3, r2
 8000daa:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8000dac:	89fb      	ldrh	r3, [r7, #14]
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	2210      	movs	r2, #16
 8000db2:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000db6:	4618      	mov	r0, r3
 8000db8:	f000 fd40 	bl	800183c <CODEC_IO_Write>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 8000dc6:	89fb      	ldrh	r3, [r7, #14]
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	22c0      	movs	r2, #192	; 0xc0
 8000dcc:	f240 6112 	movw	r1, #1554	; 0x612
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f000 fd33 	bl	800183c <CODEC_IO_Write>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	461a      	mov	r2, r3
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	4413      	add	r3, r2
 8000dde:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 8000de0:	89fb      	ldrh	r3, [r7, #14]
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	22c0      	movs	r2, #192	; 0xc0
 8000de6:	f240 6113 	movw	r1, #1555	; 0x613
 8000dea:	4618      	mov	r0, r3
 8000dec:	f000 fd26 	bl	800183c <CODEC_IO_Write>
 8000df0:	4603      	mov	r3, r0
 8000df2:	461a      	mov	r2, r3
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	4413      	add	r3, r2
 8000df8:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8000dfa:	89fb      	ldrh	r3, [r7, #14]
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	2210      	movs	r2, #16
 8000e00:	f240 4122 	movw	r1, #1058	; 0x422
 8000e04:	4618      	mov	r0, r3
 8000e06:	f000 fd19 	bl	800183c <CODEC_IO_Write>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	4413      	add	r3, r2
 8000e12:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8000e14:	7afa      	ldrb	r2, [r7, #11]
 8000e16:	89fb      	ldrh	r3, [r7, #14]
 8000e18:	4611      	mov	r1, r2
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f000 f984 	bl	8001128 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 8000e20:	8afb      	ldrh	r3, [r7, #22]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	f000 80a6 	beq.w	8000f74 <wm8994_Init+0xd6c>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8000e28:	8afb      	ldrh	r3, [r7, #22]
 8000e2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e2e:	d003      	beq.n	8000e38 <wm8994_Init+0xc30>
 8000e30:	8afb      	ldrh	r3, [r7, #22]
 8000e32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e36:	d12b      	bne.n	8000e90 <wm8994_Init+0xc88>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8000e38:	8b7b      	ldrh	r3, [r7, #26]
 8000e3a:	f043 0313 	orr.w	r3, r3, #19
 8000e3e:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8000e40:	89fb      	ldrh	r3, [r7, #14]
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	8b7a      	ldrh	r2, [r7, #26]
 8000e46:	2101      	movs	r1, #1
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f000 fcf7 	bl	800183c <CODEC_IO_Write>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	461a      	mov	r2, r3
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	4413      	add	r3, r2
 8000e56:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8000e58:	89fb      	ldrh	r3, [r7, #14]
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	2202      	movs	r2, #2
 8000e5e:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 fcea 	bl	800183c <CODEC_IO_Write>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	4413      	add	r3, r2
 8000e70:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 8000e72:	89fb      	ldrh	r3, [r7, #14]
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000e7a:	f240 4111 	movw	r1, #1041	; 0x411
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f000 fcdc 	bl	800183c <CODEC_IO_Write>
 8000e84:	4603      	mov	r3, r0
 8000e86:	461a      	mov	r2, r3
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	61fb      	str	r3, [r7, #28]
 8000e8e:	e06b      	b.n	8000f68 <wm8994_Init+0xd60>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8000e90:	8afb      	ldrh	r3, [r7, #22]
 8000e92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000e96:	d139      	bne.n	8000f0c <wm8994_Init+0xd04>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8000e98:	8b7b      	ldrh	r3, [r7, #26]
 8000e9a:	f043 0313 	orr.w	r3, r3, #19
 8000e9e:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8000ea0:	89fb      	ldrh	r3, [r7, #14]
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	8b7a      	ldrh	r2, [r7, #26]
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f000 fcc7 	bl	800183c <CODEC_IO_Write>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8000eb8:	89fb      	ldrh	r3, [r7, #14]
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	2202      	movs	r2, #2
 8000ebe:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f000 fcba 	bl	800183c <CODEC_IO_Write>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	461a      	mov	r2, r3
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	4413      	add	r3, r2
 8000ed0:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8000ed2:	89fb      	ldrh	r3, [r7, #14]
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8000eda:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 fcac 	bl	800183c <CODEC_IO_Write>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	4413      	add	r3, r2
 8000eec:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 8000eee:	89fb      	ldrh	r3, [r7, #14]
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8000ef6:	f240 4111 	movw	r1, #1041	; 0x411
 8000efa:	4618      	mov	r0, r3
 8000efc:	f000 fc9e 	bl	800183c <CODEC_IO_Write>
 8000f00:	4603      	mov	r3, r0
 8000f02:	461a      	mov	r2, r3
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	4413      	add	r3, r2
 8000f08:	61fb      	str	r3, [r7, #28]
 8000f0a:	e02d      	b.n	8000f68 <wm8994_Init+0xd60>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8000f0c:	8afb      	ldrh	r3, [r7, #22]
 8000f0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000f12:	d003      	beq.n	8000f1c <wm8994_Init+0xd14>
 8000f14:	8afb      	ldrh	r3, [r7, #22]
 8000f16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f1a:	d125      	bne.n	8000f68 <wm8994_Init+0xd60>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 8000f1c:	89fb      	ldrh	r3, [r7, #14]
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	220b      	movs	r2, #11
 8000f22:	2118      	movs	r1, #24
 8000f24:	4618      	mov	r0, r3
 8000f26:	f000 fc89 	bl	800183c <CODEC_IO_Write>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	4413      	add	r3, r2
 8000f32:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 8000f34:	89fb      	ldrh	r3, [r7, #14]
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	220b      	movs	r2, #11
 8000f3a:	211a      	movs	r1, #26
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f000 fc7d 	bl	800183c <CODEC_IO_Write>
 8000f42:	4603      	mov	r3, r0
 8000f44:	461a      	mov	r2, r3
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	4413      	add	r3, r2
 8000f4a:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8000f4c:	89fb      	ldrh	r3, [r7, #14]
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8000f54:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f000 fc6f 	bl	800183c <CODEC_IO_Write>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	461a      	mov	r2, r3
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	4413      	add	r3, r2
 8000f66:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8000f68:	7afa      	ldrb	r2, [r7, #11]
 8000f6a:	89fb      	ldrh	r3, [r7, #14]
 8000f6c:	4611      	mov	r1, r2
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f000 f8da 	bl	8001128 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 8000f74:	69fb      	ldr	r3, [r7, #28]
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3720      	adds	r7, #32
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop

08000f80 <wm8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void wm8994_DeInit(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8000f84:	f000 fdd2 	bl	8001b2c <AUDIO_IO_DeInit>
}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8000f96:	f000 fdbf 	bl	8001b18 <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 8000f9a:	88fb      	ldrh	r3, [r7, #6]
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f000 fdf5 	bl	8001b90 <AUDIO_IO_Read>
 8000fa6:	4603      	mov	r3, r0
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <wm8994_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	6039      	str	r1, [r7, #0]
 8000fba:	80fb      	strh	r3, [r7, #6]
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000fc4:	88fb      	ldrh	r3, [r7, #6]
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f000 f9d1 	bl	8001370 <wm8994_SetMute>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8000fee:	88fb      	ldrh	r3, [r7, #6]
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 f9bc 	bl	8001370 <wm8994_SetMute>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 8001000:	88fb      	ldrh	r3, [r7, #6]
 8001002:	b2db      	uxtb	r3, r3
 8001004:	2201      	movs	r2, #1
 8001006:	2102      	movs	r1, #2
 8001008:	4618      	mov	r0, r3
 800100a:	f000 fc17 	bl	800183c <CODEC_IO_Write>
 800100e:	4603      	mov	r3, r0
 8001010:	461a      	mov	r2, r3
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	4413      	add	r3, r2
 8001016:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8001018:	68fb      	ldr	r3, [r7, #12]
}
 800101a:	4618      	mov	r0, r3
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <wm8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Resume(uint16_t DeviceAddr)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b084      	sub	sp, #16
 8001026:	af00      	add	r7, sp, #0
 8001028:	4603      	mov	r3, r0
 800102a:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001030:	88fb      	ldrh	r3, [r7, #6]
 8001032:	2100      	movs	r1, #0
 8001034:	4618      	mov	r0, r3
 8001036:	f000 f99b 	bl	8001370 <wm8994_SetMute>
 800103a:	4602      	mov	r2, r0
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	4413      	add	r3, r2
 8001040:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8001042:	68fb      	ldr	r3, [r7, #12]
}
 8001044:	4618      	mov	r0, r3
 8001046:	3710      	adds	r7, #16
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	6039      	str	r1, [r7, #0]
 8001056:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001058:	2300      	movs	r3, #0
 800105a:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 800105c:	4b31      	ldr	r3, [pc, #196]	; (8001124 <wm8994_Stop+0xd8>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d05a      	beq.n	800111a <wm8994_Stop+0xce>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001064:	88fb      	ldrh	r3, [r7, #6]
 8001066:	2101      	movs	r1, #1
 8001068:	4618      	mov	r0, r3
 800106a:	f000 f981 	bl	8001370 <wm8994_SetMute>
 800106e:	4602      	mov	r2, r0
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	4413      	add	r3, r2
 8001074:	60fb      	str	r3, [r7, #12]

    if (CodecPdwnMode == CODEC_PDWN_SW)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	2b02      	cmp	r3, #2
 800107a:	d04e      	beq.n	800111a <wm8994_Stop+0xce>
      /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 800107c:	88fb      	ldrh	r3, [r7, #6]
 800107e:	b2db      	uxtb	r3, r3
 8001080:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001084:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8001088:	4618      	mov	r0, r3
 800108a:	f000 fbd7 	bl	800183c <CODEC_IO_Write>
 800108e:	4603      	mov	r3, r0
 8001090:	461a      	mov	r2, r3
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	4413      	add	r3, r2
 8001096:	60fb      	str	r3, [r7, #12]

      /* Mute the AIF1 Timeslot 1 DAC2 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8001098:	88fb      	ldrh	r3, [r7, #6]
 800109a:	b2db      	uxtb	r3, r3
 800109c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010a0:	f240 4122 	movw	r1, #1058	; 0x422
 80010a4:	4618      	mov	r0, r3
 80010a6:	f000 fbc9 	bl	800183c <CODEC_IO_Write>
 80010aa:	4603      	mov	r3, r0
 80010ac:	461a      	mov	r2, r3
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	4413      	add	r3, r2
 80010b2:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1L_TO_HPOUT1L */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 80010b4:	88fb      	ldrh	r3, [r7, #6]
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	2200      	movs	r2, #0
 80010ba:	212d      	movs	r1, #45	; 0x2d
 80010bc:	4618      	mov	r0, r3
 80010be:	f000 fbbd 	bl	800183c <CODEC_IO_Write>
 80010c2:	4603      	mov	r3, r0
 80010c4:	461a      	mov	r2, r3
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	4413      	add	r3, r2
 80010ca:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1R_TO_HPOUT1R */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 80010cc:	88fb      	ldrh	r3, [r7, #6]
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	2200      	movs	r2, #0
 80010d2:	212e      	movs	r1, #46	; 0x2e
 80010d4:	4618      	mov	r0, r3
 80010d6:	f000 fbb1 	bl	800183c <CODEC_IO_Write>
 80010da:	4603      	mov	r3, r0
 80010dc:	461a      	mov	r2, r3
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	4413      	add	r3, r2
 80010e2:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1 and DAC2 */
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 80010e4:	88fb      	ldrh	r3, [r7, #6]
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	2200      	movs	r2, #0
 80010ea:	2105      	movs	r1, #5
 80010ec:	4618      	mov	r0, r3
 80010ee:	f000 fba5 	bl	800183c <CODEC_IO_Write>
 80010f2:	4603      	mov	r3, r0
 80010f4:	461a      	mov	r2, r3
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	4413      	add	r3, r2
 80010fa:	60fb      	str	r3, [r7, #12]

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 80010fc:	88fb      	ldrh	r3, [r7, #6]
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	2200      	movs	r2, #0
 8001102:	2100      	movs	r1, #0
 8001104:	4618      	mov	r0, r3
 8001106:	f000 fb99 	bl	800183c <CODEC_IO_Write>
 800110a:	4603      	mov	r3, r0
 800110c:	461a      	mov	r2, r3
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	4413      	add	r3, r2
 8001112:	60fb      	str	r3, [r7, #12]

      outputEnabled = 0;
 8001114:	4b03      	ldr	r3, [pc, #12]	; (8001124 <wm8994_Stop+0xd8>)
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
    }
  }
  return counter;
 800111a:	68fb      	ldr	r3, [r7, #12]
}
 800111c:	4618      	mov	r0, r3
 800111e:	3710      	adds	r7, #16
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	200000bc 	.word	0x200000bc

08001128 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	460a      	mov	r2, r1
 8001132:	80fb      	strh	r3, [r7, #6]
 8001134:	4613      	mov	r3, r2
 8001136:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 800113c:	797b      	ldrb	r3, [r7, #5]
 800113e:	2b64      	cmp	r3, #100	; 0x64
 8001140:	d80b      	bhi.n	800115a <wm8994_SetVolume+0x32>
 8001142:	797a      	ldrb	r2, [r7, #5]
 8001144:	4613      	mov	r3, r2
 8001146:	019b      	lsls	r3, r3, #6
 8001148:	1a9b      	subs	r3, r3, r2
 800114a:	4a86      	ldr	r2, [pc, #536]	; (8001364 <wm8994_SetVolume+0x23c>)
 800114c:	fb82 1203 	smull	r1, r2, r2, r3
 8001150:	1152      	asrs	r2, r2, #5
 8001152:	17db      	asrs	r3, r3, #31
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	b2db      	uxtb	r3, r3
 8001158:	e000      	b.n	800115c <wm8994_SetVolume+0x34>
 800115a:	2364      	movs	r3, #100	; 0x64
 800115c:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 800115e:	4b82      	ldr	r3, [pc, #520]	; (8001368 <wm8994_SetVolume+0x240>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2b00      	cmp	r3, #0
 8001164:	f000 809b 	beq.w	800129e <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 8001168:	7afb      	ldrb	r3, [r7, #11]
 800116a:	2b3e      	cmp	r3, #62	; 0x3e
 800116c:	d93d      	bls.n	80011ea <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800116e:	88fb      	ldrh	r3, [r7, #6]
 8001170:	2100      	movs	r1, #0
 8001172:	4618      	mov	r0, r3
 8001174:	f000 f8fc 	bl	8001370 <wm8994_SetMute>
 8001178:	4602      	mov	r2, r0
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	4413      	add	r3, r2
 800117e:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8001180:	88fb      	ldrh	r3, [r7, #6]
 8001182:	b2db      	uxtb	r3, r3
 8001184:	f240 127f 	movw	r2, #383	; 0x17f
 8001188:	211c      	movs	r1, #28
 800118a:	4618      	mov	r0, r3
 800118c:	f000 fb56 	bl	800183c <CODEC_IO_Write>
 8001190:	4603      	mov	r3, r0
 8001192:	461a      	mov	r2, r3
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	4413      	add	r3, r2
 8001198:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 800119a:	88fb      	ldrh	r3, [r7, #6]
 800119c:	b2db      	uxtb	r3, r3
 800119e:	f240 127f 	movw	r2, #383	; 0x17f
 80011a2:	211d      	movs	r1, #29
 80011a4:	4618      	mov	r0, r3
 80011a6:	f000 fb49 	bl	800183c <CODEC_IO_Write>
 80011aa:	4603      	mov	r3, r0
 80011ac:	461a      	mov	r2, r3
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	4413      	add	r3, r2
 80011b2:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 80011b4:	88fb      	ldrh	r3, [r7, #6]
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	f240 127f 	movw	r2, #383	; 0x17f
 80011bc:	2126      	movs	r1, #38	; 0x26
 80011be:	4618      	mov	r0, r3
 80011c0:	f000 fb3c 	bl	800183c <CODEC_IO_Write>
 80011c4:	4603      	mov	r3, r0
 80011c6:	461a      	mov	r2, r3
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	4413      	add	r3, r2
 80011cc:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 80011ce:	88fb      	ldrh	r3, [r7, #6]
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	f240 127f 	movw	r2, #383	; 0x17f
 80011d6:	2127      	movs	r1, #39	; 0x27
 80011d8:	4618      	mov	r0, r3
 80011da:	f000 fb2f 	bl	800183c <CODEC_IO_Write>
 80011de:	4603      	mov	r3, r0
 80011e0:	461a      	mov	r2, r3
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	4413      	add	r3, r2
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	e059      	b.n	800129e <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 80011ea:	797b      	ldrb	r3, [r7, #5]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d109      	bne.n	8001204 <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80011f0:	88fb      	ldrh	r3, [r7, #6]
 80011f2:	2101      	movs	r1, #1
 80011f4:	4618      	mov	r0, r3
 80011f6:	f000 f8bb 	bl	8001370 <wm8994_SetMute>
 80011fa:	4602      	mov	r2, r0
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	4413      	add	r3, r2
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	e04c      	b.n	800129e <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001204:	88fb      	ldrh	r3, [r7, #6]
 8001206:	2100      	movs	r1, #0
 8001208:	4618      	mov	r0, r3
 800120a:	f000 f8b1 	bl	8001370 <wm8994_SetMute>
 800120e:	4602      	mov	r2, r0
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	4413      	add	r3, r2
 8001214:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8001216:	88fb      	ldrh	r3, [r7, #6]
 8001218:	b2d8      	uxtb	r0, r3
 800121a:	7afb      	ldrb	r3, [r7, #11]
 800121c:	b21b      	sxth	r3, r3
 800121e:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8001222:	b21b      	sxth	r3, r3
 8001224:	b29b      	uxth	r3, r3
 8001226:	461a      	mov	r2, r3
 8001228:	211c      	movs	r1, #28
 800122a:	f000 fb07 	bl	800183c <CODEC_IO_Write>
 800122e:	4603      	mov	r3, r0
 8001230:	461a      	mov	r2, r3
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	4413      	add	r3, r2
 8001236:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8001238:	88fb      	ldrh	r3, [r7, #6]
 800123a:	b2d8      	uxtb	r0, r3
 800123c:	7afb      	ldrb	r3, [r7, #11]
 800123e:	b21b      	sxth	r3, r3
 8001240:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8001244:	b21b      	sxth	r3, r3
 8001246:	b29b      	uxth	r3, r3
 8001248:	461a      	mov	r2, r3
 800124a:	211d      	movs	r1, #29
 800124c:	f000 faf6 	bl	800183c <CODEC_IO_Write>
 8001250:	4603      	mov	r3, r0
 8001252:	461a      	mov	r2, r3
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	4413      	add	r3, r2
 8001258:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 800125a:	88fb      	ldrh	r3, [r7, #6]
 800125c:	b2d8      	uxtb	r0, r3
 800125e:	7afb      	ldrb	r3, [r7, #11]
 8001260:	b21b      	sxth	r3, r3
 8001262:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8001266:	b21b      	sxth	r3, r3
 8001268:	b29b      	uxth	r3, r3
 800126a:	461a      	mov	r2, r3
 800126c:	2126      	movs	r1, #38	; 0x26
 800126e:	f000 fae5 	bl	800183c <CODEC_IO_Write>
 8001272:	4603      	mov	r3, r0
 8001274:	461a      	mov	r2, r3
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	4413      	add	r3, r2
 800127a:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 800127c:	88fb      	ldrh	r3, [r7, #6]
 800127e:	b2d8      	uxtb	r0, r3
 8001280:	7afb      	ldrb	r3, [r7, #11]
 8001282:	b21b      	sxth	r3, r3
 8001284:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8001288:	b21b      	sxth	r3, r3
 800128a:	b29b      	uxth	r3, r3
 800128c:	461a      	mov	r2, r3
 800128e:	2127      	movs	r1, #39	; 0x27
 8001290:	f000 fad4 	bl	800183c <CODEC_IO_Write>
 8001294:	4603      	mov	r3, r0
 8001296:	461a      	mov	r2, r3
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	4413      	add	r3, r2
 800129c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 800129e:	4b33      	ldr	r3, [pc, #204]	; (800136c <wm8994_SetVolume+0x244>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d059      	beq.n	800135a <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 80012a6:	797b      	ldrb	r3, [r7, #5]
 80012a8:	2b63      	cmp	r3, #99	; 0x63
 80012aa:	d80c      	bhi.n	80012c6 <wm8994_SetVolume+0x19e>
 80012ac:	797a      	ldrb	r2, [r7, #5]
 80012ae:	4613      	mov	r3, r2
 80012b0:	011b      	lsls	r3, r3, #4
 80012b2:	1a9b      	subs	r3, r3, r2
 80012b4:	011b      	lsls	r3, r3, #4
 80012b6:	4a2b      	ldr	r2, [pc, #172]	; (8001364 <wm8994_SetVolume+0x23c>)
 80012b8:	fb82 1203 	smull	r1, r2, r2, r3
 80012bc:	1152      	asrs	r2, r2, #5
 80012be:	17db      	asrs	r3, r3, #31
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	e000      	b.n	80012c8 <wm8994_SetVolume+0x1a0>
 80012c6:	23ef      	movs	r3, #239	; 0xef
 80012c8:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 80012ca:	88fb      	ldrh	r3, [r7, #6]
 80012cc:	b2d8      	uxtb	r0, r3
 80012ce:	7afb      	ldrb	r3, [r7, #11]
 80012d0:	b21b      	sxth	r3, r3
 80012d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d6:	b21b      	sxth	r3, r3
 80012d8:	b29b      	uxth	r3, r3
 80012da:	461a      	mov	r2, r3
 80012dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012e0:	f000 faac 	bl	800183c <CODEC_IO_Write>
 80012e4:	4603      	mov	r3, r0
 80012e6:	461a      	mov	r2, r3
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	4413      	add	r3, r2
 80012ec:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 80012ee:	88fb      	ldrh	r3, [r7, #6]
 80012f0:	b2d8      	uxtb	r0, r3
 80012f2:	7afb      	ldrb	r3, [r7, #11]
 80012f4:	b21b      	sxth	r3, r3
 80012f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012fa:	b21b      	sxth	r3, r3
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	461a      	mov	r2, r3
 8001300:	f240 4101 	movw	r1, #1025	; 0x401
 8001304:	f000 fa9a 	bl	800183c <CODEC_IO_Write>
 8001308:	4603      	mov	r3, r0
 800130a:	461a      	mov	r2, r3
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	4413      	add	r3, r2
 8001310:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 8001312:	88fb      	ldrh	r3, [r7, #6]
 8001314:	b2d8      	uxtb	r0, r3
 8001316:	7afb      	ldrb	r3, [r7, #11]
 8001318:	b21b      	sxth	r3, r3
 800131a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800131e:	b21b      	sxth	r3, r3
 8001320:	b29b      	uxth	r3, r3
 8001322:	461a      	mov	r2, r3
 8001324:	f240 4104 	movw	r1, #1028	; 0x404
 8001328:	f000 fa88 	bl	800183c <CODEC_IO_Write>
 800132c:	4603      	mov	r3, r0
 800132e:	461a      	mov	r2, r3
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	4413      	add	r3, r2
 8001334:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 8001336:	88fb      	ldrh	r3, [r7, #6]
 8001338:	b2d8      	uxtb	r0, r3
 800133a:	7afb      	ldrb	r3, [r7, #11]
 800133c:	b21b      	sxth	r3, r3
 800133e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001342:	b21b      	sxth	r3, r3
 8001344:	b29b      	uxth	r3, r3
 8001346:	461a      	mov	r2, r3
 8001348:	f240 4105 	movw	r1, #1029	; 0x405
 800134c:	f000 fa76 	bl	800183c <CODEC_IO_Write>
 8001350:	4603      	mov	r3, r0
 8001352:	461a      	mov	r2, r3
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	4413      	add	r3, r2
 8001358:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 800135a:	68fb      	ldr	r3, [r7, #12]
}
 800135c:	4618      	mov	r0, r3
 800135e:	3710      	adds	r7, #16
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	51eb851f 	.word	0x51eb851f
 8001368:	200000bc 	.word	0x200000bc
 800136c:	200000c0 	.word	0x200000c0

08001370 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	6039      	str	r1, [r7, #0]
 800137a:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 8001380:	4b21      	ldr	r3, [pc, #132]	; (8001408 <wm8994_SetMute+0x98>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d039      	beq.n	80013fc <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	2b01      	cmp	r3, #1
 800138c:	d11c      	bne.n	80013c8 <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 800138e:	88fb      	ldrh	r3, [r7, #6]
 8001390:	b2db      	uxtb	r3, r3
 8001392:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001396:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800139a:	4618      	mov	r0, r3
 800139c:	f000 fa4e 	bl	800183c <CODEC_IO_Write>
 80013a0:	4603      	mov	r3, r0
 80013a2:	461a      	mov	r2, r3
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	4413      	add	r3, r2
 80013a8:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 80013aa:	88fb      	ldrh	r3, [r7, #6]
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013b2:	f240 4122 	movw	r1, #1058	; 0x422
 80013b6:	4618      	mov	r0, r3
 80013b8:	f000 fa40 	bl	800183c <CODEC_IO_Write>
 80013bc:	4603      	mov	r3, r0
 80013be:	461a      	mov	r2, r3
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	4413      	add	r3, r2
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	e019      	b.n	80013fc <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 80013c8:	88fb      	ldrh	r3, [r7, #6]
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	2210      	movs	r2, #16
 80013ce:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80013d2:	4618      	mov	r0, r3
 80013d4:	f000 fa32 	bl	800183c <CODEC_IO_Write>
 80013d8:	4603      	mov	r3, r0
 80013da:	461a      	mov	r2, r3
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	4413      	add	r3, r2
 80013e0:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 80013e2:	88fb      	ldrh	r3, [r7, #6]
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	2210      	movs	r2, #16
 80013e8:	f240 4122 	movw	r1, #1058	; 0x422
 80013ec:	4618      	mov	r0, r3
 80013ee:	f000 fa25 	bl	800183c <CODEC_IO_Write>
 80013f2:	4603      	mov	r3, r0
 80013f4:	461a      	mov	r2, r3
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	4413      	add	r3, r2
 80013fa:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 80013fc:	68fb      	ldr	r3, [r7, #12]
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	200000bc 	.word	0x200000bc

0800140c <wm8994_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	460a      	mov	r2, r1
 8001416:	80fb      	strh	r3, [r7, #6]
 8001418:	4613      	mov	r3, r2
 800141a:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 800141c:	2300      	movs	r3, #0
 800141e:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8001420:	797b      	ldrb	r3, [r7, #5]
 8001422:	2b03      	cmp	r3, #3
 8001424:	f000 808c 	beq.w	8001540 <wm8994_SetOutputMode+0x134>
 8001428:	2b03      	cmp	r3, #3
 800142a:	f300 80cb 	bgt.w	80015c4 <wm8994_SetOutputMode+0x1b8>
 800142e:	2b01      	cmp	r3, #1
 8001430:	d002      	beq.n	8001438 <wm8994_SetOutputMode+0x2c>
 8001432:	2b02      	cmp	r3, #2
 8001434:	d042      	beq.n	80014bc <wm8994_SetOutputMode+0xb0>
 8001436:	e0c5      	b.n	80015c4 <wm8994_SetOutputMode+0x1b8>
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8001438:	88fb      	ldrh	r3, [r7, #6]
 800143a:	b2db      	uxtb	r3, r3
 800143c:	f640 420c 	movw	r2, #3084	; 0xc0c
 8001440:	2105      	movs	r1, #5
 8001442:	4618      	mov	r0, r3
 8001444:	f000 f9fa 	bl	800183c <CODEC_IO_Write>
 8001448:	4603      	mov	r3, r0
 800144a:	461a      	mov	r2, r3
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	4413      	add	r3, r2
 8001450:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8001452:	88fb      	ldrh	r3, [r7, #6]
 8001454:	b2db      	uxtb	r3, r3
 8001456:	2200      	movs	r2, #0
 8001458:	f240 6101 	movw	r1, #1537	; 0x601
 800145c:	4618      	mov	r0, r3
 800145e:	f000 f9ed 	bl	800183c <CODEC_IO_Write>
 8001462:	4603      	mov	r3, r0
 8001464:	461a      	mov	r2, r3
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	4413      	add	r3, r2
 800146a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 800146c:	88fb      	ldrh	r3, [r7, #6]
 800146e:	b2db      	uxtb	r3, r3
 8001470:	2200      	movs	r2, #0
 8001472:	f240 6102 	movw	r1, #1538	; 0x602
 8001476:	4618      	mov	r0, r3
 8001478:	f000 f9e0 	bl	800183c <CODEC_IO_Write>
 800147c:	4603      	mov	r3, r0
 800147e:	461a      	mov	r2, r3
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	4413      	add	r3, r2
 8001484:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8001486:	88fb      	ldrh	r3, [r7, #6]
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2202      	movs	r2, #2
 800148c:	f240 6104 	movw	r1, #1540	; 0x604
 8001490:	4618      	mov	r0, r3
 8001492:	f000 f9d3 	bl	800183c <CODEC_IO_Write>
 8001496:	4603      	mov	r3, r0
 8001498:	461a      	mov	r2, r3
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	4413      	add	r3, r2
 800149e:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80014a0:	88fb      	ldrh	r3, [r7, #6]
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	2202      	movs	r2, #2
 80014a6:	f240 6105 	movw	r1, #1541	; 0x605
 80014aa:	4618      	mov	r0, r3
 80014ac:	f000 f9c6 	bl	800183c <CODEC_IO_Write>
 80014b0:	4603      	mov	r3, r0
 80014b2:	461a      	mov	r2, r3
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	4413      	add	r3, r2
 80014b8:	60fb      	str	r3, [r7, #12]
    break;
 80014ba:	e0c5      	b.n	8001648 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80014bc:	88fb      	ldrh	r3, [r7, #6]
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	f240 3203 	movw	r2, #771	; 0x303
 80014c4:	2105      	movs	r1, #5
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 f9b8 	bl	800183c <CODEC_IO_Write>
 80014cc:	4603      	mov	r3, r0
 80014ce:	461a      	mov	r2, r3
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	4413      	add	r3, r2
 80014d4:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80014d6:	88fb      	ldrh	r3, [r7, #6]
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	2201      	movs	r2, #1
 80014dc:	f240 6101 	movw	r1, #1537	; 0x601
 80014e0:	4618      	mov	r0, r3
 80014e2:	f000 f9ab 	bl	800183c <CODEC_IO_Write>
 80014e6:	4603      	mov	r3, r0
 80014e8:	461a      	mov	r2, r3
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	4413      	add	r3, r2
 80014ee:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80014f0:	88fb      	ldrh	r3, [r7, #6]
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	2201      	movs	r2, #1
 80014f6:	f240 6102 	movw	r1, #1538	; 0x602
 80014fa:	4618      	mov	r0, r3
 80014fc:	f000 f99e 	bl	800183c <CODEC_IO_Write>
 8001500:	4603      	mov	r3, r0
 8001502:	461a      	mov	r2, r3
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	4413      	add	r3, r2
 8001508:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800150a:	88fb      	ldrh	r3, [r7, #6]
 800150c:	b2db      	uxtb	r3, r3
 800150e:	2200      	movs	r2, #0
 8001510:	f240 6104 	movw	r1, #1540	; 0x604
 8001514:	4618      	mov	r0, r3
 8001516:	f000 f991 	bl	800183c <CODEC_IO_Write>
 800151a:	4603      	mov	r3, r0
 800151c:	461a      	mov	r2, r3
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	4413      	add	r3, r2
 8001522:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8001524:	88fb      	ldrh	r3, [r7, #6]
 8001526:	b2db      	uxtb	r3, r3
 8001528:	2200      	movs	r2, #0
 800152a:	f240 6105 	movw	r1, #1541	; 0x605
 800152e:	4618      	mov	r0, r3
 8001530:	f000 f984 	bl	800183c <CODEC_IO_Write>
 8001534:	4603      	mov	r3, r0
 8001536:	461a      	mov	r2, r3
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	4413      	add	r3, r2
 800153c:	60fb      	str	r3, [r7, #12]
    break;
 800153e:	e083      	b.n	8001648 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_BOTH:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    also Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8001540:	88fb      	ldrh	r3, [r7, #6]
 8001542:	b2db      	uxtb	r3, r3
 8001544:	f640 720f 	movw	r2, #3855	; 0xf0f
 8001548:	2105      	movs	r1, #5
 800154a:	4618      	mov	r0, r3
 800154c:	f000 f976 	bl	800183c <CODEC_IO_Write>
 8001550:	4603      	mov	r3, r0
 8001552:	461a      	mov	r2, r3
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	4413      	add	r3, r2
 8001558:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800155a:	88fb      	ldrh	r3, [r7, #6]
 800155c:	b2db      	uxtb	r3, r3
 800155e:	2201      	movs	r2, #1
 8001560:	f240 6101 	movw	r1, #1537	; 0x601
 8001564:	4618      	mov	r0, r3
 8001566:	f000 f969 	bl	800183c <CODEC_IO_Write>
 800156a:	4603      	mov	r3, r0
 800156c:	461a      	mov	r2, r3
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	4413      	add	r3, r2
 8001572:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8001574:	88fb      	ldrh	r3, [r7, #6]
 8001576:	b2db      	uxtb	r3, r3
 8001578:	2201      	movs	r2, #1
 800157a:	f240 6102 	movw	r1, #1538	; 0x602
 800157e:	4618      	mov	r0, r3
 8001580:	f000 f95c 	bl	800183c <CODEC_IO_Write>
 8001584:	4603      	mov	r3, r0
 8001586:	461a      	mov	r2, r3
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	4413      	add	r3, r2
 800158c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800158e:	88fb      	ldrh	r3, [r7, #6]
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2202      	movs	r2, #2
 8001594:	f240 6104 	movw	r1, #1540	; 0x604
 8001598:	4618      	mov	r0, r3
 800159a:	f000 f94f 	bl	800183c <CODEC_IO_Write>
 800159e:	4603      	mov	r3, r0
 80015a0:	461a      	mov	r2, r3
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	4413      	add	r3, r2
 80015a6:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80015a8:	88fb      	ldrh	r3, [r7, #6]
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	2202      	movs	r2, #2
 80015ae:	f240 6105 	movw	r1, #1541	; 0x605
 80015b2:	4618      	mov	r0, r3
 80015b4:	f000 f942 	bl	800183c <CODEC_IO_Write>
 80015b8:	4603      	mov	r3, r0
 80015ba:	461a      	mov	r2, r3
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	4413      	add	r3, r2
 80015c0:	60fb      	str	r3, [r7, #12]
    break;
 80015c2:	e041      	b.n	8001648 <wm8994_SetOutputMode+0x23c>
    
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80015c4:	88fb      	ldrh	r3, [r7, #6]
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	f240 3203 	movw	r2, #771	; 0x303
 80015cc:	2105      	movs	r1, #5
 80015ce:	4618      	mov	r0, r3
 80015d0:	f000 f934 	bl	800183c <CODEC_IO_Write>
 80015d4:	4603      	mov	r3, r0
 80015d6:	461a      	mov	r2, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	4413      	add	r3, r2
 80015dc:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80015de:	88fb      	ldrh	r3, [r7, #6]
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2201      	movs	r2, #1
 80015e4:	f240 6101 	movw	r1, #1537	; 0x601
 80015e8:	4618      	mov	r0, r3
 80015ea:	f000 f927 	bl	800183c <CODEC_IO_Write>
 80015ee:	4603      	mov	r3, r0
 80015f0:	461a      	mov	r2, r3
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	4413      	add	r3, r2
 80015f6:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80015f8:	88fb      	ldrh	r3, [r7, #6]
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	2201      	movs	r2, #1
 80015fe:	f240 6102 	movw	r1, #1538	; 0x602
 8001602:	4618      	mov	r0, r3
 8001604:	f000 f91a 	bl	800183c <CODEC_IO_Write>
 8001608:	4603      	mov	r3, r0
 800160a:	461a      	mov	r2, r3
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	4413      	add	r3, r2
 8001610:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8001612:	88fb      	ldrh	r3, [r7, #6]
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2200      	movs	r2, #0
 8001618:	f240 6104 	movw	r1, #1540	; 0x604
 800161c:	4618      	mov	r0, r3
 800161e:	f000 f90d 	bl	800183c <CODEC_IO_Write>
 8001622:	4603      	mov	r3, r0
 8001624:	461a      	mov	r2, r3
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	4413      	add	r3, r2
 800162a:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 800162c:	88fb      	ldrh	r3, [r7, #6]
 800162e:	b2db      	uxtb	r3, r3
 8001630:	2200      	movs	r2, #0
 8001632:	f240 6105 	movw	r1, #1541	; 0x605
 8001636:	4618      	mov	r0, r3
 8001638:	f000 f900 	bl	800183c <CODEC_IO_Write>
 800163c:	4603      	mov	r3, r0
 800163e:	461a      	mov	r2, r3
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	4413      	add	r3, r2
 8001644:	60fb      	str	r3, [r7, #12]
    break;    
 8001646:	bf00      	nop
  }  
  return counter;
 8001648:	68fb      	ldr	r3, [r7, #12]
}
 800164a:	4618      	mov	r0, r3
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
	...

08001654 <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	6039      	str	r1, [r7, #0]
 800165e:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001660:	2300      	movs	r3, #0
 8001662:	60fb      	str	r3, [r7, #12]
 
  /*  Clock Configurations */
  switch (AudioFreq)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	4a64      	ldr	r2, [pc, #400]	; (80017f8 <wm8994_SetFrequency+0x1a4>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d079      	beq.n	8001760 <wm8994_SetFrequency+0x10c>
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	4a62      	ldr	r2, [pc, #392]	; (80017f8 <wm8994_SetFrequency+0x1a4>)
 8001670:	4293      	cmp	r3, r2
 8001672:	f200 80ad 	bhi.w	80017d0 <wm8994_SetFrequency+0x17c>
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800167c:	4293      	cmp	r3, r2
 800167e:	d061      	beq.n	8001744 <wm8994_SetFrequency+0xf0>
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001686:	4293      	cmp	r3, r2
 8001688:	f200 80a2 	bhi.w	80017d0 <wm8994_SetFrequency+0x17c>
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001692:	4293      	cmp	r3, r2
 8001694:	f000 808e 	beq.w	80017b4 <wm8994_SetFrequency+0x160>
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	f64a 4244 	movw	r2, #44100	; 0xac44
 800169e:	4293      	cmp	r3, r2
 80016a0:	f200 8096 	bhi.w	80017d0 <wm8994_SetFrequency+0x17c>
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80016aa:	d03d      	beq.n	8001728 <wm8994_SetFrequency+0xd4>
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80016b2:	f200 808d 	bhi.w	80017d0 <wm8994_SetFrequency+0x17c>
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	f245 6222 	movw	r2, #22050	; 0x5622
 80016bc:	4293      	cmp	r3, r2
 80016be:	d06b      	beq.n	8001798 <wm8994_SetFrequency+0x144>
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	f245 6222 	movw	r2, #22050	; 0x5622
 80016c6:	4293      	cmp	r3, r2
 80016c8:	f200 8082 	bhi.w	80017d0 <wm8994_SetFrequency+0x17c>
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80016d2:	d01b      	beq.n	800170c <wm8994_SetFrequency+0xb8>
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80016da:	d879      	bhi.n	80017d0 <wm8994_SetFrequency+0x17c>
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80016e2:	d005      	beq.n	80016f0 <wm8994_SetFrequency+0x9c>
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	f642 3211 	movw	r2, #11025	; 0x2b11
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d046      	beq.n	800177c <wm8994_SetFrequency+0x128>
 80016ee:	e06f      	b.n	80017d0 <wm8994_SetFrequency+0x17c>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 80016f0:	88fb      	ldrh	r3, [r7, #6]
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	2203      	movs	r2, #3
 80016f6:	f44f 7104 	mov.w	r1, #528	; 0x210
 80016fa:	4618      	mov	r0, r3
 80016fc:	f000 f89e 	bl	800183c <CODEC_IO_Write>
 8001700:	4603      	mov	r3, r0
 8001702:	461a      	mov	r2, r3
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	4413      	add	r3, r2
 8001708:	60fb      	str	r3, [r7, #12]
    break;
 800170a:	e06f      	b.n	80017ec <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 800170c:	88fb      	ldrh	r3, [r7, #6]
 800170e:	b2db      	uxtb	r3, r3
 8001710:	2233      	movs	r2, #51	; 0x33
 8001712:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001716:	4618      	mov	r0, r3
 8001718:	f000 f890 	bl	800183c <CODEC_IO_Write>
 800171c:	4603      	mov	r3, r0
 800171e:	461a      	mov	r2, r3
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	4413      	add	r3, r2
 8001724:	60fb      	str	r3, [r7, #12]
    break;
 8001726:	e061      	b.n	80017ec <wm8994_SetFrequency+0x198>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8001728:	88fb      	ldrh	r3, [r7, #6]
 800172a:	b2db      	uxtb	r3, r3
 800172c:	2263      	movs	r2, #99	; 0x63
 800172e:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001732:	4618      	mov	r0, r3
 8001734:	f000 f882 	bl	800183c <CODEC_IO_Write>
 8001738:	4603      	mov	r3, r0
 800173a:	461a      	mov	r2, r3
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	4413      	add	r3, r2
 8001740:	60fb      	str	r3, [r7, #12]
    break;
 8001742:	e053      	b.n	80017ec <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8001744:	88fb      	ldrh	r3, [r7, #6]
 8001746:	b2db      	uxtb	r3, r3
 8001748:	2283      	movs	r2, #131	; 0x83
 800174a:	f44f 7104 	mov.w	r1, #528	; 0x210
 800174e:	4618      	mov	r0, r3
 8001750:	f000 f874 	bl	800183c <CODEC_IO_Write>
 8001754:	4603      	mov	r3, r0
 8001756:	461a      	mov	r2, r3
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	4413      	add	r3, r2
 800175c:	60fb      	str	r3, [r7, #12]
    break;
 800175e:	e045      	b.n	80017ec <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8001760:	88fb      	ldrh	r3, [r7, #6]
 8001762:	b2db      	uxtb	r3, r3
 8001764:	22a3      	movs	r2, #163	; 0xa3
 8001766:	f44f 7104 	mov.w	r1, #528	; 0x210
 800176a:	4618      	mov	r0, r3
 800176c:	f000 f866 	bl	800183c <CODEC_IO_Write>
 8001770:	4603      	mov	r3, r0
 8001772:	461a      	mov	r2, r3
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	4413      	add	r3, r2
 8001778:	60fb      	str	r3, [r7, #12]
    break;
 800177a:	e037      	b.n	80017ec <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 800177c:	88fb      	ldrh	r3, [r7, #6]
 800177e:	b2db      	uxtb	r3, r3
 8001780:	2213      	movs	r2, #19
 8001782:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001786:	4618      	mov	r0, r3
 8001788:	f000 f858 	bl	800183c <CODEC_IO_Write>
 800178c:	4603      	mov	r3, r0
 800178e:	461a      	mov	r2, r3
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	4413      	add	r3, r2
 8001794:	60fb      	str	r3, [r7, #12]
    break;
 8001796:	e029      	b.n	80017ec <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8001798:	88fb      	ldrh	r3, [r7, #6]
 800179a:	b2db      	uxtb	r3, r3
 800179c:	2243      	movs	r2, #67	; 0x43
 800179e:	f44f 7104 	mov.w	r1, #528	; 0x210
 80017a2:	4618      	mov	r0, r3
 80017a4:	f000 f84a 	bl	800183c <CODEC_IO_Write>
 80017a8:	4603      	mov	r3, r0
 80017aa:	461a      	mov	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	4413      	add	r3, r2
 80017b0:	60fb      	str	r3, [r7, #12]
    break;
 80017b2:	e01b      	b.n	80017ec <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 80017b4:	88fb      	ldrh	r3, [r7, #6]
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	2273      	movs	r2, #115	; 0x73
 80017ba:	f44f 7104 	mov.w	r1, #528	; 0x210
 80017be:	4618      	mov	r0, r3
 80017c0:	f000 f83c 	bl	800183c <CODEC_IO_Write>
 80017c4:	4603      	mov	r3, r0
 80017c6:	461a      	mov	r2, r3
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	4413      	add	r3, r2
 80017cc:	60fb      	str	r3, [r7, #12]
    break; 
 80017ce:	e00d      	b.n	80017ec <wm8994_SetFrequency+0x198>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80017d0:	88fb      	ldrh	r3, [r7, #6]
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	2283      	movs	r2, #131	; 0x83
 80017d6:	f44f 7104 	mov.w	r1, #528	; 0x210
 80017da:	4618      	mov	r0, r3
 80017dc:	f000 f82e 	bl	800183c <CODEC_IO_Write>
 80017e0:	4603      	mov	r3, r0
 80017e2:	461a      	mov	r2, r3
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	4413      	add	r3, r2
 80017e8:	60fb      	str	r3, [r7, #12]
    break; 
 80017ea:	bf00      	nop
  }
  return counter;
 80017ec:	68fb      	ldr	r3, [r7, #12]
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	00017700 	.word	0x00017700

080017fc <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 800180a:	88fb      	ldrh	r3, [r7, #6]
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2200      	movs	r2, #0
 8001810:	2100      	movs	r1, #0
 8001812:	4618      	mov	r0, r3
 8001814:	f000 f812 	bl	800183c <CODEC_IO_Write>
 8001818:	4603      	mov	r3, r0
 800181a:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 800181c:	4b05      	ldr	r3, [pc, #20]	; (8001834 <wm8994_Reset+0x38>)
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 8001822:	4b05      	ldr	r3, [pc, #20]	; (8001838 <wm8994_Reset+0x3c>)
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]

  return counter;
 8001828:	68fb      	ldr	r3, [r7, #12]
}
 800182a:	4618      	mov	r0, r3
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	200000bc 	.word	0x200000bc
 8001838:	200000c0 	.word	0x200000c0

0800183c <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	71fb      	strb	r3, [r7, #7]
 8001846:	460b      	mov	r3, r1
 8001848:	80bb      	strh	r3, [r7, #4]
 800184a:	4613      	mov	r3, r2
 800184c:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 800184e:	2300      	movs	r3, #0
 8001850:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 8001852:	887a      	ldrh	r2, [r7, #2]
 8001854:	88b9      	ldrh	r1, [r7, #4]
 8001856:	79fb      	ldrb	r3, [r7, #7]
 8001858:	4618      	mov	r0, r3
 800185a:	f000 f96f 	bl	8001b3c <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	b2db      	uxtb	r3, r3
}
 8001862:	4618      	mov	r0, r3
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
	...

0800186c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b08c      	sub	sp, #48	; 0x30
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4a51      	ldr	r2, [pc, #324]	; (80019bc <I2Cx_MspInit+0x150>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d14d      	bne.n	8001918 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800187c:	4b50      	ldr	r3, [pc, #320]	; (80019c0 <I2Cx_MspInit+0x154>)
 800187e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001880:	4a4f      	ldr	r2, [pc, #316]	; (80019c0 <I2Cx_MspInit+0x154>)
 8001882:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001886:	6313      	str	r3, [r2, #48]	; 0x30
 8001888:	4b4d      	ldr	r3, [pc, #308]	; (80019c0 <I2Cx_MspInit+0x154>)
 800188a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001890:	61bb      	str	r3, [r7, #24]
 8001892:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8001894:	2380      	movs	r3, #128	; 0x80
 8001896:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001898:	2312      	movs	r3, #18
 800189a:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80018a0:	2302      	movs	r3, #2
 80018a2:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 80018a4:	2304      	movs	r3, #4
 80018a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80018a8:	f107 031c 	add.w	r3, r7, #28
 80018ac:	4619      	mov	r1, r3
 80018ae:	4845      	ldr	r0, [pc, #276]	; (80019c4 <I2Cx_MspInit+0x158>)
 80018b0:	f001 ffc4 	bl	800383c <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 80018b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80018ba:	f107 031c 	add.w	r3, r7, #28
 80018be:	4619      	mov	r1, r3
 80018c0:	4840      	ldr	r0, [pc, #256]	; (80019c4 <I2Cx_MspInit+0x158>)
 80018c2:	f001 ffbb 	bl	800383c <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 80018c6:	4b3e      	ldr	r3, [pc, #248]	; (80019c0 <I2Cx_MspInit+0x154>)
 80018c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ca:	4a3d      	ldr	r2, [pc, #244]	; (80019c0 <I2Cx_MspInit+0x154>)
 80018cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80018d0:	6413      	str	r3, [r2, #64]	; 0x40
 80018d2:	4b3b      	ldr	r3, [pc, #236]	; (80019c0 <I2Cx_MspInit+0x154>)
 80018d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80018da:	617b      	str	r3, [r7, #20]
 80018dc:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 80018de:	4b38      	ldr	r3, [pc, #224]	; (80019c0 <I2Cx_MspInit+0x154>)
 80018e0:	6a1b      	ldr	r3, [r3, #32]
 80018e2:	4a37      	ldr	r2, [pc, #220]	; (80019c0 <I2Cx_MspInit+0x154>)
 80018e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80018e8:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 80018ea:	4b35      	ldr	r3, [pc, #212]	; (80019c0 <I2Cx_MspInit+0x154>)
 80018ec:	6a1b      	ldr	r3, [r3, #32]
 80018ee:	4a34      	ldr	r2, [pc, #208]	; (80019c0 <I2Cx_MspInit+0x154>)
 80018f0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80018f4:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80018f6:	2200      	movs	r2, #0
 80018f8:	210f      	movs	r1, #15
 80018fa:	2048      	movs	r0, #72	; 0x48
 80018fc:	f001 fb9d 	bl	800303a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8001900:	2048      	movs	r0, #72	; 0x48
 8001902:	f001 fbb6 	bl	8003072 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8001906:	2200      	movs	r2, #0
 8001908:	210f      	movs	r1, #15
 800190a:	2049      	movs	r0, #73	; 0x49
 800190c:	f001 fb95 	bl	800303a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8001910:	2049      	movs	r0, #73	; 0x49
 8001912:	f001 fbae 	bl	8003072 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8001916:	e04d      	b.n	80019b4 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001918:	4b29      	ldr	r3, [pc, #164]	; (80019c0 <I2Cx_MspInit+0x154>)
 800191a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191c:	4a28      	ldr	r2, [pc, #160]	; (80019c0 <I2Cx_MspInit+0x154>)
 800191e:	f043 0302 	orr.w	r3, r3, #2
 8001922:	6313      	str	r3, [r2, #48]	; 0x30
 8001924:	4b26      	ldr	r3, [pc, #152]	; (80019c0 <I2Cx_MspInit+0x154>)
 8001926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001928:	f003 0302 	and.w	r3, r3, #2
 800192c:	613b      	str	r3, [r7, #16]
 800192e:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8001930:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001934:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001936:	2312      	movs	r3, #18
 8001938:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800193e:	2302      	movs	r3, #2
 8001940:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8001942:	2304      	movs	r3, #4
 8001944:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001946:	f107 031c 	add.w	r3, r7, #28
 800194a:	4619      	mov	r1, r3
 800194c:	481e      	ldr	r0, [pc, #120]	; (80019c8 <I2Cx_MspInit+0x15c>)
 800194e:	f001 ff75 	bl	800383c <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8001952:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001956:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001958:	f107 031c 	add.w	r3, r7, #28
 800195c:	4619      	mov	r1, r3
 800195e:	481a      	ldr	r0, [pc, #104]	; (80019c8 <I2Cx_MspInit+0x15c>)
 8001960:	f001 ff6c 	bl	800383c <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8001964:	4b16      	ldr	r3, [pc, #88]	; (80019c0 <I2Cx_MspInit+0x154>)
 8001966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001968:	4a15      	ldr	r2, [pc, #84]	; (80019c0 <I2Cx_MspInit+0x154>)
 800196a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800196e:	6413      	str	r3, [r2, #64]	; 0x40
 8001970:	4b13      	ldr	r3, [pc, #76]	; (80019c0 <I2Cx_MspInit+0x154>)
 8001972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001974:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 800197c:	4b10      	ldr	r3, [pc, #64]	; (80019c0 <I2Cx_MspInit+0x154>)
 800197e:	6a1b      	ldr	r3, [r3, #32]
 8001980:	4a0f      	ldr	r2, [pc, #60]	; (80019c0 <I2Cx_MspInit+0x154>)
 8001982:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001986:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8001988:	4b0d      	ldr	r3, [pc, #52]	; (80019c0 <I2Cx_MspInit+0x154>)
 800198a:	6a1b      	ldr	r3, [r3, #32]
 800198c:	4a0c      	ldr	r2, [pc, #48]	; (80019c0 <I2Cx_MspInit+0x154>)
 800198e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001992:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8001994:	2200      	movs	r2, #0
 8001996:	210f      	movs	r1, #15
 8001998:	201f      	movs	r0, #31
 800199a:	f001 fb4e 	bl	800303a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 800199e:	201f      	movs	r0, #31
 80019a0:	f001 fb67 	bl	8003072 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 80019a4:	2200      	movs	r2, #0
 80019a6:	210f      	movs	r1, #15
 80019a8:	2020      	movs	r0, #32
 80019aa:	f001 fb46 	bl	800303a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 80019ae:	2020      	movs	r0, #32
 80019b0:	f001 fb5f 	bl	8003072 <HAL_NVIC_EnableIRQ>
}
 80019b4:	bf00      	nop
 80019b6:	3730      	adds	r7, #48	; 0x30
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	200000c4 	.word	0x200000c4
 80019c0:	40023800 	.word	0x40023800
 80019c4:	40021c00 	.word	0x40021c00
 80019c8:	40020400 	.word	0x40020400

080019cc <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f002 fcd7 	bl	8004388 <HAL_I2C_GetState>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d125      	bne.n	8001a2c <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4a14      	ldr	r2, [pc, #80]	; (8001a34 <I2Cx_Init+0x68>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d103      	bne.n	80019f0 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	4a13      	ldr	r2, [pc, #76]	; (8001a38 <I2Cx_Init+0x6c>)
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	e002      	b.n	80019f6 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4a12      	ldr	r2, [pc, #72]	; (8001a3c <I2Cx_Init+0x70>)
 80019f4:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a11      	ldr	r2, [pc, #68]	; (8001a40 <I2Cx_Init+0x74>)
 80019fa:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2201      	movs	r2, #1
 8001a06:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f7ff ff23 	bl	800186c <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f002 f9c0 	bl	8003dac <HAL_I2C_Init>
  }
}
 8001a2c:	bf00      	nop
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	200000c4 	.word	0x200000c4
 8001a38:	40005c00 	.word	0x40005c00
 8001a3c:	40005400 	.word	0x40005400
 8001a40:	40912732 	.word	0x40912732

08001a44 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b08a      	sub	sp, #40	; 0x28
 8001a48:	af04      	add	r7, sp, #16
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	4608      	mov	r0, r1
 8001a4e:	4611      	mov	r1, r2
 8001a50:	461a      	mov	r2, r3
 8001a52:	4603      	mov	r3, r0
 8001a54:	72fb      	strb	r3, [r7, #11]
 8001a56:	460b      	mov	r3, r1
 8001a58:	813b      	strh	r3, [r7, #8]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001a62:	7afb      	ldrb	r3, [r7, #11]
 8001a64:	b299      	uxth	r1, r3
 8001a66:	88f8      	ldrh	r0, [r7, #6]
 8001a68:	893a      	ldrh	r2, [r7, #8]
 8001a6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a6e:	9302      	str	r3, [sp, #8]
 8001a70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a72:	9301      	str	r3, [sp, #4]
 8001a74:	6a3b      	ldr	r3, [r7, #32]
 8001a76:	9300      	str	r3, [sp, #0]
 8001a78:	4603      	mov	r3, r0
 8001a7a:	68f8      	ldr	r0, [r7, #12]
 8001a7c:	f002 fb6a 	bl	8004154 <HAL_I2C_Mem_Read>
 8001a80:	4603      	mov	r3, r0
 8001a82:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001a84:	7dfb      	ldrb	r3, [r7, #23]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d004      	beq.n	8001a94 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8001a8a:	7afb      	ldrb	r3, [r7, #11]
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	68f8      	ldr	r0, [r7, #12]
 8001a90:	f000 f832 	bl	8001af8 <I2Cx_Error>
  }
  return status;    
 8001a94:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3718      	adds	r7, #24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b08a      	sub	sp, #40	; 0x28
 8001aa2:	af04      	add	r7, sp, #16
 8001aa4:	60f8      	str	r0, [r7, #12]
 8001aa6:	4608      	mov	r0, r1
 8001aa8:	4611      	mov	r1, r2
 8001aaa:	461a      	mov	r2, r3
 8001aac:	4603      	mov	r3, r0
 8001aae:	72fb      	strb	r3, [r7, #11]
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	813b      	strh	r3, [r7, #8]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001abc:	7afb      	ldrb	r3, [r7, #11]
 8001abe:	b299      	uxth	r1, r3
 8001ac0:	88f8      	ldrh	r0, [r7, #6]
 8001ac2:	893a      	ldrh	r2, [r7, #8]
 8001ac4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ac8:	9302      	str	r3, [sp, #8]
 8001aca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001acc:	9301      	str	r3, [sp, #4]
 8001ace:	6a3b      	ldr	r3, [r7, #32]
 8001ad0:	9300      	str	r3, [sp, #0]
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	68f8      	ldr	r0, [r7, #12]
 8001ad6:	f002 fa29 	bl	8003f2c <HAL_I2C_Mem_Write>
 8001ada:	4603      	mov	r3, r0
 8001adc:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001ade:	7dfb      	ldrb	r3, [r7, #23]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d004      	beq.n	8001aee <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001ae4:	7afb      	ldrb	r3, [r7, #11]
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	68f8      	ldr	r0, [r7, #12]
 8001aea:	f000 f805 	bl	8001af8 <I2Cx_Error>
  }
  return status;
 8001aee:	7dfb      	ldrb	r3, [r7, #23]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3718      	adds	r7, #24
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	460b      	mov	r3, r1
 8001b02:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f002 f9e1 	bl	8003ecc <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7ff ff5e 	bl	80019cc <I2Cx_Init>
}
 8001b10:	bf00      	nop
 8001b12:	3708      	adds	r7, #8
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8001b1c:	4802      	ldr	r0, [pc, #8]	; (8001b28 <AUDIO_IO_Init+0x10>)
 8001b1e:	f7ff ff55 	bl	80019cc <I2Cx_Init>
}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	200000c4 	.word	0x200000c4

08001b2c <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
}
 8001b30:	bf00      	nop
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
	...

08001b3c <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af02      	add	r7, sp, #8
 8001b42:	4603      	mov	r3, r0
 8001b44:	71fb      	strb	r3, [r7, #7]
 8001b46:	460b      	mov	r3, r1
 8001b48:	80bb      	strh	r3, [r7, #4]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 8001b4e:	887b      	ldrh	r3, [r7, #2]
 8001b50:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 8001b52:	89fb      	ldrh	r3, [r7, #14]
 8001b54:	0a1b      	lsrs	r3, r3, #8
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 8001b5a:	89fb      	ldrh	r3, [r7, #14]
 8001b5c:	021b      	lsls	r3, r3, #8
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	b21a      	sxth	r2, r3
 8001b62:	887b      	ldrh	r3, [r7, #2]
 8001b64:	b21b      	sxth	r3, r3
 8001b66:	4313      	orrs	r3, r2
 8001b68:	b21b      	sxth	r3, r3
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8001b6e:	88ba      	ldrh	r2, [r7, #4]
 8001b70:	79f9      	ldrb	r1, [r7, #7]
 8001b72:	2302      	movs	r3, #2
 8001b74:	9301      	str	r3, [sp, #4]
 8001b76:	1cbb      	adds	r3, r7, #2
 8001b78:	9300      	str	r3, [sp, #0]
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	4803      	ldr	r0, [pc, #12]	; (8001b8c <AUDIO_IO_Write+0x50>)
 8001b7e:	f7ff ff8e 	bl	8001a9e <I2Cx_WriteMultiple>
}
 8001b82:	bf00      	nop
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	200000c4 	.word	0x200000c4

08001b90 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af02      	add	r7, sp, #8
 8001b96:	4603      	mov	r3, r0
 8001b98:	460a      	mov	r2, r1
 8001b9a:	71fb      	strb	r3, [r7, #7]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	80bb      	strh	r3, [r7, #4]
  uint16_t read_value = 0, tmp = 0;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	81bb      	strh	r3, [r7, #12]
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	81fb      	strh	r3, [r7, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8001ba8:	88ba      	ldrh	r2, [r7, #4]
 8001baa:	79f9      	ldrb	r1, [r7, #7]
 8001bac:	2302      	movs	r3, #2
 8001bae:	9301      	str	r3, [sp, #4]
 8001bb0:	f107 030c 	add.w	r3, r7, #12
 8001bb4:	9300      	str	r3, [sp, #0]
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	480a      	ldr	r0, [pc, #40]	; (8001be4 <AUDIO_IO_Read+0x54>)
 8001bba:	f7ff ff43 	bl	8001a44 <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 8001bbe:	89bb      	ldrh	r3, [r7, #12]
 8001bc0:	0a1b      	lsrs	r3, r3, #8
 8001bc2:	81fb      	strh	r3, [r7, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 8001bc4:	89bb      	ldrh	r3, [r7, #12]
 8001bc6:	021b      	lsls	r3, r3, #8
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	b21a      	sxth	r2, r3
 8001bcc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	b21b      	sxth	r3, r3
 8001bd4:	81fb      	strh	r3, [r7, #14]
  
  read_value = tmp;
 8001bd6:	89fb      	ldrh	r3, [r7, #14]
 8001bd8:	81bb      	strh	r3, [r7, #12]
  
  return read_value;
 8001bda:	89bb      	ldrh	r3, [r7, #12]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3710      	adds	r7, #16
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	200000c4 	.word	0x200000c4

08001be8 <AUDIO_IO_Delay>:
  * @brief  AUDIO Codec delay 
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f001 f975 	bl	8002ee0 <HAL_Delay>
}
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
	...

08001c00 <BSP_AUDIO_OUT_Play>:
  * @param  Size: Number of audio data in BYTES unit.
  *         In memory, first element is for left channel, second element is for right channel
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Play(uint16_t* pBuffer, uint32_t Size)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
  /* Call the audio Codec Play function */
  if(audio_drv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 8001c0a:	4b10      	ldr	r3, [pc, #64]	; (8001c4c <BSP_AUDIO_OUT_Play+0x4c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	b292      	uxth	r2, r2
 8001c14:	6879      	ldr	r1, [r7, #4]
 8001c16:	2034      	movs	r0, #52	; 0x34
 8001c18:	4798      	blx	r3
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <BSP_AUDIO_OUT_Play+0x24>
  {  
    return AUDIO_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e00f      	b.n	8001c44 <BSP_AUDIO_OUT_Play+0x44>
  }
  else
  {
    /* Update the Media layer and enable it for play */  
    HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer, DMA_MAX(Size / AUDIODATA_SIZE));
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001c2a:	d203      	bcs.n	8001c34 <BSP_AUDIO_OUT_Play+0x34>
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	085b      	lsrs	r3, r3, #1
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	e001      	b.n	8001c38 <BSP_AUDIO_OUT_Play+0x38>
 8001c34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c38:	461a      	mov	r2, r3
 8001c3a:	6879      	ldr	r1, [r7, #4]
 8001c3c:	4804      	ldr	r0, [pc, #16]	; (8001c50 <BSP_AUDIO_OUT_Play+0x50>)
 8001c3e:	f003 fdc1 	bl	80057c4 <HAL_SAI_Transmit_DMA>
    
    return AUDIO_OK;
 8001c42:	2300      	movs	r3, #0
  }
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	200003c8 	.word	0x200003c8
 8001c50:	20000110 	.word	0x20000110

08001c54 <BSP_AUDIO_OUT_SetAudioFrameSlot>:
  * @note   This API should be called after the BSP_AUDIO_OUT_Init() to adjust the
  *         audio frame slot.
  * @retval None
  */
void BSP_AUDIO_OUT_SetAudioFrameSlot(uint32_t AudioFrameSlot)
{ 
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8001c5c:	4b0c      	ldr	r3, [pc, #48]	; (8001c90 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	4b0b      	ldr	r3, [pc, #44]	; (8001c90 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001c6a:	601a      	str	r2, [r3, #0]
  
  /* Update the SAI audio frame slot configuration */
  haudio_out_sai.SlotInit.SlotActive = AudioFrameSlot;
 8001c6c:	4a08      	ldr	r2, [pc, #32]	; (8001c90 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6613      	str	r3, [r2, #96]	; 0x60
  HAL_SAI_Init(&haudio_out_sai);
 8001c72:	4807      	ldr	r0, [pc, #28]	; (8001c90 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8001c74:	f003 fbf2 	bl	800545c <HAL_SAI_Init>
  
  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8001c78:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	4b04      	ldr	r3, [pc, #16]	; (8001c90 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001c86:	601a      	str	r2, [r3, #0]
}
 8001c88:	bf00      	nop
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	20000110 	.word	0x20000110

08001c94 <HAL_SAI_TxCpltCallback>:
  * @brief  Tx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_OUT_TransferComplete_CallBack();
 8001c9c:	f000 f834 	bl	8001d08 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 8001ca0:	bf00      	nop
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <HAL_SAI_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_OUT_HalfTransfer_CallBack();
 8001cb0:	f000 f831 	bl	8001d16 <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 8001cb4:	bf00      	nop
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  HAL_SAI_StateTypeDef audio_out_state;
  HAL_SAI_StateTypeDef audio_in_state;

  audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
 8001cc4:	480e      	ldr	r0, [pc, #56]	; (8001d00 <HAL_SAI_ErrorCallback+0x44>)
 8001cc6:	f003 febb 	bl	8005a40 <HAL_SAI_GetState>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	73fb      	strb	r3, [r7, #15]
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 8001cce:	480d      	ldr	r0, [pc, #52]	; (8001d04 <HAL_SAI_ErrorCallback+0x48>)
 8001cd0:	f003 feb6 	bl	8005a40 <HAL_SAI_GetState>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	73bb      	strb	r3, [r7, #14]

  /* Determines if it is an audio out or audio in error */
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 8001cd8:	7bfb      	ldrb	r3, [r7, #15]
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d002      	beq.n	8001ce4 <HAL_SAI_ErrorCallback+0x28>
 8001cde:	7bfb      	ldrb	r3, [r7, #15]
 8001ce0:	2b12      	cmp	r3, #18
 8001ce2:	d101      	bne.n	8001ce8 <HAL_SAI_ErrorCallback+0x2c>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 8001ce4:	f000 f81e 	bl	8001d24 <BSP_AUDIO_OUT_Error_CallBack>
  }

  if ((audio_in_state == HAL_SAI_STATE_BUSY) || (audio_in_state == HAL_SAI_STATE_BUSY_RX))
 8001ce8:	7bbb      	ldrb	r3, [r7, #14]
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d002      	beq.n	8001cf4 <HAL_SAI_ErrorCallback+0x38>
 8001cee:	7bbb      	ldrb	r3, [r7, #14]
 8001cf0:	2b22      	cmp	r3, #34	; 0x22
 8001cf2:	d101      	bne.n	8001cf8 <HAL_SAI_ErrorCallback+0x3c>
  {
    BSP_AUDIO_IN_Error_CallBack();
 8001cf4:	f000 fdca 	bl	800288c <BSP_AUDIO_IN_Error_CallBack>
  }
}
 8001cf8:	bf00      	nop
 8001cfa:	3710      	adds	r7, #16
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	20000110 	.word	0x20000110
 8001d04:	20000194 	.word	0x20000194

08001d08 <BSP_AUDIO_OUT_TransferComplete_CallBack>:
/**
  * @brief  Manages the DMA full Transfer complete event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
}
 8001d0c:	bf00      	nop
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
/**
  * @brief  Manages the DMA Half Transfer complete event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_HalfTransfer_CallBack(void)
{ 
 8001d16:	b480      	push	{r7}
 8001d18:	af00      	add	r7, sp, #0
}
 8001d1a:	bf00      	nop
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <BSP_AUDIO_OUT_Error_CallBack>:
/**
  * @brief  Manages the DMA FIFO error event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
}
 8001d28:	bf00      	nop
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
	...

08001d34 <BSP_AUDIO_OUT_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{ 
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08c      	sub	sp, #48	; 0x30
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_tx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8001d3e:	4b63      	ldr	r3, [pc, #396]	; (8001ecc <BSP_AUDIO_OUT_MspInit+0x198>)
 8001d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d42:	4a62      	ldr	r2, [pc, #392]	; (8001ecc <BSP_AUDIO_OUT_MspInit+0x198>)
 8001d44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d48:	6453      	str	r3, [r2, #68]	; 0x44
 8001d4a:	4b60      	ldr	r3, [pc, #384]	; (8001ecc <BSP_AUDIO_OUT_MspInit+0x198>)
 8001d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d52:	61bb      	str	r3, [r7, #24]
 8001d54:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 8001d56:	4b5d      	ldr	r3, [pc, #372]	; (8001ecc <BSP_AUDIO_OUT_MspInit+0x198>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	4a5c      	ldr	r2, [pc, #368]	; (8001ecc <BSP_AUDIO_OUT_MspInit+0x198>)
 8001d5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d60:	6313      	str	r3, [r2, #48]	; 0x30
 8001d62:	4b5a      	ldr	r3, [pc, #360]	; (8001ecc <BSP_AUDIO_OUT_MspInit+0x198>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d6a:	617b      	str	r3, [r7, #20]
 8001d6c:	697b      	ldr	r3, [r7, #20]
  AUDIO_OUT_SAIx_SCK_SD_ENABLE();
 8001d6e:	4b57      	ldr	r3, [pc, #348]	; (8001ecc <BSP_AUDIO_OUT_MspInit+0x198>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	4a56      	ldr	r2, [pc, #344]	; (8001ecc <BSP_AUDIO_OUT_MspInit+0x198>)
 8001d74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d78:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7a:	4b54      	ldr	r3, [pc, #336]	; (8001ecc <BSP_AUDIO_OUT_MspInit+0x198>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d82:	613b      	str	r3, [r7, #16]
 8001d84:	693b      	ldr	r3, [r7, #16]
  AUDIO_OUT_SAIx_FS_ENABLE();
 8001d86:	4b51      	ldr	r3, [pc, #324]	; (8001ecc <BSP_AUDIO_OUT_MspInit+0x198>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	4a50      	ldr	r2, [pc, #320]	; (8001ecc <BSP_AUDIO_OUT_MspInit+0x198>)
 8001d8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d90:	6313      	str	r3, [r2, #48]	; 0x30
 8001d92:	4b4e      	ldr	r3, [pc, #312]	; (8001ecc <BSP_AUDIO_OUT_MspInit+0x198>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 8001d9e:	2380      	movs	r3, #128	; 0x80
 8001da0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001da2:	2302      	movs	r3, #2
 8001da4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001da6:	2300      	movs	r3, #0
 8001da8:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001daa:	2303      	movs	r3, #3
 8001dac:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8001dae:	230a      	movs	r3, #10
 8001db0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 8001db2:	f107 031c 	add.w	r3, r7, #28
 8001db6:	4619      	mov	r1, r3
 8001db8:	4845      	ldr	r0, [pc, #276]	; (8001ed0 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8001dba:	f001 fd3f 	bl	800383c <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 8001dbe:	2320      	movs	r3, #32
 8001dc0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 8001dce:	230a      	movs	r3, #10
 8001dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8001dd2:	f107 031c 	add.w	r3, r7, #28
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	483d      	ldr	r0, [pc, #244]	; (8001ed0 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8001dda:	f001 fd2f 	bl	800383c <HAL_GPIO_Init>

  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 8001dde:	2340      	movs	r3, #64	; 0x40
 8001de0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001de2:	2302      	movs	r3, #2
 8001de4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001de6:	2300      	movs	r3, #0
 8001de8:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001dea:	2303      	movs	r3, #3
 8001dec:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8001dee:	230a      	movs	r3, #10
 8001df0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8001df2:	f107 031c 	add.w	r3, r7, #28
 8001df6:	4619      	mov	r1, r3
 8001df8:	4835      	ldr	r0, [pc, #212]	; (8001ed0 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8001dfa:	f001 fd1f 	bl	800383c <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8001dfe:	2310      	movs	r3, #16
 8001e00:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001e02:	2302      	movs	r3, #2
 8001e04:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001e06:	2300      	movs	r3, #0
 8001e08:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8001e0e:	230a      	movs	r3, #10
 8001e10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 8001e12:	f107 031c 	add.w	r3, r7, #28
 8001e16:	4619      	mov	r1, r3
 8001e18:	482d      	ldr	r0, [pc, #180]	; (8001ed0 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8001e1a:	f001 fd0f 	bl	800383c <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8001e1e:	4b2b      	ldr	r3, [pc, #172]	; (8001ecc <BSP_AUDIO_OUT_MspInit+0x198>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	4a2a      	ldr	r2, [pc, #168]	; (8001ecc <BSP_AUDIO_OUT_MspInit+0x198>)
 8001e24:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e28:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2a:	4b28      	ldr	r3, [pc, #160]	; (8001ecc <BSP_AUDIO_OUT_MspInit+0x198>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e32:	60bb      	str	r3, [r7, #8]
 8001e34:	68bb      	ldr	r3, [r7, #8]
    
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a26      	ldr	r2, [pc, #152]	; (8001ed4 <BSP_AUDIO_OUT_MspInit+0x1a0>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d138      	bne.n	8001eb2 <BSP_AUDIO_OUT_MspInit+0x17e>
  {
    /* Configure the hdma_saiTx handle parameters */   
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 8001e40:	4b25      	ldr	r3, [pc, #148]	; (8001ed8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8001e42:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001e46:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8001e48:	4b23      	ldr	r3, [pc, #140]	; (8001ed8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8001e4a:	2240      	movs	r2, #64	; 0x40
 8001e4c:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8001e4e:	4b22      	ldr	r3, [pc, #136]	; (8001ed8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8001e54:	4b20      	ldr	r3, [pc, #128]	; (8001ed8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8001e56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e5a:	611a      	str	r2, [r3, #16]
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 8001e5c:	4b1e      	ldr	r3, [pc, #120]	; (8001ed8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8001e5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e62:	615a      	str	r2, [r3, #20]
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 8001e64:	4b1c      	ldr	r3, [pc, #112]	; (8001ed8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8001e66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e6a:	619a      	str	r2, [r3, #24]
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 8001e6c:	4b1a      	ldr	r3, [pc, #104]	; (8001ed8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8001e6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e72:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 8001e74:	4b18      	ldr	r3, [pc, #96]	; (8001ed8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8001e76:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e7a:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8001e7c:	4b16      	ldr	r3, [pc, #88]	; (8001ed8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8001e7e:	2204      	movs	r2, #4
 8001e80:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001e82:	4b15      	ldr	r3, [pc, #84]	; (8001ed8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8001e84:	2203      	movs	r2, #3
 8001e86:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001e88:	4b13      	ldr	r3, [pc, #76]	; (8001ed8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8001e8e:	4b12      	ldr	r3, [pc, #72]	; (8001ed8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	631a      	str	r2, [r3, #48]	; 0x30
    
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 8001e94:	4b10      	ldr	r3, [pc, #64]	; (8001ed8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8001e96:	4a11      	ldr	r2, [pc, #68]	; (8001edc <BSP_AUDIO_OUT_MspInit+0x1a8>)
 8001e98:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a0e      	ldr	r2, [pc, #56]	; (8001ed8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8001e9e:	66da      	str	r2, [r3, #108]	; 0x6c
 8001ea0:	4a0d      	ldr	r2, [pc, #52]	; (8001ed8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_tx);
 8001ea6:	480c      	ldr	r0, [pc, #48]	; (8001ed8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8001ea8:	f001 f9a0 	bl	80031ec <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_tx);      
 8001eac:	480a      	ldr	r0, [pc, #40]	; (8001ed8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8001eae:	f001 f8ef 	bl	8003090 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	210e      	movs	r1, #14
 8001eb6:	203c      	movs	r0, #60	; 0x3c
 8001eb8:	f001 f8bf 	bl	800303a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ); 
 8001ebc:	203c      	movs	r0, #60	; 0x3c
 8001ebe:	f001 f8d8 	bl	8003072 <HAL_NVIC_EnableIRQ>
}
 8001ec2:	bf00      	nop
 8001ec4:	3730      	adds	r7, #48	; 0x30
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	40022000 	.word	0x40022000
 8001ed4:	40015c04 	.word	0x40015c04
 8001ed8:	20000218 	.word	0x20000218
 8001edc:	40026470 	.word	0x40026470

08001ee0 <BSP_AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @retval None
  */
__weak void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t AudioFreq, void *Params)
{ 
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b0a6      	sub	sp, #152	; 0x98
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8001eec:	f107 0314 	add.w	r3, r7, #20
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f003 f863 	bl	8004fbc <HAL_RCCEx_GetPeriphCLKConfig>
  
  /* Set the PLL configuration according to the audio frequency */
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	f642 3211 	movw	r2, #11025	; 0x2b11
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d009      	beq.n	8001f14 <BSP_AUDIO_OUT_ClockConfig+0x34>
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	f245 6222 	movw	r2, #22050	; 0x5622
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d004      	beq.n	8001f14 <BSP_AUDIO_OUT_ClockConfig+0x34>
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d112      	bne.n	8001f3a <BSP_AUDIO_OUT_ClockConfig+0x5a>
  {
    /* Configure PLLI2S prescalers */
    /* PLLI2S_VCO: VCO_429M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 429/2 = 214.5 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 214.5/19 = 11.289 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8001f14:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001f18:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8001f1a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f1e:	657b      	str	r3, [r7, #84]	; 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 8001f20:	f240 13ad 	movw	r3, #429	; 0x1ad
 8001f24:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 8001f26:	2302      	movs	r3, #2
 8001f28:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 8001f2a:	2313      	movs	r3, #19
 8001f2c:	63bb      	str	r3, [r7, #56]	; 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8001f2e:	f107 0314 	add.w	r3, r7, #20
 8001f32:	4618      	mov	r0, r3
 8001f34:	f002 fc52 	bl	80047dc <HAL_RCCEx_PeriphCLKConfig>
 8001f38:	e012      	b.n	8001f60 <BSP_AUDIO_OUT_ClockConfig+0x80>
  {
    /* I2S clock config
    PLLI2S_VCO: VCO_344M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 344/7 = 49.142 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 49.142/1 = 49.142 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8001f3a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001f3e:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8001f40:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f44:	657b      	str	r3, [r7, #84]	; 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 8001f46:	f44f 73ac 	mov.w	r3, #344	; 0x158
 8001f4a:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 8001f4c:	2307      	movs	r3, #7
 8001f4e:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 8001f50:	2301      	movs	r3, #1
 8001f52:	63bb      	str	r3, [r7, #56]	; 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8001f54:	f107 0314 	add.w	r3, r7, #20
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f002 fc3f 	bl	80047dc <HAL_RCCEx_PeriphCLKConfig>
  }
}
 8001f5e:	bf00      	nop
 8001f60:	bf00      	nop
 8001f62:	3798      	adds	r7, #152	; 0x98
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <SAIx_Out_DeInit>:
/**
  * @brief  Deinitializes the output Audio Codec audio interface (SAI).
  * @retval None
  */
static void SAIx_Out_DeInit(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001f6c:	4b07      	ldr	r3, [pc, #28]	; (8001f8c <SAIx_Out_DeInit+0x24>)
 8001f6e:	4a08      	ldr	r2, [pc, #32]	; (8001f90 <SAIx_Out_DeInit+0x28>)
 8001f70:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8001f72:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <SAIx_Out_DeInit+0x24>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	4b04      	ldr	r3, [pc, #16]	; (8001f8c <SAIx_Out_DeInit+0x24>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001f80:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_out_sai);
 8001f82:	4802      	ldr	r0, [pc, #8]	; (8001f8c <SAIx_Out_DeInit+0x24>)
 8001f84:	f003 fbe8 	bl	8005758 <HAL_SAI_DeInit>
}
 8001f88:	bf00      	nop
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	20000110 	.word	0x20000110
 8001f90:	40015c04 	.word	0x40015c04

08001f94 <BSP_AUDIO_IN_OUT_Init>:
  * @param  BitRes: Audio frequency to be configured.
  * @param  ChnlNbr: Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_OUT_Init(uint16_t InputDevice, uint16_t OutputDevice, uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 8001f94:	b590      	push	{r4, r7, lr}
 8001f96:	b089      	sub	sp, #36	; 0x24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60ba      	str	r2, [r7, #8]
 8001f9c:	607b      	str	r3, [r7, #4]
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	81fb      	strh	r3, [r7, #14]
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = AUDIO_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	77fb      	strb	r3, [r7, #31]
  uint32_t deviceid = 0x00;
 8001faa:	2300      	movs	r3, #0
 8001fac:	617b      	str	r3, [r7, #20]
  uint32_t slot_active;

  if (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2)  /* Only MICROPHONE_2 input supported */
 8001fae:	89fb      	ldrh	r3, [r7, #14]
 8001fb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fb4:	d002      	beq.n	8001fbc <BSP_AUDIO_IN_OUT_Init+0x28>
  {
    ret = AUDIO_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	77fb      	strb	r3, [r7, #31]
 8001fba:	e054      	b.n	8002066 <BSP_AUDIO_IN_OUT_Init+0xd2>
  }
  else
  {
    /* Disable SAI */
    SAIx_In_DeInit();
 8001fbc:	f000 f9f8 	bl	80023b0 <SAIx_In_DeInit>
    SAIx_Out_DeInit();
 8001fc0:	f7ff ffd2 	bl	8001f68 <SAIx_Out_DeInit>

    /* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	68b9      	ldr	r1, [r7, #8]
 8001fc8:	4829      	ldr	r0, [pc, #164]	; (8002070 <BSP_AUDIO_IN_OUT_Init+0xdc>)
 8001fca:	f7ff ff89 	bl	8001ee0 <BSP_AUDIO_OUT_ClockConfig>

    /* SAI data transfer preparation:
    Prepare the Media to be used for the audio transfer from SAI peripheral to memory */
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8001fce:	4b28      	ldr	r3, [pc, #160]	; (8002070 <BSP_AUDIO_IN_OUT_Init+0xdc>)
 8001fd0:	4a28      	ldr	r2, [pc, #160]	; (8002074 <BSP_AUDIO_IN_OUT_Init+0xe0>)
 8001fd2:	601a      	str	r2, [r3, #0]
    if(HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 8001fd4:	4826      	ldr	r0, [pc, #152]	; (8002070 <BSP_AUDIO_IN_OUT_Init+0xdc>)
 8001fd6:	f003 fd33 	bl	8005a40 <HAL_SAI_GetState>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d103      	bne.n	8001fe8 <BSP_AUDIO_IN_OUT_Init+0x54>
    {
      /* Init the SAI MSP: this __weak function can be redefined by the application*/
      BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	4823      	ldr	r0, [pc, #140]	; (8002070 <BSP_AUDIO_IN_OUT_Init+0xdc>)
 8001fe4:	f000 f87c 	bl	80020e0 <BSP_AUDIO_IN_MspInit>
    }

    /* SAI data transfer preparation:
    Prepare the Media to be used for the audio transfer from memory to SAI peripheral */
    haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001fe8:	4b23      	ldr	r3, [pc, #140]	; (8002078 <BSP_AUDIO_IN_OUT_Init+0xe4>)
 8001fea:	4a24      	ldr	r2, [pc, #144]	; (800207c <BSP_AUDIO_IN_OUT_Init+0xe8>)
 8001fec:	601a      	str	r2, [r3, #0]
    if(HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET)
 8001fee:	4822      	ldr	r0, [pc, #136]	; (8002078 <BSP_AUDIO_IN_OUT_Init+0xe4>)
 8001ff0:	f003 fd26 	bl	8005a40 <HAL_SAI_GetState>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d103      	bne.n	8002002 <BSP_AUDIO_IN_OUT_Init+0x6e>
    {
      /* Init the SAI MSP: this __weak function can be redefined by the application*/
      BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	481e      	ldr	r0, [pc, #120]	; (8002078 <BSP_AUDIO_IN_OUT_Init+0xe4>)
 8001ffe:	f7ff fe99 	bl	8001d34 <BSP_AUDIO_OUT_MspInit>

    /* Configure SAI in master mode :
     *   - SAI2_block_A in master TX mode
     *   - SAI2_block_B in slave RX mode synchronous from SAI2_block_A
     */
    if (InputDevice == INPUT_DEVICE_DIGITAL_MICROPHONE_2)
 8002002:	89fb      	ldrh	r3, [r7, #14]
 8002004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002008:	d102      	bne.n	8002010 <BSP_AUDIO_IN_OUT_Init+0x7c>
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_13;
 800200a:	230a      	movs	r3, #10
 800200c:	61bb      	str	r3, [r7, #24]
 800200e:	e001      	b.n	8002014 <BSP_AUDIO_IN_OUT_Init+0x80>
    }
    else
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_02;
 8002010:	2305      	movs	r3, #5
 8002012:	61bb      	str	r3, [r7, #24]
    }
    SAIx_In_Init(SAI_MODEMASTER_TX, slot_active, AudioFreq);
 8002014:	68ba      	ldr	r2, [r7, #8]
 8002016:	69b9      	ldr	r1, [r7, #24]
 8002018:	2000      	movs	r0, #0
 800201a:	f000 f913 	bl	8002244 <SAIx_In_Init>

    /* wm8994 codec initialization */
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 800201e:	4b18      	ldr	r3, [pc, #96]	; (8002080 <BSP_AUDIO_IN_OUT_Init+0xec>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	2034      	movs	r0, #52	; 0x34
 8002024:	4798      	blx	r3
 8002026:	6178      	str	r0, [r7, #20]

    if((deviceid) == WM8994_ID)
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	f648 1294 	movw	r2, #35220	; 0x8994
 800202e:	4293      	cmp	r3, r2
 8002030:	d109      	bne.n	8002046 <BSP_AUDIO_IN_OUT_Init+0xb2>
    {
      /* Reset the Codec Registers */
      wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8002032:	4b13      	ldr	r3, [pc, #76]	; (8002080 <BSP_AUDIO_IN_OUT_Init+0xec>)
 8002034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002036:	2034      	movs	r0, #52	; 0x34
 8002038:	4798      	blx	r3
      /* Initialize the audio driver structure */
      audio_drv = &wm8994_drv;
 800203a:	4b12      	ldr	r3, [pc, #72]	; (8002084 <BSP_AUDIO_IN_OUT_Init+0xf0>)
 800203c:	4a10      	ldr	r2, [pc, #64]	; (8002080 <BSP_AUDIO_IN_OUT_Init+0xec>)
 800203e:	601a      	str	r2, [r3, #0]
      ret = AUDIO_OK;
 8002040:	2300      	movs	r3, #0
 8002042:	77fb      	strb	r3, [r7, #31]
 8002044:	e001      	b.n	800204a <BSP_AUDIO_IN_OUT_Init+0xb6>
    }
    else
    {
      ret = AUDIO_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	77fb      	strb	r3, [r7, #31]
    }

    if(ret == AUDIO_OK)
 800204a:	7ffb      	ldrb	r3, [r7, #31]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d10a      	bne.n	8002066 <BSP_AUDIO_IN_OUT_Init+0xd2>
    {
      /* Initialize the codec internal registers */
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice | OutputDevice, 100, AudioFreq);
 8002050:	4b0c      	ldr	r3, [pc, #48]	; (8002084 <BSP_AUDIO_IN_OUT_Init+0xf0>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681c      	ldr	r4, [r3, #0]
 8002056:	89fa      	ldrh	r2, [r7, #14]
 8002058:	89bb      	ldrh	r3, [r7, #12]
 800205a:	4313      	orrs	r3, r2
 800205c:	b299      	uxth	r1, r3
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	2264      	movs	r2, #100	; 0x64
 8002062:	2034      	movs	r0, #52	; 0x34
 8002064:	47a0      	blx	r4
    }
  }
  return ret;
 8002066:	7ffb      	ldrb	r3, [r7, #31]
}
 8002068:	4618      	mov	r0, r3
 800206a:	3724      	adds	r7, #36	; 0x24
 800206c:	46bd      	mov	sp, r7
 800206e:	bd90      	pop	{r4, r7, pc}
 8002070:	20000194 	.word	0x20000194
 8002074:	40015c24 	.word	0x40015c24
 8002078:	20000110 	.word	0x20000110
 800207c:	40015c04 	.word	0x40015c04
 8002080:	20000000 	.word	0x20000000
 8002084:	200003c8 	.word	0x200003c8

08002088 <BSP_AUDIO_IN_Record>:
  * @param  size: size of the recorded buffer in number of elements (typically number of half-words)
  *               Be careful that it is not the same unit than BSP_AUDIO_OUT_Play function
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t  BSP_AUDIO_IN_Record(uint16_t* pbuf, uint32_t size)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  uint32_t ret = AUDIO_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	60fb      	str	r3, [r7, #12]
  
  /* Start the process receive DMA */
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	b29b      	uxth	r3, r3
 800209a:	461a      	mov	r2, r3
 800209c:	6879      	ldr	r1, [r7, #4]
 800209e:	4805      	ldr	r0, [pc, #20]	; (80020b4 <BSP_AUDIO_IN_Record+0x2c>)
 80020a0:	f003 fc40 	bl	8005924 <HAL_SAI_Receive_DMA>
  
  /* Return AUDIO_OK when all operations are correctly done */
  ret = AUDIO_OK;
 80020a4:	2300      	movs	r3, #0
 80020a6:	60fb      	str	r3, [r7, #12]
  
  return ret;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	b2db      	uxtb	r3, r3
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	20000194 	.word	0x20000194

080020b8 <HAL_SAI_RxCpltCallback>:
  * @brief  Rx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 80020c0:	f000 fbcc 	bl	800285c <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 80020c4:	bf00      	nop
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 80020d4:	f000 fbce 	bl	8002874 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 80020d8:	bf00      	nop
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <BSP_AUDIO_IN_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_IN_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b08c      	sub	sp, #48	; 0x30
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_rx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_IN_SAIx_CLK_ENABLE();
 80020ea:	4b50      	ldr	r3, [pc, #320]	; (800222c <BSP_AUDIO_IN_MspInit+0x14c>)
 80020ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ee:	4a4f      	ldr	r2, [pc, #316]	; (800222c <BSP_AUDIO_IN_MspInit+0x14c>)
 80020f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020f4:	6453      	str	r3, [r2, #68]	; 0x44
 80020f6:	4b4d      	ldr	r3, [pc, #308]	; (800222c <BSP_AUDIO_IN_MspInit+0x14c>)
 80020f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020fe:	61bb      	str	r3, [r7, #24]
 8002100:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable SD GPIO clock */
  AUDIO_IN_SAIx_SD_ENABLE();
 8002102:	4b4a      	ldr	r3, [pc, #296]	; (800222c <BSP_AUDIO_IN_MspInit+0x14c>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	4a49      	ldr	r2, [pc, #292]	; (800222c <BSP_AUDIO_IN_MspInit+0x14c>)
 8002108:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800210c:	6313      	str	r3, [r2, #48]	; 0x30
 800210e:	4b47      	ldr	r3, [pc, #284]	; (800222c <BSP_AUDIO_IN_MspInit+0x14c>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002116:	617b      	str	r3, [r7, #20]
 8002118:	697b      	ldr	r3, [r7, #20]
  /* CODEC_SAI pin configuration: SD pin */
  gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 800211a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800211e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002120:	2302      	movs	r3, #2
 8002122:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8002124:	2300      	movs	r3, #0
 8002126:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002128:	2302      	movs	r3, #2
 800212a:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 800212c:	230a      	movs	r3, #10
 800212e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8002130:	f107 031c 	add.w	r3, r7, #28
 8002134:	4619      	mov	r1, r3
 8002136:	483e      	ldr	r0, [pc, #248]	; (8002230 <BSP_AUDIO_IN_MspInit+0x150>)
 8002138:	f001 fb80 	bl	800383c <HAL_GPIO_Init>

  /* Enable Audio INT GPIO clock */
  AUDIO_IN_INT_GPIO_ENABLE();
 800213c:	4b3b      	ldr	r3, [pc, #236]	; (800222c <BSP_AUDIO_IN_MspInit+0x14c>)
 800213e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002140:	4a3a      	ldr	r2, [pc, #232]	; (800222c <BSP_AUDIO_IN_MspInit+0x14c>)
 8002142:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002146:	6313      	str	r3, [r2, #48]	; 0x30
 8002148:	4b38      	ldr	r3, [pc, #224]	; (800222c <BSP_AUDIO_IN_MspInit+0x14c>)
 800214a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002150:	613b      	str	r3, [r7, #16]
 8002152:	693b      	ldr	r3, [r7, #16]
  /* Audio INT pin configuration: input */
  gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 8002154:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002158:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800215a:	2300      	movs	r3, #0
 800215c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800215e:	2300      	movs	r3, #0
 8002160:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002162:	2302      	movs	r3, #2
 8002164:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 8002166:	f107 031c 	add.w	r3, r7, #28
 800216a:	4619      	mov	r1, r3
 800216c:	4831      	ldr	r0, [pc, #196]	; (8002234 <BSP_AUDIO_IN_MspInit+0x154>)
 800216e:	f001 fb65 	bl	800383c <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8002172:	4b2e      	ldr	r3, [pc, #184]	; (800222c <BSP_AUDIO_IN_MspInit+0x14c>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	4a2d      	ldr	r2, [pc, #180]	; (800222c <BSP_AUDIO_IN_MspInit+0x14c>)
 8002178:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800217c:	6313      	str	r3, [r2, #48]	; 0x30
 800217e:	4b2b      	ldr	r3, [pc, #172]	; (800222c <BSP_AUDIO_IN_MspInit+0x14c>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	68fb      	ldr	r3, [r7, #12]
    
  if(hsai->Instance == AUDIO_IN_SAIx)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a2a      	ldr	r2, [pc, #168]	; (8002238 <BSP_AUDIO_IN_MspInit+0x158>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d137      	bne.n	8002204 <BSP_AUDIO_IN_MspInit+0x124>
  {
    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 8002194:	4b29      	ldr	r3, [pc, #164]	; (800223c <BSP_AUDIO_IN_MspInit+0x15c>)
 8002196:	2200      	movs	r2, #0
 8002198:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 800219a:	4b28      	ldr	r3, [pc, #160]	; (800223c <BSP_AUDIO_IN_MspInit+0x15c>)
 800219c:	2200      	movs	r2, #0
 800219e:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80021a0:	4b26      	ldr	r3, [pc, #152]	; (800223c <BSP_AUDIO_IN_MspInit+0x15c>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 80021a6:	4b25      	ldr	r3, [pc, #148]	; (800223c <BSP_AUDIO_IN_MspInit+0x15c>)
 80021a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021ac:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 80021ae:	4b23      	ldr	r3, [pc, #140]	; (800223c <BSP_AUDIO_IN_MspInit+0x15c>)
 80021b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021b4:	615a      	str	r2, [r3, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 80021b6:	4b21      	ldr	r3, [pc, #132]	; (800223c <BSP_AUDIO_IN_MspInit+0x15c>)
 80021b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021bc:	619a      	str	r2, [r3, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 80021be:	4b1f      	ldr	r3, [pc, #124]	; (800223c <BSP_AUDIO_IN_MspInit+0x15c>)
 80021c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021c4:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 80021c6:	4b1d      	ldr	r3, [pc, #116]	; (800223c <BSP_AUDIO_IN_MspInit+0x15c>)
 80021c8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021cc:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80021ce:	4b1b      	ldr	r3, [pc, #108]	; (800223c <BSP_AUDIO_IN_MspInit+0x15c>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80021d4:	4b19      	ldr	r3, [pc, #100]	; (800223c <BSP_AUDIO_IN_MspInit+0x15c>)
 80021d6:	2203      	movs	r2, #3
 80021d8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80021da:	4b18      	ldr	r3, [pc, #96]	; (800223c <BSP_AUDIO_IN_MspInit+0x15c>)
 80021dc:	2200      	movs	r2, #0
 80021de:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 80021e0:	4b16      	ldr	r3, [pc, #88]	; (800223c <BSP_AUDIO_IN_MspInit+0x15c>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	631a      	str	r2, [r3, #48]	; 0x30
    
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 80021e6:	4b15      	ldr	r3, [pc, #84]	; (800223c <BSP_AUDIO_IN_MspInit+0x15c>)
 80021e8:	4a15      	ldr	r2, [pc, #84]	; (8002240 <BSP_AUDIO_IN_MspInit+0x160>)
 80021ea:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a13      	ldr	r2, [pc, #76]	; (800223c <BSP_AUDIO_IN_MspInit+0x15c>)
 80021f0:	671a      	str	r2, [r3, #112]	; 0x70
 80021f2:	4a12      	ldr	r2, [pc, #72]	; (800223c <BSP_AUDIO_IN_MspInit+0x15c>)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 80021f8:	4810      	ldr	r0, [pc, #64]	; (800223c <BSP_AUDIO_IN_MspInit+0x15c>)
 80021fa:	f000 fff7 	bl	80031ec <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 80021fe:	480f      	ldr	r0, [pc, #60]	; (800223c <BSP_AUDIO_IN_MspInit+0x15c>)
 8002200:	f000 ff46 	bl	8003090 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8002204:	2200      	movs	r2, #0
 8002206:	210f      	movs	r1, #15
 8002208:	2046      	movs	r0, #70	; 0x46
 800220a:	f000 ff16 	bl	800303a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 800220e:	2046      	movs	r0, #70	; 0x46
 8002210:	f000 ff2f 	bl	8003072 <HAL_NVIC_EnableIRQ>

  /* Audio INT IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8002214:	2200      	movs	r2, #0
 8002216:	210f      	movs	r1, #15
 8002218:	2028      	movs	r0, #40	; 0x28
 800221a:	f000 ff0e 	bl	800303a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 800221e:	2028      	movs	r0, #40	; 0x28
 8002220:	f000 ff27 	bl	8003072 <HAL_NVIC_EnableIRQ>
}
 8002224:	bf00      	nop
 8002226:	3730      	adds	r7, #48	; 0x30
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40023800 	.word	0x40023800
 8002230:	40021800 	.word	0x40021800
 8002234:	40021c00 	.word	0x40021c00
 8002238:	40015c24 	.word	0x40015c24
 800223c:	20000278 	.word	0x20000278
 8002240:	400264b8 	.word	0x400264b8

08002244 <SAIx_In_Init>:
  * @param  SlotActive: CODEC_AUDIOFRAME_SLOT_02 or CODEC_AUDIOFRAME_SLOT_13
  * @param  AudioFreq: Audio frequency to be configured for the SAI peripheral.
  * @retval None
  */
static void SAIx_In_Init(uint32_t SaiOutMode, uint32_t SlotActive, uint32_t AudioFreq)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
  /* Initialize SAI2 block A in MASTER RX */
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8002250:	4b53      	ldr	r3, [pc, #332]	; (80023a0 <SAIx_In_Init+0x15c>)
 8002252:	4a54      	ldr	r2, [pc, #336]	; (80023a4 <SAIx_In_Init+0x160>)
 8002254:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8002256:	4b52      	ldr	r3, [pc, #328]	; (80023a0 <SAIx_In_Init+0x15c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	4b50      	ldr	r3, [pc, #320]	; (80023a0 <SAIx_In_Init+0x15c>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002264:	601a      	str	r2, [r3, #0]

  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8002266:	4a4e      	ldr	r2, [pc, #312]	; (80023a0 <SAIx_In_Init+0x15c>)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	61d3      	str	r3, [r2, #28]
  haudio_out_sai.Init.AudioMode = SaiOutMode;
 800226c:	4a4c      	ldr	r2, [pc, #304]	; (80023a0 <SAIx_In_Init+0x15c>)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6053      	str	r3, [r2, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8002272:	4b4b      	ldr	r3, [pc, #300]	; (80023a0 <SAIx_In_Init+0x15c>)
 8002274:	2200      	movs	r2, #0
 8002276:	615a      	str	r2, [r3, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8002278:	4b49      	ldr	r3, [pc, #292]	; (80023a0 <SAIx_In_Init+0x15c>)
 800227a:	2200      	movs	r2, #0
 800227c:	631a      	str	r2, [r3, #48]	; 0x30
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 800227e:	4b48      	ldr	r3, [pc, #288]	; (80023a0 <SAIx_In_Init+0x15c>)
 8002280:	2280      	movs	r2, #128	; 0x80
 8002282:	635a      	str	r2, [r3, #52]	; 0x34
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002284:	4b46      	ldr	r3, [pc, #280]	; (80023a0 <SAIx_In_Init+0x15c>)
 8002286:	2200      	movs	r2, #0
 8002288:	639a      	str	r2, [r3, #56]	; 0x38
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 800228a:	4b45      	ldr	r3, [pc, #276]	; (80023a0 <SAIx_In_Init+0x15c>)
 800228c:	2201      	movs	r2, #1
 800228e:	63da      	str	r2, [r3, #60]	; 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 8002290:	4b43      	ldr	r3, [pc, #268]	; (80023a0 <SAIx_In_Init+0x15c>)
 8002292:	2200      	movs	r2, #0
 8002294:	609a      	str	r2, [r3, #8]
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 8002296:	4b42      	ldr	r3, [pc, #264]	; (80023a0 <SAIx_In_Init+0x15c>)
 8002298:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800229c:	611a      	str	r2, [r3, #16]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 800229e:	4b40      	ldr	r3, [pc, #256]	; (80023a0 <SAIx_In_Init+0x15c>)
 80022a0:	2201      	movs	r2, #1
 80022a2:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_out_sai.FrameInit.FrameLength = 64;
 80022a4:	4b3e      	ldr	r3, [pc, #248]	; (80023a0 <SAIx_In_Init+0x15c>)
 80022a6:	2240      	movs	r2, #64	; 0x40
 80022a8:	641a      	str	r2, [r3, #64]	; 0x40
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 80022aa:	4b3d      	ldr	r3, [pc, #244]	; (80023a0 <SAIx_In_Init+0x15c>)
 80022ac:	2220      	movs	r2, #32
 80022ae:	645a      	str	r2, [r3, #68]	; 0x44
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 80022b0:	4b3b      	ldr	r3, [pc, #236]	; (80023a0 <SAIx_In_Init+0x15c>)
 80022b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80022b6:	649a      	str	r2, [r3, #72]	; 0x48
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80022b8:	4b39      	ldr	r3, [pc, #228]	; (80023a0 <SAIx_In_Init+0x15c>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	64da      	str	r2, [r3, #76]	; 0x4c
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 80022be:	4b38      	ldr	r3, [pc, #224]	; (80023a0 <SAIx_In_Init+0x15c>)
 80022c0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80022c4:	651a      	str	r2, [r3, #80]	; 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot actives */
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 80022c6:	4b36      	ldr	r3, [pc, #216]	; (80023a0 <SAIx_In_Init+0x15c>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	655a      	str	r2, [r3, #84]	; 0x54
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80022cc:	4b34      	ldr	r3, [pc, #208]	; (80023a0 <SAIx_In_Init+0x15c>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	659a      	str	r2, [r3, #88]	; 0x58
  haudio_out_sai.SlotInit.SlotNumber = 4;
 80022d2:	4b33      	ldr	r3, [pc, #204]	; (80023a0 <SAIx_In_Init+0x15c>)
 80022d4:	2204      	movs	r2, #4
 80022d6:	65da      	str	r2, [r3, #92]	; 0x5c
  haudio_out_sai.SlotInit.SlotActive = SlotActive;
 80022d8:	4a31      	ldr	r2, [pc, #196]	; (80023a0 <SAIx_In_Init+0x15c>)
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	6613      	str	r3, [r2, #96]	; 0x60

  HAL_SAI_Init(&haudio_out_sai);
 80022de:	4830      	ldr	r0, [pc, #192]	; (80023a0 <SAIx_In_Init+0x15c>)
 80022e0:	f003 f8bc 	bl	800545c <HAL_SAI_Init>

  /* Initialize SAI2 block B in SLAVE RX synchronous from SAI2 block A */
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80022e4:	4b30      	ldr	r3, [pc, #192]	; (80023a8 <SAIx_In_Init+0x164>)
 80022e6:	4a31      	ldr	r2, [pc, #196]	; (80023ac <SAIx_In_Init+0x168>)
 80022e8:	601a      	str	r2, [r3, #0]
  
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 80022ea:	4b2f      	ldr	r3, [pc, #188]	; (80023a8 <SAIx_In_Init+0x164>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	4b2d      	ldr	r3, [pc, #180]	; (80023a8 <SAIx_In_Init+0x164>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80022f8:	601a      	str	r2, [r3, #0]
  
  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
 80022fa:	4a2b      	ldr	r2, [pc, #172]	; (80023a8 <SAIx_In_Init+0x164>)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	61d3      	str	r3, [r2, #28]
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 8002300:	4b29      	ldr	r3, [pc, #164]	; (80023a8 <SAIx_In_Init+0x164>)
 8002302:	2203      	movs	r2, #3
 8002304:	605a      	str	r2, [r3, #4]
  haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8002306:	4b28      	ldr	r3, [pc, #160]	; (80023a8 <SAIx_In_Init+0x164>)
 8002308:	2200      	movs	r2, #0
 800230a:	615a      	str	r2, [r3, #20]
  haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 800230c:	4b26      	ldr	r3, [pc, #152]	; (80023a8 <SAIx_In_Init+0x164>)
 800230e:	2200      	movs	r2, #0
 8002310:	631a      	str	r2, [r3, #48]	; 0x30
  haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
 8002312:	4b25      	ldr	r3, [pc, #148]	; (80023a8 <SAIx_In_Init+0x164>)
 8002314:	2280      	movs	r2, #128	; 0x80
 8002316:	635a      	str	r2, [r3, #52]	; 0x34
  haudio_in_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002318:	4b23      	ldr	r3, [pc, #140]	; (80023a8 <SAIx_In_Init+0x164>)
 800231a:	2200      	movs	r2, #0
 800231c:	639a      	str	r2, [r3, #56]	; 0x38
  haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 800231e:	4b22      	ldr	r3, [pc, #136]	; (80023a8 <SAIx_In_Init+0x164>)
 8002320:	2201      	movs	r2, #1
 8002322:	63da      	str	r2, [r3, #60]	; 0x3c
  haudio_in_sai.Init.Synchro = SAI_SYNCHRONOUS;
 8002324:	4b20      	ldr	r3, [pc, #128]	; (80023a8 <SAIx_In_Init+0x164>)
 8002326:	2201      	movs	r2, #1
 8002328:	609a      	str	r2, [r3, #8]
  haudio_in_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLED;
 800232a:	4b1f      	ldr	r3, [pc, #124]	; (80023a8 <SAIx_In_Init+0x164>)
 800232c:	2200      	movs	r2, #0
 800232e:	611a      	str	r2, [r3, #16]
  haudio_in_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8002330:	4b1d      	ldr	r3, [pc, #116]	; (80023a8 <SAIx_In_Init+0x164>)
 8002332:	2201      	movs	r2, #1
 8002334:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_in_sai.FrameInit.FrameLength = 64;
 8002336:	4b1c      	ldr	r3, [pc, #112]	; (80023a8 <SAIx_In_Init+0x164>)
 8002338:	2240      	movs	r2, #64	; 0x40
 800233a:	641a      	str	r2, [r3, #64]	; 0x40
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 800233c:	4b1a      	ldr	r3, [pc, #104]	; (80023a8 <SAIx_In_Init+0x164>)
 800233e:	2220      	movs	r2, #32
 8002340:	645a      	str	r2, [r3, #68]	; 0x44
  haudio_in_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8002342:	4b19      	ldr	r3, [pc, #100]	; (80023a8 <SAIx_In_Init+0x164>)
 8002344:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002348:	649a      	str	r2, [r3, #72]	; 0x48
  haudio_in_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800234a:	4b17      	ldr	r3, [pc, #92]	; (80023a8 <SAIx_In_Init+0x164>)
 800234c:	2200      	movs	r2, #0
 800234e:	64da      	str	r2, [r3, #76]	; 0x4c
  haudio_in_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8002350:	4b15      	ldr	r3, [pc, #84]	; (80023a8 <SAIx_In_Init+0x164>)
 8002352:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002356:	651a      	str	r2, [r3, #80]	; 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot active */
  haudio_in_sai.SlotInit.FirstBitOffset = 0;
 8002358:	4b13      	ldr	r3, [pc, #76]	; (80023a8 <SAIx_In_Init+0x164>)
 800235a:	2200      	movs	r2, #0
 800235c:	655a      	str	r2, [r3, #84]	; 0x54
  haudio_in_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800235e:	4b12      	ldr	r3, [pc, #72]	; (80023a8 <SAIx_In_Init+0x164>)
 8002360:	2200      	movs	r2, #0
 8002362:	659a      	str	r2, [r3, #88]	; 0x58
  haudio_in_sai.SlotInit.SlotNumber = 4;
 8002364:	4b10      	ldr	r3, [pc, #64]	; (80023a8 <SAIx_In_Init+0x164>)
 8002366:	2204      	movs	r2, #4
 8002368:	65da      	str	r2, [r3, #92]	; 0x5c
  haudio_in_sai.SlotInit.SlotActive = SlotActive;
 800236a:	4a0f      	ldr	r2, [pc, #60]	; (80023a8 <SAIx_In_Init+0x164>)
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	6613      	str	r3, [r2, #96]	; 0x60

  HAL_SAI_Init(&haudio_in_sai);
 8002370:	480d      	ldr	r0, [pc, #52]	; (80023a8 <SAIx_In_Init+0x164>)
 8002372:	f003 f873 	bl	800545c <HAL_SAI_Init>

  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8002376:	4b0a      	ldr	r3, [pc, #40]	; (80023a0 <SAIx_In_Init+0x15c>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	4b08      	ldr	r3, [pc, #32]	; (80023a0 <SAIx_In_Init+0x15c>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002384:	601a      	str	r2, [r3, #0]

  /* Enable SAI peripheral */
  __HAL_SAI_ENABLE(&haudio_in_sai);
 8002386:	4b08      	ldr	r3, [pc, #32]	; (80023a8 <SAIx_In_Init+0x164>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <SAIx_In_Init+0x164>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002394:	601a      	str	r2, [r3, #0]
}
 8002396:	bf00      	nop
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	20000110 	.word	0x20000110
 80023a4:	40015c04 	.word	0x40015c04
 80023a8:	20000194 	.word	0x20000194
 80023ac:	40015c24 	.word	0x40015c24

080023b0 <SAIx_In_DeInit>:
/**
  * @brief  Deinitializes the output Audio Codec audio interface (SAI).
  * @retval None
  */
static void SAIx_In_DeInit(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80023b4:	4b07      	ldr	r3, [pc, #28]	; (80023d4 <SAIx_In_DeInit+0x24>)
 80023b6:	4a08      	ldr	r2, [pc, #32]	; (80023d8 <SAIx_In_DeInit+0x28>)
 80023b8:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 80023ba:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <SAIx_In_DeInit+0x24>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	4b04      	ldr	r3, [pc, #16]	; (80023d4 <SAIx_In_DeInit+0x24>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80023c8:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_in_sai);
 80023ca:	4802      	ldr	r0, [pc, #8]	; (80023d4 <SAIx_In_DeInit+0x24>)
 80023cc:	f003 f9c4 	bl	8005758 <HAL_SAI_DeInit>
}
 80023d0:	bf00      	nop
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	20000194 	.word	0x20000194
 80023d8:	40015c24 	.word	0x40015c24

080023dc <DMA2_Stream7_IRQHandler>:
  * @brief This function handles DMA2 Stream 7 interrupt request.
  * @param None
  * @retval None
  */
void AUDIO_IN_SAIx_DMAx_IRQHandler(void) // MBED
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 80023e0:	4b03      	ldr	r3, [pc, #12]	; (80023f0 <DMA2_Stream7_IRQHandler+0x14>)
 80023e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e4:	4618      	mov	r0, r3
 80023e6:	f000 ffbf 	bl	8003368 <HAL_DMA_IRQHandler>
}
 80023ea:	bf00      	nop
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20000194 	.word	0x20000194

080023f4 <DMA2_Stream4_IRQHandler>:
  * @brief  This function handles DMA2 Stream 6 interrupt request.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_SAIx_DMAx_IRQHandler(void) // MBED
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 80023f8:	4b03      	ldr	r3, [pc, #12]	; (8002408 <DMA2_Stream4_IRQHandler+0x14>)
 80023fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023fc:	4618      	mov	r0, r3
 80023fe:	f000 ffb3 	bl	8003368 <HAL_DMA_IRQHandler>
}
 8002402:	bf00      	nop
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	20000110 	.word	0x20000110

0800240c <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002410:	4b29      	ldr	r3, [pc, #164]	; (80024b8 <BSP_SDRAM_Init+0xac>)
 8002412:	4a2a      	ldr	r2, [pc, #168]	; (80024bc <BSP_SDRAM_Init+0xb0>)
 8002414:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8002416:	4b2a      	ldr	r3, [pc, #168]	; (80024c0 <BSP_SDRAM_Init+0xb4>)
 8002418:	2202      	movs	r2, #2
 800241a:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 800241c:	4b28      	ldr	r3, [pc, #160]	; (80024c0 <BSP_SDRAM_Init+0xb4>)
 800241e:	2207      	movs	r2, #7
 8002420:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8002422:	4b27      	ldr	r3, [pc, #156]	; (80024c0 <BSP_SDRAM_Init+0xb4>)
 8002424:	2204      	movs	r2, #4
 8002426:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8002428:	4b25      	ldr	r3, [pc, #148]	; (80024c0 <BSP_SDRAM_Init+0xb4>)
 800242a:	2207      	movs	r2, #7
 800242c:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 800242e:	4b24      	ldr	r3, [pc, #144]	; (80024c0 <BSP_SDRAM_Init+0xb4>)
 8002430:	2202      	movs	r2, #2
 8002432:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8002434:	4b22      	ldr	r3, [pc, #136]	; (80024c0 <BSP_SDRAM_Init+0xb4>)
 8002436:	2202      	movs	r2, #2
 8002438:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 800243a:	4b21      	ldr	r3, [pc, #132]	; (80024c0 <BSP_SDRAM_Init+0xb4>)
 800243c:	2202      	movs	r2, #2
 800243e:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8002440:	4b1d      	ldr	r3, [pc, #116]	; (80024b8 <BSP_SDRAM_Init+0xac>)
 8002442:	2200      	movs	r2, #0
 8002444:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002446:	4b1c      	ldr	r3, [pc, #112]	; (80024b8 <BSP_SDRAM_Init+0xac>)
 8002448:	2200      	movs	r2, #0
 800244a:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800244c:	4b1a      	ldr	r3, [pc, #104]	; (80024b8 <BSP_SDRAM_Init+0xac>)
 800244e:	2204      	movs	r2, #4
 8002450:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002452:	4b19      	ldr	r3, [pc, #100]	; (80024b8 <BSP_SDRAM_Init+0xac>)
 8002454:	2210      	movs	r2, #16
 8002456:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002458:	4b17      	ldr	r3, [pc, #92]	; (80024b8 <BSP_SDRAM_Init+0xac>)
 800245a:	2240      	movs	r2, #64	; 0x40
 800245c:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 800245e:	4b16      	ldr	r3, [pc, #88]	; (80024b8 <BSP_SDRAM_Init+0xac>)
 8002460:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002464:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002466:	4b14      	ldr	r3, [pc, #80]	; (80024b8 <BSP_SDRAM_Init+0xac>)
 8002468:	2200      	movs	r2, #0
 800246a:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800246c:	4b12      	ldr	r3, [pc, #72]	; (80024b8 <BSP_SDRAM_Init+0xac>)
 800246e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002472:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8002474:	4b10      	ldr	r3, [pc, #64]	; (80024b8 <BSP_SDRAM_Init+0xac>)
 8002476:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800247a:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800247c:	4b0e      	ldr	r3, [pc, #56]	; (80024b8 <BSP_SDRAM_Init+0xac>)
 800247e:	2200      	movs	r2, #0
 8002480:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8002482:	2100      	movs	r1, #0
 8002484:	480c      	ldr	r0, [pc, #48]	; (80024b8 <BSP_SDRAM_Init+0xac>)
 8002486:	f000 f87f 	bl	8002588 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800248a:	490d      	ldr	r1, [pc, #52]	; (80024c0 <BSP_SDRAM_Init+0xb4>)
 800248c:	480a      	ldr	r0, [pc, #40]	; (80024b8 <BSP_SDRAM_Init+0xac>)
 800248e:	f003 fc02 	bl	8005c96 <HAL_SDRAM_Init>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d003      	beq.n	80024a0 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002498:	4b0a      	ldr	r3, [pc, #40]	; (80024c4 <BSP_SDRAM_Init+0xb8>)
 800249a:	2201      	movs	r2, #1
 800249c:	701a      	strb	r2, [r3, #0]
 800249e:	e002      	b.n	80024a6 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80024a0:	4b08      	ldr	r3, [pc, #32]	; (80024c4 <BSP_SDRAM_Init+0xb8>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80024a6:	f240 6003 	movw	r0, #1539	; 0x603
 80024aa:	f000 f80d 	bl	80024c8 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80024ae:	4b05      	ldr	r3, [pc, #20]	; (80024c4 <BSP_SDRAM_Init+0xb8>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	200003cc 	.word	0x200003cc
 80024bc:	a0000140 	.word	0xa0000140
 80024c0:	200002d8 	.word	0x200002d8
 80024c4:	20000031 	.word	0x20000031

080024c8 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80024d0:	2300      	movs	r3, #0
 80024d2:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80024d4:	4b2a      	ldr	r3, [pc, #168]	; (8002580 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80024d6:	2201      	movs	r2, #1
 80024d8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80024da:	4b29      	ldr	r3, [pc, #164]	; (8002580 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80024dc:	2210      	movs	r2, #16
 80024de:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80024e0:	4b27      	ldr	r3, [pc, #156]	; (8002580 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80024e2:	2201      	movs	r2, #1
 80024e4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80024e6:	4b26      	ldr	r3, [pc, #152]	; (8002580 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80024ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024f0:	4923      	ldr	r1, [pc, #140]	; (8002580 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80024f2:	4824      	ldr	r0, [pc, #144]	; (8002584 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80024f4:	f003 fc03 	bl	8005cfe <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80024f8:	2001      	movs	r0, #1
 80024fa:	f000 fcf1 	bl	8002ee0 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80024fe:	4b20      	ldr	r3, [pc, #128]	; (8002580 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002500:	2202      	movs	r2, #2
 8002502:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002504:	4b1e      	ldr	r3, [pc, #120]	; (8002580 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002506:	2210      	movs	r2, #16
 8002508:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800250a:	4b1d      	ldr	r3, [pc, #116]	; (8002580 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800250c:	2201      	movs	r2, #1
 800250e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002510:	4b1b      	ldr	r3, [pc, #108]	; (8002580 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002512:	2200      	movs	r2, #0
 8002514:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8002516:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800251a:	4919      	ldr	r1, [pc, #100]	; (8002580 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800251c:	4819      	ldr	r0, [pc, #100]	; (8002584 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800251e:	f003 fbee 	bl	8005cfe <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002522:	4b17      	ldr	r3, [pc, #92]	; (8002580 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002524:	2203      	movs	r2, #3
 8002526:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002528:	4b15      	ldr	r3, [pc, #84]	; (8002580 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800252a:	2210      	movs	r2, #16
 800252c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800252e:	4b14      	ldr	r3, [pc, #80]	; (8002580 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002530:	2208      	movs	r2, #8
 8002532:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002534:	4b12      	ldr	r3, [pc, #72]	; (8002580 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002536:	2200      	movs	r2, #0
 8002538:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800253a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800253e:	4910      	ldr	r1, [pc, #64]	; (8002580 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002540:	4810      	ldr	r0, [pc, #64]	; (8002584 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002542:	f003 fbdc 	bl	8005cfe <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8002546:	f44f 7308 	mov.w	r3, #544	; 0x220
 800254a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800254c:	4b0c      	ldr	r3, [pc, #48]	; (8002580 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800254e:	2204      	movs	r2, #4
 8002550:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002552:	4b0b      	ldr	r3, [pc, #44]	; (8002580 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002554:	2210      	movs	r2, #16
 8002556:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002558:	4b09      	ldr	r3, [pc, #36]	; (8002580 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800255a:	2201      	movs	r2, #1
 800255c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	4a07      	ldr	r2, [pc, #28]	; (8002580 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002562:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002564:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002568:	4905      	ldr	r1, [pc, #20]	; (8002580 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800256a:	4806      	ldr	r0, [pc, #24]	; (8002584 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800256c:	f003 fbc7 	bl	8005cfe <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8002570:	6879      	ldr	r1, [r7, #4]
 8002572:	4804      	ldr	r0, [pc, #16]	; (8002584 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002574:	f003 fbee 	bl	8005d54 <HAL_SDRAM_ProgramRefreshRate>
}
 8002578:	bf00      	nop
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	200002f4 	.word	0x200002f4
 8002584:	200003cc 	.word	0x200003cc

08002588 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8002588:	b580      	push	{r7, lr}
 800258a:	b090      	sub	sp, #64	; 0x40
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002592:	4b70      	ldr	r3, [pc, #448]	; (8002754 <BSP_SDRAM_MspInit+0x1cc>)
 8002594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002596:	4a6f      	ldr	r2, [pc, #444]	; (8002754 <BSP_SDRAM_MspInit+0x1cc>)
 8002598:	f043 0301 	orr.w	r3, r3, #1
 800259c:	6393      	str	r3, [r2, #56]	; 0x38
 800259e:	4b6d      	ldr	r3, [pc, #436]	; (8002754 <BSP_SDRAM_MspInit+0x1cc>)
 80025a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80025a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80025aa:	4b6a      	ldr	r3, [pc, #424]	; (8002754 <BSP_SDRAM_MspInit+0x1cc>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ae:	4a69      	ldr	r2, [pc, #420]	; (8002754 <BSP_SDRAM_MspInit+0x1cc>)
 80025b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025b4:	6313      	str	r3, [r2, #48]	; 0x30
 80025b6:	4b67      	ldr	r3, [pc, #412]	; (8002754 <BSP_SDRAM_MspInit+0x1cc>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025be:	627b      	str	r3, [r7, #36]	; 0x24
 80025c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025c2:	4b64      	ldr	r3, [pc, #400]	; (8002754 <BSP_SDRAM_MspInit+0x1cc>)
 80025c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c6:	4a63      	ldr	r2, [pc, #396]	; (8002754 <BSP_SDRAM_MspInit+0x1cc>)
 80025c8:	f043 0304 	orr.w	r3, r3, #4
 80025cc:	6313      	str	r3, [r2, #48]	; 0x30
 80025ce:	4b61      	ldr	r3, [pc, #388]	; (8002754 <BSP_SDRAM_MspInit+0x1cc>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	f003 0304 	and.w	r3, r3, #4
 80025d6:	623b      	str	r3, [r7, #32]
 80025d8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025da:	4b5e      	ldr	r3, [pc, #376]	; (8002754 <BSP_SDRAM_MspInit+0x1cc>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	4a5d      	ldr	r2, [pc, #372]	; (8002754 <BSP_SDRAM_MspInit+0x1cc>)
 80025e0:	f043 0308 	orr.w	r3, r3, #8
 80025e4:	6313      	str	r3, [r2, #48]	; 0x30
 80025e6:	4b5b      	ldr	r3, [pc, #364]	; (8002754 <BSP_SDRAM_MspInit+0x1cc>)
 80025e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ea:	f003 0308 	and.w	r3, r3, #8
 80025ee:	61fb      	str	r3, [r7, #28]
 80025f0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80025f2:	4b58      	ldr	r3, [pc, #352]	; (8002754 <BSP_SDRAM_MspInit+0x1cc>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	4a57      	ldr	r2, [pc, #348]	; (8002754 <BSP_SDRAM_MspInit+0x1cc>)
 80025f8:	f043 0310 	orr.w	r3, r3, #16
 80025fc:	6313      	str	r3, [r2, #48]	; 0x30
 80025fe:	4b55      	ldr	r3, [pc, #340]	; (8002754 <BSP_SDRAM_MspInit+0x1cc>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	f003 0310 	and.w	r3, r3, #16
 8002606:	61bb      	str	r3, [r7, #24]
 8002608:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800260a:	4b52      	ldr	r3, [pc, #328]	; (8002754 <BSP_SDRAM_MspInit+0x1cc>)
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260e:	4a51      	ldr	r2, [pc, #324]	; (8002754 <BSP_SDRAM_MspInit+0x1cc>)
 8002610:	f043 0320 	orr.w	r3, r3, #32
 8002614:	6313      	str	r3, [r2, #48]	; 0x30
 8002616:	4b4f      	ldr	r3, [pc, #316]	; (8002754 <BSP_SDRAM_MspInit+0x1cc>)
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	f003 0320 	and.w	r3, r3, #32
 800261e:	617b      	str	r3, [r7, #20]
 8002620:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002622:	4b4c      	ldr	r3, [pc, #304]	; (8002754 <BSP_SDRAM_MspInit+0x1cc>)
 8002624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002626:	4a4b      	ldr	r2, [pc, #300]	; (8002754 <BSP_SDRAM_MspInit+0x1cc>)
 8002628:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800262c:	6313      	str	r3, [r2, #48]	; 0x30
 800262e:	4b49      	ldr	r3, [pc, #292]	; (8002754 <BSP_SDRAM_MspInit+0x1cc>)
 8002630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002636:	613b      	str	r3, [r7, #16]
 8002638:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800263a:	4b46      	ldr	r3, [pc, #280]	; (8002754 <BSP_SDRAM_MspInit+0x1cc>)
 800263c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263e:	4a45      	ldr	r2, [pc, #276]	; (8002754 <BSP_SDRAM_MspInit+0x1cc>)
 8002640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002644:	6313      	str	r3, [r2, #48]	; 0x30
 8002646:	4b43      	ldr	r3, [pc, #268]	; (8002754 <BSP_SDRAM_MspInit+0x1cc>)
 8002648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800264e:	60fb      	str	r3, [r7, #12]
 8002650:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002652:	2302      	movs	r3, #2
 8002654:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002656:	2301      	movs	r3, #1
 8002658:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800265a:	2302      	movs	r3, #2
 800265c:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800265e:	230c      	movs	r3, #12
 8002660:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8002662:	2308      	movs	r3, #8
 8002664:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8002666:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800266a:	4619      	mov	r1, r3
 800266c:	483a      	ldr	r0, [pc, #232]	; (8002758 <BSP_SDRAM_MspInit+0x1d0>)
 800266e:	f001 f8e5 	bl	800383c <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8002672:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002676:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002678:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800267c:	4619      	mov	r1, r3
 800267e:	4837      	ldr	r0, [pc, #220]	; (800275c <BSP_SDRAM_MspInit+0x1d4>)
 8002680:	f001 f8dc 	bl	800383c <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8002684:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002688:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800268a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800268e:	4619      	mov	r1, r3
 8002690:	4833      	ldr	r0, [pc, #204]	; (8002760 <BSP_SDRAM_MspInit+0x1d8>)
 8002692:	f001 f8d3 	bl	800383c <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8002696:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800269a:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800269c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026a0:	4619      	mov	r1, r3
 80026a2:	4830      	ldr	r0, [pc, #192]	; (8002764 <BSP_SDRAM_MspInit+0x1dc>)
 80026a4:	f001 f8ca 	bl	800383c <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80026a8:	f248 1333 	movw	r3, #33075	; 0x8133
 80026ac:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80026ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026b2:	4619      	mov	r1, r3
 80026b4:	482c      	ldr	r0, [pc, #176]	; (8002768 <BSP_SDRAM_MspInit+0x1e0>)
 80026b6:	f001 f8c1 	bl	800383c <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 80026ba:	2328      	movs	r3, #40	; 0x28
 80026bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80026be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026c2:	4619      	mov	r1, r3
 80026c4:	4829      	ldr	r0, [pc, #164]	; (800276c <BSP_SDRAM_MspInit+0x1e4>)
 80026c6:	f001 f8b9 	bl	800383c <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80026ca:	4b29      	ldr	r3, [pc, #164]	; (8002770 <BSP_SDRAM_MspInit+0x1e8>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80026d0:	4b27      	ldr	r3, [pc, #156]	; (8002770 <BSP_SDRAM_MspInit+0x1e8>)
 80026d2:	2280      	movs	r2, #128	; 0x80
 80026d4:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80026d6:	4b26      	ldr	r3, [pc, #152]	; (8002770 <BSP_SDRAM_MspInit+0x1e8>)
 80026d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026dc:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80026de:	4b24      	ldr	r3, [pc, #144]	; (8002770 <BSP_SDRAM_MspInit+0x1e8>)
 80026e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026e4:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80026e6:	4b22      	ldr	r3, [pc, #136]	; (8002770 <BSP_SDRAM_MspInit+0x1e8>)
 80026e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026ec:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80026ee:	4b20      	ldr	r3, [pc, #128]	; (8002770 <BSP_SDRAM_MspInit+0x1e8>)
 80026f0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80026f4:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 80026f6:	4b1e      	ldr	r3, [pc, #120]	; (8002770 <BSP_SDRAM_MspInit+0x1e8>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80026fc:	4b1c      	ldr	r3, [pc, #112]	; (8002770 <BSP_SDRAM_MspInit+0x1e8>)
 80026fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002702:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8002704:	4b1a      	ldr	r3, [pc, #104]	; (8002770 <BSP_SDRAM_MspInit+0x1e8>)
 8002706:	2200      	movs	r2, #0
 8002708:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800270a:	4b19      	ldr	r3, [pc, #100]	; (8002770 <BSP_SDRAM_MspInit+0x1e8>)
 800270c:	2203      	movs	r2, #3
 800270e:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002710:	4b17      	ldr	r3, [pc, #92]	; (8002770 <BSP_SDRAM_MspInit+0x1e8>)
 8002712:	2200      	movs	r2, #0
 8002714:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002716:	4b16      	ldr	r3, [pc, #88]	; (8002770 <BSP_SDRAM_MspInit+0x1e8>)
 8002718:	2200      	movs	r2, #0
 800271a:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 800271c:	4b14      	ldr	r3, [pc, #80]	; (8002770 <BSP_SDRAM_MspInit+0x1e8>)
 800271e:	4a15      	ldr	r2, [pc, #84]	; (8002774 <BSP_SDRAM_MspInit+0x1ec>)
 8002720:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a12      	ldr	r2, [pc, #72]	; (8002770 <BSP_SDRAM_MspInit+0x1e8>)
 8002726:	631a      	str	r2, [r3, #48]	; 0x30
 8002728:	4a11      	ldr	r2, [pc, #68]	; (8002770 <BSP_SDRAM_MspInit+0x1e8>)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800272e:	4810      	ldr	r0, [pc, #64]	; (8002770 <BSP_SDRAM_MspInit+0x1e8>)
 8002730:	f000 fd5c 	bl	80031ec <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8002734:	480e      	ldr	r0, [pc, #56]	; (8002770 <BSP_SDRAM_MspInit+0x1e8>)
 8002736:	f000 fcab 	bl	8003090 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800273a:	2200      	movs	r2, #0
 800273c:	210f      	movs	r1, #15
 800273e:	2038      	movs	r0, #56	; 0x38
 8002740:	f000 fc7b 	bl	800303a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002744:	2038      	movs	r0, #56	; 0x38
 8002746:	f000 fc94 	bl	8003072 <HAL_NVIC_EnableIRQ>
}
 800274a:	bf00      	nop
 800274c:	3740      	adds	r7, #64	; 0x40
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40023800 	.word	0x40023800
 8002758:	40020800 	.word	0x40020800
 800275c:	40020c00 	.word	0x40020c00
 8002760:	40021000 	.word	0x40021000
 8002764:	40021400 	.word	0x40021400
 8002768:	40021800 	.word	0x40021800
 800276c:	40021c00 	.word	0x40021c00
 8002770:	20000304 	.word	0x20000304
 8002774:	40026410 	.word	0x40026410

08002778 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af02      	add	r7, sp, #8
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  /* USER CODE BEGIN 2 */
  printf("\n\nAUDIO LOOPBACK EXAMPLE START:\n");
 800277e:	482e      	ldr	r0, [pc, #184]	; (8002838 <main+0xc0>)
 8002780:	f003 fe50 	bl	8006424 <puts>

  BSP_AUDIO_IN_OUT_Init(INPUT_DEVICE_DIGITAL_MICROPHONE_2, OUTPUT_DEVICE_HEADPHONE, DEFAULT_AUDIO_IN_FREQ, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR);
 8002784:	2302      	movs	r3, #2
 8002786:	9300      	str	r3, [sp, #0]
 8002788:	2310      	movs	r3, #16
 800278a:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800278e:	2102      	movs	r1, #2
 8002790:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002794:	f7ff fbfe 	bl	8001f94 <BSP_AUDIO_IN_OUT_Init>
  printf("AUDIO loop from digital micro (U20 & U21 components on board) to headphone (CN10 jack connector)\n");
 8002798:	4828      	ldr	r0, [pc, #160]	; (800283c <main+0xc4>)
 800279a:	f003 fe43 	bl	8006424 <puts>


  /* Initialize SDRAM buffers */
  BSP_SDRAM_Init();
 800279e:	f7ff fe35 	bl	800240c <BSP_SDRAM_Init>
  memset((uint16_t *)AUDIO_BUFFER_IN, 0, AUDIO_BLOCK_SIZE * 2);
 80027a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027a6:	2100      	movs	r1, #0
 80027a8:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
 80027ac:	f003 fdc4 	bl	8006338 <memset>
  memset((uint16_t *)AUDIO_BUFFER_OUT, 0, AUDIO_BLOCK_SIZE * 2);
 80027b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027b4:	2100      	movs	r1, #0
 80027b6:	4822      	ldr	r0, [pc, #136]	; (8002840 <main+0xc8>)
 80027b8:	f003 fdbe 	bl	8006338 <memset>
  printf("SDRAM init done\n");
 80027bc:	4821      	ldr	r0, [pc, #132]	; (8002844 <main+0xcc>)
 80027be:	f003 fe31 	bl	8006424 <puts>

  audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 80027c2:	4b21      	ldr	r3, [pc, #132]	; (8002848 <main+0xd0>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]

  /* Start Recording */
  if (BSP_AUDIO_IN_Record((uint16_t *)AUDIO_BUFFER_IN, AUDIO_BLOCK_SIZE) != AUDIO_OK) {
 80027c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80027cc:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
 80027d0:	f7ff fc5a 	bl	8002088 <BSP_AUDIO_IN_Record>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d002      	beq.n	80027e0 <main+0x68>
	  printf("BSP_AUDIO_IN_Record error\n");
 80027da:	481c      	ldr	r0, [pc, #112]	; (800284c <main+0xd4>)
 80027dc:	f003 fe22 	bl	8006424 <puts>
  }

  /* Start Playback */
  BSP_AUDIO_OUT_SetAudioFrameSlot(CODEC_AUDIOFRAME_SLOT_02);
 80027e0:	2005      	movs	r0, #5
 80027e2:	f7ff fa37 	bl	8001c54 <BSP_AUDIO_OUT_SetAudioFrameSlot>
  if (BSP_AUDIO_OUT_Play((uint16_t *)AUDIO_BUFFER_OUT, AUDIO_BLOCK_SIZE * 2) != AUDIO_OK) {
 80027e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027ea:	4815      	ldr	r0, [pc, #84]	; (8002840 <main+0xc8>)
 80027ec:	f7ff fa08 	bl	8001c00 <BSP_AUDIO_OUT_Play>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d002      	beq.n	80027fc <main+0x84>
	  printf("BSP_AUDIO_OUT_Play error\n");
 80027f6:	4816      	ldr	r0, [pc, #88]	; (8002850 <main+0xd8>)
 80027f8:	f003 fe14 	bl	8006424 <puts>
  }
  /* USER CODE END 2 */

  while (1) {
      /* Wait end of half block recording */
      while (audio_rec_buffer_state == BUFFER_OFFSET_HALF) {
 80027fc:	bf00      	nop
 80027fe:	4b12      	ldr	r3, [pc, #72]	; (8002848 <main+0xd0>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d0fb      	beq.n	80027fe <main+0x86>
      }
      audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8002806:	4b10      	ldr	r3, [pc, #64]	; (8002848 <main+0xd0>)
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]

      /* Copy recorded 1st half block */
      memcpy((uint16_t *)(AUDIO_BUFFER_OUT), (uint16_t *)(AUDIO_BUFFER_IN), AUDIO_BLOCK_SIZE);
 800280c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002810:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8002814:	480a      	ldr	r0, [pc, #40]	; (8002840 <main+0xc8>)
 8002816:	f003 fd81 	bl	800631c <memcpy>

      /* Wait end of one block recording */
      while (audio_rec_buffer_state == BUFFER_OFFSET_FULL) {
 800281a:	bf00      	nop
 800281c:	4b0a      	ldr	r3, [pc, #40]	; (8002848 <main+0xd0>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2b02      	cmp	r3, #2
 8002822:	d0fb      	beq.n	800281c <main+0xa4>
      }
      audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8002824:	4b08      	ldr	r3, [pc, #32]	; (8002848 <main+0xd0>)
 8002826:	2200      	movs	r2, #0
 8002828:	601a      	str	r2, [r3, #0]

      /* Copy recorded 2nd half block */
      memcpy((uint16_t *)(AUDIO_BUFFER_OUT + (AUDIO_BLOCK_SIZE)), (uint16_t *)(AUDIO_BUFFER_IN + (AUDIO_BLOCK_SIZE)), AUDIO_BLOCK_SIZE);
 800282a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800282e:	4909      	ldr	r1, [pc, #36]	; (8002854 <main+0xdc>)
 8002830:	4809      	ldr	r0, [pc, #36]	; (8002858 <main+0xe0>)
 8002832:	f003 fd73 	bl	800631c <memcpy>
  while (1) {
 8002836:	e7e1      	b.n	80027fc <main+0x84>
 8002838:	08006cec 	.word	0x08006cec
 800283c:	08006d0c 	.word	0x08006d0c
 8002840:	c0000400 	.word	0xc0000400
 8002844:	08006d70 	.word	0x08006d70
 8002848:	20000364 	.word	0x20000364
 800284c:	08006d80 	.word	0x08006d80
 8002850:	08006d9c 	.word	0x08006d9c
 8002854:	c0000200 	.word	0xc0000200
 8002858:	c0000600 	.word	0xc0000600

0800285c <BSP_AUDIO_IN_TransferComplete_CallBack>:
  }
}


void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
    audio_rec_buffer_state = BUFFER_OFFSET_FULL;
 8002860:	4b03      	ldr	r3, [pc, #12]	; (8002870 <BSP_AUDIO_IN_TransferComplete_CallBack+0x14>)
 8002862:	2202      	movs	r2, #2
 8002864:	601a      	str	r2, [r3, #0]
}
 8002866:	bf00      	nop
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	20000364 	.word	0x20000364

08002874 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete interrupt.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
    audio_rec_buffer_state = BUFFER_OFFSET_HALF;
 8002878:	4b03      	ldr	r3, [pc, #12]	; (8002888 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x14>)
 800287a:	2201      	movs	r2, #1
 800287c:	601a      	str	r2, [r3, #0]
}
 800287e:	bf00      	nop
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr
 8002888:	20000364 	.word	0x20000364

0800288c <BSP_AUDIO_IN_Error_CallBack>:
  * @brief  Audio IN Error callback function.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_Error_CallBack(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
    printf("BSP_AUDIO_IN_Error_CallBack\n");
 8002890:	4802      	ldr	r0, [pc, #8]	; (800289c <BSP_AUDIO_IN_Error_CallBack+0x10>)
 8002892:	f003 fdc7 	bl	8006424 <puts>
}
 8002896:	bf00      	nop
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	08006db8 	.word	0x08006db8

080028a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b08c      	sub	sp, #48	; 0x30
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a8:	f107 031c 	add.w	r3, r7, #28
 80028ac:	2200      	movs	r2, #0
 80028ae:	601a      	str	r2, [r3, #0]
 80028b0:	605a      	str	r2, [r3, #4]
 80028b2:	609a      	str	r2, [r3, #8]
 80028b4:	60da      	str	r2, [r3, #12]
 80028b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a2f      	ldr	r2, [pc, #188]	; (800297c <HAL_I2C_MspInit+0xdc>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d129      	bne.n	8002916 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028c2:	4b2f      	ldr	r3, [pc, #188]	; (8002980 <HAL_I2C_MspInit+0xe0>)
 80028c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c6:	4a2e      	ldr	r2, [pc, #184]	; (8002980 <HAL_I2C_MspInit+0xe0>)
 80028c8:	f043 0302 	orr.w	r3, r3, #2
 80028cc:	6313      	str	r3, [r2, #48]	; 0x30
 80028ce:	4b2c      	ldr	r3, [pc, #176]	; (8002980 <HAL_I2C_MspInit+0xe0>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	61bb      	str	r3, [r7, #24]
 80028d8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80028da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80028de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028e0:	2312      	movs	r3, #18
 80028e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028e4:	2301      	movs	r3, #1
 80028e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e8:	2300      	movs	r3, #0
 80028ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80028ec:	2304      	movs	r3, #4
 80028ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028f0:	f107 031c 	add.w	r3, r7, #28
 80028f4:	4619      	mov	r1, r3
 80028f6:	4823      	ldr	r0, [pc, #140]	; (8002984 <HAL_I2C_MspInit+0xe4>)
 80028f8:	f000 ffa0 	bl	800383c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028fc:	4b20      	ldr	r3, [pc, #128]	; (8002980 <HAL_I2C_MspInit+0xe0>)
 80028fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002900:	4a1f      	ldr	r2, [pc, #124]	; (8002980 <HAL_I2C_MspInit+0xe0>)
 8002902:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002906:	6413      	str	r3, [r2, #64]	; 0x40
 8002908:	4b1d      	ldr	r3, [pc, #116]	; (8002980 <HAL_I2C_MspInit+0xe0>)
 800290a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002910:	617b      	str	r3, [r7, #20]
 8002912:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002914:	e02d      	b.n	8002972 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a1b      	ldr	r2, [pc, #108]	; (8002988 <HAL_I2C_MspInit+0xe8>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d128      	bne.n	8002972 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002920:	4b17      	ldr	r3, [pc, #92]	; (8002980 <HAL_I2C_MspInit+0xe0>)
 8002922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002924:	4a16      	ldr	r2, [pc, #88]	; (8002980 <HAL_I2C_MspInit+0xe0>)
 8002926:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800292a:	6313      	str	r3, [r2, #48]	; 0x30
 800292c:	4b14      	ldr	r3, [pc, #80]	; (8002980 <HAL_I2C_MspInit+0xe0>)
 800292e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002934:	613b      	str	r3, [r7, #16]
 8002936:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8002938:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800293c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800293e:	2312      	movs	r3, #18
 8002940:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002942:	2301      	movs	r3, #1
 8002944:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002946:	2303      	movs	r3, #3
 8002948:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800294a:	2304      	movs	r3, #4
 800294c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800294e:	f107 031c 	add.w	r3, r7, #28
 8002952:	4619      	mov	r1, r3
 8002954:	480d      	ldr	r0, [pc, #52]	; (800298c <HAL_I2C_MspInit+0xec>)
 8002956:	f000 ff71 	bl	800383c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800295a:	4b09      	ldr	r3, [pc, #36]	; (8002980 <HAL_I2C_MspInit+0xe0>)
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	4a08      	ldr	r2, [pc, #32]	; (8002980 <HAL_I2C_MspInit+0xe0>)
 8002960:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002964:	6413      	str	r3, [r2, #64]	; 0x40
 8002966:	4b06      	ldr	r3, [pc, #24]	; (8002980 <HAL_I2C_MspInit+0xe0>)
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800296e:	60fb      	str	r3, [r7, #12]
 8002970:	68fb      	ldr	r3, [r7, #12]
}
 8002972:	bf00      	nop
 8002974:	3730      	adds	r7, #48	; 0x30
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	40005400 	.word	0x40005400
 8002980:	40023800 	.word	0x40023800
 8002984:	40020400 	.word	0x40020400
 8002988:	40005c00 	.word	0x40005c00
 800298c:	40021c00 	.word	0x40021c00

08002990 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a15      	ldr	r2, [pc, #84]	; (80029f4 <HAL_I2C_MspDeInit+0x64>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d110      	bne.n	80029c4 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80029a2:	4b15      	ldr	r3, [pc, #84]	; (80029f8 <HAL_I2C_MspDeInit+0x68>)
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	4a14      	ldr	r2, [pc, #80]	; (80029f8 <HAL_I2C_MspDeInit+0x68>)
 80029a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80029ac:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 80029ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029b2:	4812      	ldr	r0, [pc, #72]	; (80029fc <HAL_I2C_MspDeInit+0x6c>)
 80029b4:	f001 f8ee 	bl	8003b94 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 80029b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80029bc:	480f      	ldr	r0, [pc, #60]	; (80029fc <HAL_I2C_MspDeInit+0x6c>)
 80029be:	f001 f8e9 	bl	8003b94 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 80029c2:	e013      	b.n	80029ec <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a0d      	ldr	r2, [pc, #52]	; (8002a00 <HAL_I2C_MspDeInit+0x70>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d10e      	bne.n	80029ec <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 80029ce:	4b0a      	ldr	r3, [pc, #40]	; (80029f8 <HAL_I2C_MspDeInit+0x68>)
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	4a09      	ldr	r2, [pc, #36]	; (80029f8 <HAL_I2C_MspDeInit+0x68>)
 80029d4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80029d8:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 80029da:	2180      	movs	r1, #128	; 0x80
 80029dc:	4809      	ldr	r0, [pc, #36]	; (8002a04 <HAL_I2C_MspDeInit+0x74>)
 80029de:	f001 f8d9 	bl	8003b94 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 80029e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029e6:	4807      	ldr	r0, [pc, #28]	; (8002a04 <HAL_I2C_MspDeInit+0x74>)
 80029e8:	f001 f8d4 	bl	8003b94 <HAL_GPIO_DeInit>
}
 80029ec:	bf00      	nop
 80029ee:	3708      	adds	r7, #8
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	40005400 	.word	0x40005400
 80029f8:	40023800 	.word	0x40023800
 80029fc:	40020400 	.word	0x40020400
 8002a00:	40005c00 	.word	0x40005c00
 8002a04:	40021c00 	.word	0x40021c00

08002a08 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002a0e:	1d3b      	adds	r3, r7, #4
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	605a      	str	r2, [r3, #4]
 8002a16:	609a      	str	r2, [r3, #8]
 8002a18:	60da      	str	r2, [r3, #12]
 8002a1a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002a1c:	4b3a      	ldr	r3, [pc, #232]	; (8002b08 <HAL_FMC_MspInit+0x100>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d16d      	bne.n	8002b00 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8002a24:	4b38      	ldr	r3, [pc, #224]	; (8002b08 <HAL_FMC_MspInit+0x100>)
 8002a26:	2201      	movs	r2, #1
 8002a28:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002a2a:	4b38      	ldr	r3, [pc, #224]	; (8002b0c <HAL_FMC_MspInit+0x104>)
 8002a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a2e:	4a37      	ldr	r2, [pc, #220]	; (8002b0c <HAL_FMC_MspInit+0x104>)
 8002a30:	f043 0301 	orr.w	r3, r3, #1
 8002a34:	6393      	str	r3, [r2, #56]	; 0x38
 8002a36:	4b35      	ldr	r3, [pc, #212]	; (8002b0c <HAL_FMC_MspInit+0x104>)
 8002a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	603b      	str	r3, [r7, #0]
 8002a40:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8002a42:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002a46:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a48:	2302      	movs	r3, #2
 8002a4a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a50:	2303      	movs	r3, #3
 8002a52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a54:	230c      	movs	r3, #12
 8002a56:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a58:	1d3b      	adds	r3, r7, #4
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	482c      	ldr	r0, [pc, #176]	; (8002b10 <HAL_FMC_MspInit+0x108>)
 8002a5e:	f000 feed 	bl	800383c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8002a62:	f248 1333 	movw	r3, #33075	; 0x8133
 8002a66:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a68:	2302      	movs	r3, #2
 8002a6a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a70:	2303      	movs	r3, #3
 8002a72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a74:	230c      	movs	r3, #12
 8002a76:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a78:	1d3b      	adds	r3, r7, #4
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	4825      	ldr	r0, [pc, #148]	; (8002b14 <HAL_FMC_MspInit+0x10c>)
 8002a7e:	f000 fedd 	bl	800383c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8002a82:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002a86:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a88:	2302      	movs	r3, #2
 8002a8a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a90:	2303      	movs	r3, #3
 8002a92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a94:	230c      	movs	r3, #12
 8002a96:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a98:	1d3b      	adds	r3, r7, #4
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	481e      	ldr	r0, [pc, #120]	; (8002b18 <HAL_FMC_MspInit+0x110>)
 8002a9e:	f000 fecd 	bl	800383c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8002aa2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002aa6:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aac:	2300      	movs	r3, #0
 8002aae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ab4:	230c      	movs	r3, #12
 8002ab6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002ab8:	1d3b      	adds	r3, r7, #4
 8002aba:	4619      	mov	r1, r3
 8002abc:	4817      	ldr	r0, [pc, #92]	; (8002b1c <HAL_FMC_MspInit+0x114>)
 8002abe:	f000 febd 	bl	800383c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8002ac2:	2328      	movs	r3, #40	; 0x28
 8002ac4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aca:	2300      	movs	r3, #0
 8002acc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ad2:	230c      	movs	r3, #12
 8002ad4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002ad6:	1d3b      	adds	r3, r7, #4
 8002ad8:	4619      	mov	r1, r3
 8002ada:	4811      	ldr	r0, [pc, #68]	; (8002b20 <HAL_FMC_MspInit+0x118>)
 8002adc:	f000 feae 	bl	800383c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8002ae0:	2308      	movs	r3, #8
 8002ae2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aec:	2303      	movs	r3, #3
 8002aee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002af0:	230c      	movs	r3, #12
 8002af2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8002af4:	1d3b      	adds	r3, r7, #4
 8002af6:	4619      	mov	r1, r3
 8002af8:	480a      	ldr	r0, [pc, #40]	; (8002b24 <HAL_FMC_MspInit+0x11c>)
 8002afa:	f000 fe9f 	bl	800383c <HAL_GPIO_Init>
 8002afe:	e000      	b.n	8002b02 <HAL_FMC_MspInit+0xfa>
    return;
 8002b00:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002b02:	3718      	adds	r7, #24
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	20000368 	.word	0x20000368
 8002b0c:	40023800 	.word	0x40023800
 8002b10:	40021000 	.word	0x40021000
 8002b14:	40021800 	.word	0x40021800
 8002b18:	40020c00 	.word	0x40020c00
 8002b1c:	40021400 	.word	0x40021400
 8002b20:	40021c00 	.word	0x40021c00
 8002b24:	40020800 	.word	0x40020800

08002b28 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002b30:	f7ff ff6a 	bl	8002a08 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002b34:	bf00      	nop
 8002b36:	3708      	adds	r7, #8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b08a      	sub	sp, #40	; 0x28
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a2b      	ldr	r2, [pc, #172]	; (8002bf8 <HAL_SAI_MspInit+0xbc>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d124      	bne.n	8002b98 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8002b4e:	4b2b      	ldr	r3, [pc, #172]	; (8002bfc <HAL_SAI_MspInit+0xc0>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d10b      	bne.n	8002b6e <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002b56:	4b2a      	ldr	r3, [pc, #168]	; (8002c00 <HAL_SAI_MspInit+0xc4>)
 8002b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5a:	4a29      	ldr	r2, [pc, #164]	; (8002c00 <HAL_SAI_MspInit+0xc4>)
 8002b5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b60:	6453      	str	r3, [r2, #68]	; 0x44
 8002b62:	4b27      	ldr	r3, [pc, #156]	; (8002c00 <HAL_SAI_MspInit+0xc4>)
 8002b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b6a:	613b      	str	r3, [r7, #16]
 8002b6c:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8002b6e:	4b23      	ldr	r3, [pc, #140]	; (8002bfc <HAL_SAI_MspInit+0xc0>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	3301      	adds	r3, #1
 8002b74:	4a21      	ldr	r2, [pc, #132]	; (8002bfc <HAL_SAI_MspInit+0xc0>)
 8002b76:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8002b78:	23f0      	movs	r3, #240	; 0xf0
 8002b7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b80:	2300      	movs	r3, #0
 8002b82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b84:	2300      	movs	r3, #0
 8002b86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002b88:	230a      	movs	r3, #10
 8002b8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002b8c:	f107 0314 	add.w	r3, r7, #20
 8002b90:	4619      	mov	r1, r3
 8002b92:	481c      	ldr	r0, [pc, #112]	; (8002c04 <HAL_SAI_MspInit+0xc8>)
 8002b94:	f000 fe52 	bl	800383c <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a1a      	ldr	r2, [pc, #104]	; (8002c08 <HAL_SAI_MspInit+0xcc>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d125      	bne.n	8002bee <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8002ba2:	4b16      	ldr	r3, [pc, #88]	; (8002bfc <HAL_SAI_MspInit+0xc0>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10b      	bne.n	8002bc2 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002baa:	4b15      	ldr	r3, [pc, #84]	; (8002c00 <HAL_SAI_MspInit+0xc4>)
 8002bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bae:	4a14      	ldr	r2, [pc, #80]	; (8002c00 <HAL_SAI_MspInit+0xc4>)
 8002bb0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8002bb6:	4b12      	ldr	r3, [pc, #72]	; (8002c00 <HAL_SAI_MspInit+0xc4>)
 8002bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8002bc2:	4b0e      	ldr	r3, [pc, #56]	; (8002bfc <HAL_SAI_MspInit+0xc0>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	4a0c      	ldr	r2, [pc, #48]	; (8002bfc <HAL_SAI_MspInit+0xc0>)
 8002bca:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8002bcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002bde:	230a      	movs	r3, #10
 8002be0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8002be2:	f107 0314 	add.w	r3, r7, #20
 8002be6:	4619      	mov	r1, r3
 8002be8:	4808      	ldr	r0, [pc, #32]	; (8002c0c <HAL_SAI_MspInit+0xd0>)
 8002bea:	f000 fe27 	bl	800383c <HAL_GPIO_Init>

    }
}
 8002bee:	bf00      	nop
 8002bf0:	3728      	adds	r7, #40	; 0x28
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	40015c04 	.word	0x40015c04
 8002bfc:	2000036c 	.word	0x2000036c
 8002c00:	40023800 	.word	0x40023800
 8002c04:	40022000 	.word	0x40022000
 8002c08:	40015c24 	.word	0x40015c24
 8002c0c:	40021800 	.word	0x40021800

08002c10 <HAL_SAI_MspDeInit>:

void HAL_SAI_MspDeInit(SAI_HandleTypeDef* hsai)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a19      	ldr	r2, [pc, #100]	; (8002c84 <HAL_SAI_MspDeInit+0x74>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d112      	bne.n	8002c48 <HAL_SAI_MspDeInit+0x38>
    {
    SAI2_client --;
 8002c22:	4b19      	ldr	r3, [pc, #100]	; (8002c88 <HAL_SAI_MspDeInit+0x78>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	3b01      	subs	r3, #1
 8002c28:	4a17      	ldr	r2, [pc, #92]	; (8002c88 <HAL_SAI_MspDeInit+0x78>)
 8002c2a:	6013      	str	r3, [r2, #0]
    if (SAI2_client == 0)
 8002c2c:	4b16      	ldr	r3, [pc, #88]	; (8002c88 <HAL_SAI_MspDeInit+0x78>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d105      	bne.n	8002c40 <HAL_SAI_MspDeInit+0x30>
      {
      /* Peripheral clock disable */
       __HAL_RCC_SAI2_CLK_DISABLE();
 8002c34:	4b15      	ldr	r3, [pc, #84]	; (8002c8c <HAL_SAI_MspDeInit+0x7c>)
 8002c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c38:	4a14      	ldr	r2, [pc, #80]	; (8002c8c <HAL_SAI_MspDeInit+0x7c>)
 8002c3a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002c3e:	6453      	str	r3, [r2, #68]	; 0x44
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    HAL_GPIO_DeInit(GPIOI, SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin);
 8002c40:	21f0      	movs	r1, #240	; 0xf0
 8002c42:	4813      	ldr	r0, [pc, #76]	; (8002c90 <HAL_SAI_MspDeInit+0x80>)
 8002c44:	f000 ffa6 	bl	8003b94 <HAL_GPIO_DeInit>

    }
    if(hsai->Instance==SAI2_Block_B)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a11      	ldr	r2, [pc, #68]	; (8002c94 <HAL_SAI_MspDeInit+0x84>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d113      	bne.n	8002c7a <HAL_SAI_MspDeInit+0x6a>
    {
    SAI2_client --;
 8002c52:	4b0d      	ldr	r3, [pc, #52]	; (8002c88 <HAL_SAI_MspDeInit+0x78>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	3b01      	subs	r3, #1
 8002c58:	4a0b      	ldr	r2, [pc, #44]	; (8002c88 <HAL_SAI_MspDeInit+0x78>)
 8002c5a:	6013      	str	r3, [r2, #0]
      if (SAI2_client == 0)
 8002c5c:	4b0a      	ldr	r3, [pc, #40]	; (8002c88 <HAL_SAI_MspDeInit+0x78>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d105      	bne.n	8002c70 <HAL_SAI_MspDeInit+0x60>
      {
      /* Peripheral clock disable */
      __HAL_RCC_SAI2_CLK_DISABLE();
 8002c64:	4b09      	ldr	r3, [pc, #36]	; (8002c8c <HAL_SAI_MspDeInit+0x7c>)
 8002c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c68:	4a08      	ldr	r2, [pc, #32]	; (8002c8c <HAL_SAI_MspDeInit+0x7c>)
 8002c6a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002c6e:	6453      	str	r3, [r2, #68]	; 0x44
      }

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    HAL_GPIO_DeInit(SAI2_SDB_GPIO_Port, SAI2_SDB_Pin);
 8002c70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c74:	4808      	ldr	r0, [pc, #32]	; (8002c98 <HAL_SAI_MspDeInit+0x88>)
 8002c76:	f000 ff8d 	bl	8003b94 <HAL_GPIO_DeInit>

    }
}
 8002c7a:	bf00      	nop
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	40015c04 	.word	0x40015c04
 8002c88:	2000036c 	.word	0x2000036c
 8002c8c:	40023800 	.word	0x40023800
 8002c90:	40022000 	.word	0x40022000
 8002c94:	40015c24 	.word	0x40015c24
 8002c98:	40021800 	.word	0x40021800

08002c9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ca0:	e7fe      	b.n	8002ca0 <NMI_Handler+0x4>

08002ca2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ca6:	e7fe      	b.n	8002ca6 <HardFault_Handler+0x4>

08002ca8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cac:	e7fe      	b.n	8002cac <MemManage_Handler+0x4>

08002cae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cb2:	e7fe      	b.n	8002cb2 <BusFault_Handler+0x4>

08002cb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cb8:	e7fe      	b.n	8002cb8 <UsageFault_Handler+0x4>

08002cba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cbe:	bf00      	nop
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ccc:	bf00      	nop
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr

08002cd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cda:	bf00      	nop
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ce8:	bf00      	nop
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
	...

08002cf4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002cf8:	4802      	ldr	r0, [pc, #8]	; (8002d04 <TIM6_DAC_IRQHandler+0x10>)
 8002cfa:	f003 f84b 	bl	8005d94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002cfe:	bf00      	nop
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	20000400 	.word	0x20000400

08002d08 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d14:	2300      	movs	r3, #0
 8002d16:	617b      	str	r3, [r7, #20]
 8002d18:	e00a      	b.n	8002d30 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002d1a:	f3af 8000 	nop.w
 8002d1e:	4601      	mov	r1, r0
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	1c5a      	adds	r2, r3, #1
 8002d24:	60ba      	str	r2, [r7, #8]
 8002d26:	b2ca      	uxtb	r2, r1
 8002d28:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	617b      	str	r3, [r7, #20]
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	dbf0      	blt.n	8002d1a <_read+0x12>
	}

return len;
 8002d38:	687b      	ldr	r3, [r7, #4]
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3718      	adds	r7, #24
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b086      	sub	sp, #24
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	60f8      	str	r0, [r7, #12]
 8002d4a:	60b9      	str	r1, [r7, #8]
 8002d4c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d4e:	2300      	movs	r3, #0
 8002d50:	617b      	str	r3, [r7, #20]
 8002d52:	e009      	b.n	8002d68 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	1c5a      	adds	r2, r3, #1
 8002d58:	60ba      	str	r2, [r7, #8]
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	3301      	adds	r3, #1
 8002d66:	617b      	str	r3, [r7, #20]
 8002d68:	697a      	ldr	r2, [r7, #20]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	dbf1      	blt.n	8002d54 <_write+0x12>
	}
	return len;
 8002d70:	687b      	ldr	r3, [r7, #4]
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3718      	adds	r7, #24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <_close>:

int _close(int file)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	b083      	sub	sp, #12
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
	return -1;
 8002d82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr

08002d92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b083      	sub	sp, #12
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
 8002d9a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002da2:	605a      	str	r2, [r3, #4]
	return 0;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr

08002db2 <_isatty>:

int _isatty(int file)
{
 8002db2:	b480      	push	{r7}
 8002db4:	b083      	sub	sp, #12
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
	return 1;
 8002dba:	2301      	movs	r3, #1
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
	return 0;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3714      	adds	r7, #20
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
	...

08002de4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b086      	sub	sp, #24
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002dec:	4a14      	ldr	r2, [pc, #80]	; (8002e40 <_sbrk+0x5c>)
 8002dee:	4b15      	ldr	r3, [pc, #84]	; (8002e44 <_sbrk+0x60>)
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002df8:	4b13      	ldr	r3, [pc, #76]	; (8002e48 <_sbrk+0x64>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d102      	bne.n	8002e06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e00:	4b11      	ldr	r3, [pc, #68]	; (8002e48 <_sbrk+0x64>)
 8002e02:	4a12      	ldr	r2, [pc, #72]	; (8002e4c <_sbrk+0x68>)
 8002e04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e06:	4b10      	ldr	r3, [pc, #64]	; (8002e48 <_sbrk+0x64>)
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d207      	bcs.n	8002e24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e14:	f003 fa58 	bl	80062c8 <__errno>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	220c      	movs	r2, #12
 8002e1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e22:	e009      	b.n	8002e38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e24:	4b08      	ldr	r3, [pc, #32]	; (8002e48 <_sbrk+0x64>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e2a:	4b07      	ldr	r3, [pc, #28]	; (8002e48 <_sbrk+0x64>)
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4413      	add	r3, r2
 8002e32:	4a05      	ldr	r2, [pc, #20]	; (8002e48 <_sbrk+0x64>)
 8002e34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e36:	68fb      	ldr	r3, [r7, #12]
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3718      	adds	r7, #24
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	20050000 	.word	0x20050000
 8002e44:	00000400 	.word	0x00000400
 8002e48:	20000370 	.word	0x20000370
 8002e4c:	20000460 	.word	0x20000460

08002e50 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e54:	4b06      	ldr	r3, [pc, #24]	; (8002e70 <SystemInit+0x20>)
 8002e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e5a:	4a05      	ldr	r2, [pc, #20]	; (8002e70 <SystemInit+0x20>)
 8002e5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e64:	bf00      	nop
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	e000ed00 	.word	0xe000ed00

08002e74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002e74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002eac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e78:	480d      	ldr	r0, [pc, #52]	; (8002eb0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e7a:	490e      	ldr	r1, [pc, #56]	; (8002eb4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e7c:	4a0e      	ldr	r2, [pc, #56]	; (8002eb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e80:	e002      	b.n	8002e88 <LoopCopyDataInit>

08002e82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e86:	3304      	adds	r3, #4

08002e88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e8c:	d3f9      	bcc.n	8002e82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e8e:	4a0b      	ldr	r2, [pc, #44]	; (8002ebc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e90:	4c0b      	ldr	r4, [pc, #44]	; (8002ec0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e94:	e001      	b.n	8002e9a <LoopFillZerobss>

08002e96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e98:	3204      	adds	r2, #4

08002e9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e9c:	d3fb      	bcc.n	8002e96 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002e9e:	f7ff ffd7 	bl	8002e50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ea2:	f003 fa17 	bl	80062d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ea6:	f7ff fc67 	bl	8002778 <main>
  bx  lr    
 8002eaa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002eac:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002eb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002eb4:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8002eb8:	08006e48 	.word	0x08006e48
  ldr r2, =_sbss
 8002ebc:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8002ec0:	20000460 	.word	0x20000460

08002ec4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ec4:	e7fe      	b.n	8002ec4 <ADC_IRQHandler>
	...

08002ec8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  return uwTick;
 8002ecc:	4b03      	ldr	r3, [pc, #12]	; (8002edc <HAL_GetTick+0x14>)
 8002ece:	681b      	ldr	r3, [r3, #0]
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	2000044c 	.word	0x2000044c

08002ee0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ee8:	f7ff ffee 	bl	8002ec8 <HAL_GetTick>
 8002eec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef8:	d005      	beq.n	8002f06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002efa:	4b0a      	ldr	r3, [pc, #40]	; (8002f24 <HAL_Delay+0x44>)
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	461a      	mov	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	4413      	add	r3, r2
 8002f04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f06:	bf00      	nop
 8002f08:	f7ff ffde 	bl	8002ec8 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d8f7      	bhi.n	8002f08 <HAL_Delay+0x28>
  {
  }
}
 8002f18:	bf00      	nop
 8002f1a:	bf00      	nop
 8002f1c:	3710      	adds	r7, #16
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	20000038 	.word	0x20000038

08002f28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f2c:	4b04      	ldr	r3, [pc, #16]	; (8002f40 <__NVIC_GetPriorityGrouping+0x18>)
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	0a1b      	lsrs	r3, r3, #8
 8002f32:	f003 0307 	and.w	r3, r3, #7
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr
 8002f40:	e000ed00 	.word	0xe000ed00

08002f44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	db0b      	blt.n	8002f6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f56:	79fb      	ldrb	r3, [r7, #7]
 8002f58:	f003 021f 	and.w	r2, r3, #31
 8002f5c:	4907      	ldr	r1, [pc, #28]	; (8002f7c <__NVIC_EnableIRQ+0x38>)
 8002f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f62:	095b      	lsrs	r3, r3, #5
 8002f64:	2001      	movs	r0, #1
 8002f66:	fa00 f202 	lsl.w	r2, r0, r2
 8002f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f6e:	bf00      	nop
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	e000e100 	.word	0xe000e100

08002f80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	4603      	mov	r3, r0
 8002f88:	6039      	str	r1, [r7, #0]
 8002f8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	db0a      	blt.n	8002faa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	b2da      	uxtb	r2, r3
 8002f98:	490c      	ldr	r1, [pc, #48]	; (8002fcc <__NVIC_SetPriority+0x4c>)
 8002f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9e:	0112      	lsls	r2, r2, #4
 8002fa0:	b2d2      	uxtb	r2, r2
 8002fa2:	440b      	add	r3, r1
 8002fa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fa8:	e00a      	b.n	8002fc0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	b2da      	uxtb	r2, r3
 8002fae:	4908      	ldr	r1, [pc, #32]	; (8002fd0 <__NVIC_SetPriority+0x50>)
 8002fb0:	79fb      	ldrb	r3, [r7, #7]
 8002fb2:	f003 030f 	and.w	r3, r3, #15
 8002fb6:	3b04      	subs	r3, #4
 8002fb8:	0112      	lsls	r2, r2, #4
 8002fba:	b2d2      	uxtb	r2, r2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	761a      	strb	r2, [r3, #24]
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	e000e100 	.word	0xe000e100
 8002fd0:	e000ed00 	.word	0xe000ed00

08002fd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b089      	sub	sp, #36	; 0x24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f003 0307 	and.w	r3, r3, #7
 8002fe6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	f1c3 0307 	rsb	r3, r3, #7
 8002fee:	2b04      	cmp	r3, #4
 8002ff0:	bf28      	it	cs
 8002ff2:	2304      	movcs	r3, #4
 8002ff4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	3304      	adds	r3, #4
 8002ffa:	2b06      	cmp	r3, #6
 8002ffc:	d902      	bls.n	8003004 <NVIC_EncodePriority+0x30>
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	3b03      	subs	r3, #3
 8003002:	e000      	b.n	8003006 <NVIC_EncodePriority+0x32>
 8003004:	2300      	movs	r3, #0
 8003006:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003008:	f04f 32ff 	mov.w	r2, #4294967295
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	fa02 f303 	lsl.w	r3, r2, r3
 8003012:	43da      	mvns	r2, r3
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	401a      	ands	r2, r3
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800301c:	f04f 31ff 	mov.w	r1, #4294967295
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	fa01 f303 	lsl.w	r3, r1, r3
 8003026:	43d9      	mvns	r1, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800302c:	4313      	orrs	r3, r2
         );
}
 800302e:	4618      	mov	r0, r3
 8003030:	3724      	adds	r7, #36	; 0x24
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr

0800303a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800303a:	b580      	push	{r7, lr}
 800303c:	b086      	sub	sp, #24
 800303e:	af00      	add	r7, sp, #0
 8003040:	4603      	mov	r3, r0
 8003042:	60b9      	str	r1, [r7, #8]
 8003044:	607a      	str	r2, [r7, #4]
 8003046:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003048:	2300      	movs	r3, #0
 800304a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800304c:	f7ff ff6c 	bl	8002f28 <__NVIC_GetPriorityGrouping>
 8003050:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	68b9      	ldr	r1, [r7, #8]
 8003056:	6978      	ldr	r0, [r7, #20]
 8003058:	f7ff ffbc 	bl	8002fd4 <NVIC_EncodePriority>
 800305c:	4602      	mov	r2, r0
 800305e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003062:	4611      	mov	r1, r2
 8003064:	4618      	mov	r0, r3
 8003066:	f7ff ff8b 	bl	8002f80 <__NVIC_SetPriority>
}
 800306a:	bf00      	nop
 800306c:	3718      	adds	r7, #24
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b082      	sub	sp, #8
 8003076:	af00      	add	r7, sp, #0
 8003078:	4603      	mov	r3, r0
 800307a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800307c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003080:	4618      	mov	r0, r3
 8003082:	f7ff ff5f 	bl	8002f44 <__NVIC_EnableIRQ>
}
 8003086:	bf00      	nop
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
	...

08003090 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b086      	sub	sp, #24
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003098:	2300      	movs	r3, #0
 800309a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800309c:	f7ff ff14 	bl	8002ec8 <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d101      	bne.n	80030ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e099      	b.n	80031e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2202      	movs	r2, #2
 80030b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f022 0201 	bic.w	r2, r2, #1
 80030ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030cc:	e00f      	b.n	80030ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030ce:	f7ff fefb 	bl	8002ec8 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	2b05      	cmp	r3, #5
 80030da:	d908      	bls.n	80030ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2220      	movs	r2, #32
 80030e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2203      	movs	r2, #3
 80030e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e078      	b.n	80031e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0301 	and.w	r3, r3, #1
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1e8      	bne.n	80030ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003104:	697a      	ldr	r2, [r7, #20]
 8003106:	4b38      	ldr	r3, [pc, #224]	; (80031e8 <HAL_DMA_Init+0x158>)
 8003108:	4013      	ands	r3, r2
 800310a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685a      	ldr	r2, [r3, #4]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800311a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003126:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003132:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a1b      	ldr	r3, [r3, #32]
 8003138:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800313a:	697a      	ldr	r2, [r7, #20]
 800313c:	4313      	orrs	r3, r2
 800313e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003144:	2b04      	cmp	r3, #4
 8003146:	d107      	bne.n	8003158 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003150:	4313      	orrs	r3, r2
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	4313      	orrs	r3, r2
 8003156:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	697a      	ldr	r2, [r7, #20]
 800315e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	f023 0307 	bic.w	r3, r3, #7
 800316e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	4313      	orrs	r3, r2
 8003178:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317e:	2b04      	cmp	r3, #4
 8003180:	d117      	bne.n	80031b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	4313      	orrs	r3, r2
 800318a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00e      	beq.n	80031b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 fad5 	bl	8003744 <DMA_CheckFifoParam>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d008      	beq.n	80031b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2240      	movs	r2, #64	; 0x40
 80031a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80031ae:	2301      	movs	r3, #1
 80031b0:	e016      	b.n	80031e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 fa8c 	bl	80036d8 <DMA_CalcBaseAndBitshift>
 80031c0:	4603      	mov	r3, r0
 80031c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031c8:	223f      	movs	r2, #63	; 0x3f
 80031ca:	409a      	lsls	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3718      	adds	r7, #24
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	f010803f 	.word	0xf010803f

080031ec <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e050      	b.n	80032a0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b02      	cmp	r3, #2
 8003208:	d101      	bne.n	800320e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800320a:	2302      	movs	r3, #2
 800320c:	e048      	b.n	80032a0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f022 0201 	bic.w	r2, r2, #1
 800321c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2200      	movs	r2, #0
 8003224:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2200      	movs	r2, #0
 800322c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2200      	movs	r2, #0
 8003234:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2200      	movs	r2, #0
 800323c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2200      	movs	r2, #0
 8003244:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2221      	movs	r2, #33	; 0x21
 800324c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 fa42 	bl	80036d8 <DMA_CalcBaseAndBitshift>
 8003254:	4603      	mov	r3, r0
 8003256:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800325c:	223f      	movs	r2, #63	; 0x3f
 800325e:	409a      	lsls	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3710      	adds	r7, #16
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	607a      	str	r2, [r7, #4]
 80032b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032b6:	2300      	movs	r3, #0
 80032b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d101      	bne.n	80032ce <HAL_DMA_Start_IT+0x26>
 80032ca:	2302      	movs	r3, #2
 80032cc:	e048      	b.n	8003360 <HAL_DMA_Start_IT+0xb8>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d137      	bne.n	8003352 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2202      	movs	r2, #2
 80032e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	68b9      	ldr	r1, [r7, #8]
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f000 f9c0 	bl	800367c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003300:	223f      	movs	r2, #63	; 0x3f
 8003302:	409a      	lsls	r2, r3
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f042 0216 	orr.w	r2, r2, #22
 8003316:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	695a      	ldr	r2, [r3, #20]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003326:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332c:	2b00      	cmp	r3, #0
 800332e:	d007      	beq.n	8003340 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f042 0208 	orr.w	r2, r2, #8
 800333e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f042 0201 	orr.w	r2, r2, #1
 800334e:	601a      	str	r2, [r3, #0]
 8003350:	e005      	b.n	800335e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800335a:	2302      	movs	r3, #2
 800335c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800335e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003360:	4618      	mov	r0, r3
 8003362:	3718      	adds	r7, #24
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b086      	sub	sp, #24
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003370:	2300      	movs	r3, #0
 8003372:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003374:	4b92      	ldr	r3, [pc, #584]	; (80035c0 <HAL_DMA_IRQHandler+0x258>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a92      	ldr	r2, [pc, #584]	; (80035c4 <HAL_DMA_IRQHandler+0x25c>)
 800337a:	fba2 2303 	umull	r2, r3, r2, r3
 800337e:	0a9b      	lsrs	r3, r3, #10
 8003380:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003386:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003392:	2208      	movs	r2, #8
 8003394:	409a      	lsls	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	4013      	ands	r3, r2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d01a      	beq.n	80033d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0304 	and.w	r3, r3, #4
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d013      	beq.n	80033d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f022 0204 	bic.w	r2, r2, #4
 80033ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c0:	2208      	movs	r2, #8
 80033c2:	409a      	lsls	r2, r3
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033cc:	f043 0201 	orr.w	r2, r3, #1
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d8:	2201      	movs	r2, #1
 80033da:	409a      	lsls	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	4013      	ands	r3, r2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d012      	beq.n	800340a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00b      	beq.n	800340a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f6:	2201      	movs	r2, #1
 80033f8:	409a      	lsls	r2, r3
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003402:	f043 0202 	orr.w	r2, r3, #2
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800340e:	2204      	movs	r2, #4
 8003410:	409a      	lsls	r2, r3
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	4013      	ands	r3, r2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d012      	beq.n	8003440 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00b      	beq.n	8003440 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800342c:	2204      	movs	r2, #4
 800342e:	409a      	lsls	r2, r3
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003438:	f043 0204 	orr.w	r2, r3, #4
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003444:	2210      	movs	r2, #16
 8003446:	409a      	lsls	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	4013      	ands	r3, r2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d043      	beq.n	80034d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0308 	and.w	r3, r3, #8
 800345a:	2b00      	cmp	r3, #0
 800345c:	d03c      	beq.n	80034d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003462:	2210      	movs	r2, #16
 8003464:	409a      	lsls	r2, r3
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d018      	beq.n	80034aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d108      	bne.n	8003498 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	2b00      	cmp	r3, #0
 800348c:	d024      	beq.n	80034d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	4798      	blx	r3
 8003496:	e01f      	b.n	80034d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800349c:	2b00      	cmp	r3, #0
 800349e:	d01b      	beq.n	80034d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	4798      	blx	r3
 80034a8:	e016      	b.n	80034d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d107      	bne.n	80034c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f022 0208 	bic.w	r2, r2, #8
 80034c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d003      	beq.n	80034d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034dc:	2220      	movs	r2, #32
 80034de:	409a      	lsls	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	4013      	ands	r3, r2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f000 808e 	beq.w	8003606 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0310 	and.w	r3, r3, #16
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f000 8086 	beq.w	8003606 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034fe:	2220      	movs	r2, #32
 8003500:	409a      	lsls	r2, r3
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b05      	cmp	r3, #5
 8003510:	d136      	bne.n	8003580 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 0216 	bic.w	r2, r2, #22
 8003520:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	695a      	ldr	r2, [r3, #20]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003530:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003536:	2b00      	cmp	r3, #0
 8003538:	d103      	bne.n	8003542 <HAL_DMA_IRQHandler+0x1da>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800353e:	2b00      	cmp	r3, #0
 8003540:	d007      	beq.n	8003552 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0208 	bic.w	r2, r2, #8
 8003550:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003556:	223f      	movs	r2, #63	; 0x3f
 8003558:	409a      	lsls	r2, r3
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003572:	2b00      	cmp	r3, #0
 8003574:	d07d      	beq.n	8003672 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	4798      	blx	r3
        }
        return;
 800357e:	e078      	b.n	8003672 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d01c      	beq.n	80035c8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d108      	bne.n	80035ae <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d030      	beq.n	8003606 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	4798      	blx	r3
 80035ac:	e02b      	b.n	8003606 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d027      	beq.n	8003606 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	4798      	blx	r3
 80035be:	e022      	b.n	8003606 <HAL_DMA_IRQHandler+0x29e>
 80035c0:	20000034 	.word	0x20000034
 80035c4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d10f      	bne.n	80035f6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 0210 	bic.w	r2, r2, #16
 80035e4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d003      	beq.n	8003606 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800360a:	2b00      	cmp	r3, #0
 800360c:	d032      	beq.n	8003674 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	2b00      	cmp	r3, #0
 8003618:	d022      	beq.n	8003660 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2205      	movs	r2, #5
 800361e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 0201 	bic.w	r2, r2, #1
 8003630:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	3301      	adds	r3, #1
 8003636:	60bb      	str	r3, [r7, #8]
 8003638:	697a      	ldr	r2, [r7, #20]
 800363a:	429a      	cmp	r2, r3
 800363c:	d307      	bcc.n	800364e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0301 	and.w	r3, r3, #1
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1f2      	bne.n	8003632 <HAL_DMA_IRQHandler+0x2ca>
 800364c:	e000      	b.n	8003650 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800364e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003664:	2b00      	cmp	r3, #0
 8003666:	d005      	beq.n	8003674 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	4798      	blx	r3
 8003670:	e000      	b.n	8003674 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003672:	bf00      	nop
    }
  }
}
 8003674:	3718      	adds	r7, #24
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop

0800367c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
 8003688:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003698:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	683a      	ldr	r2, [r7, #0]
 80036a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	2b40      	cmp	r3, #64	; 0x40
 80036a8:	d108      	bne.n	80036bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68ba      	ldr	r2, [r7, #8]
 80036b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80036ba:	e007      	b.n	80036cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68ba      	ldr	r2, [r7, #8]
 80036c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	60da      	str	r2, [r3, #12]
}
 80036cc:	bf00      	nop
 80036ce:	3714      	adds	r7, #20
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80036d8:	b480      	push	{r7}
 80036da:	b085      	sub	sp, #20
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	3b10      	subs	r3, #16
 80036e8:	4a13      	ldr	r2, [pc, #76]	; (8003738 <DMA_CalcBaseAndBitshift+0x60>)
 80036ea:	fba2 2303 	umull	r2, r3, r2, r3
 80036ee:	091b      	lsrs	r3, r3, #4
 80036f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036f2:	4a12      	ldr	r2, [pc, #72]	; (800373c <DMA_CalcBaseAndBitshift+0x64>)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	4413      	add	r3, r2
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	461a      	mov	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2b03      	cmp	r3, #3
 8003704:	d908      	bls.n	8003718 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	461a      	mov	r2, r3
 800370c:	4b0c      	ldr	r3, [pc, #48]	; (8003740 <DMA_CalcBaseAndBitshift+0x68>)
 800370e:	4013      	ands	r3, r2
 8003710:	1d1a      	adds	r2, r3, #4
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	659a      	str	r2, [r3, #88]	; 0x58
 8003716:	e006      	b.n	8003726 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	461a      	mov	r2, r3
 800371e:	4b08      	ldr	r3, [pc, #32]	; (8003740 <DMA_CalcBaseAndBitshift+0x68>)
 8003720:	4013      	ands	r3, r2
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800372a:	4618      	mov	r0, r3
 800372c:	3714      	adds	r7, #20
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	aaaaaaab 	.word	0xaaaaaaab
 800373c:	08006dd4 	.word	0x08006dd4
 8003740:	fffffc00 	.word	0xfffffc00

08003744 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800374c:	2300      	movs	r3, #0
 800374e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003754:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d11f      	bne.n	800379e <DMA_CheckFifoParam+0x5a>
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	2b03      	cmp	r3, #3
 8003762:	d856      	bhi.n	8003812 <DMA_CheckFifoParam+0xce>
 8003764:	a201      	add	r2, pc, #4	; (adr r2, 800376c <DMA_CheckFifoParam+0x28>)
 8003766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800376a:	bf00      	nop
 800376c:	0800377d 	.word	0x0800377d
 8003770:	0800378f 	.word	0x0800378f
 8003774:	0800377d 	.word	0x0800377d
 8003778:	08003813 	.word	0x08003813
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003780:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d046      	beq.n	8003816 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800378c:	e043      	b.n	8003816 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003792:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003796:	d140      	bne.n	800381a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800379c:	e03d      	b.n	800381a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037a6:	d121      	bne.n	80037ec <DMA_CheckFifoParam+0xa8>
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	2b03      	cmp	r3, #3
 80037ac:	d837      	bhi.n	800381e <DMA_CheckFifoParam+0xda>
 80037ae:	a201      	add	r2, pc, #4	; (adr r2, 80037b4 <DMA_CheckFifoParam+0x70>)
 80037b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b4:	080037c5 	.word	0x080037c5
 80037b8:	080037cb 	.word	0x080037cb
 80037bc:	080037c5 	.word	0x080037c5
 80037c0:	080037dd 	.word	0x080037dd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	73fb      	strb	r3, [r7, #15]
      break;
 80037c8:	e030      	b.n	800382c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d025      	beq.n	8003822 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037da:	e022      	b.n	8003822 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80037e4:	d11f      	bne.n	8003826 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80037ea:	e01c      	b.n	8003826 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d903      	bls.n	80037fa <DMA_CheckFifoParam+0xb6>
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	2b03      	cmp	r3, #3
 80037f6:	d003      	beq.n	8003800 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80037f8:	e018      	b.n	800382c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	73fb      	strb	r3, [r7, #15]
      break;
 80037fe:	e015      	b.n	800382c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003804:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d00e      	beq.n	800382a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	73fb      	strb	r3, [r7, #15]
      break;
 8003810:	e00b      	b.n	800382a <DMA_CheckFifoParam+0xe6>
      break;
 8003812:	bf00      	nop
 8003814:	e00a      	b.n	800382c <DMA_CheckFifoParam+0xe8>
      break;
 8003816:	bf00      	nop
 8003818:	e008      	b.n	800382c <DMA_CheckFifoParam+0xe8>
      break;
 800381a:	bf00      	nop
 800381c:	e006      	b.n	800382c <DMA_CheckFifoParam+0xe8>
      break;
 800381e:	bf00      	nop
 8003820:	e004      	b.n	800382c <DMA_CheckFifoParam+0xe8>
      break;
 8003822:	bf00      	nop
 8003824:	e002      	b.n	800382c <DMA_CheckFifoParam+0xe8>
      break;   
 8003826:	bf00      	nop
 8003828:	e000      	b.n	800382c <DMA_CheckFifoParam+0xe8>
      break;
 800382a:	bf00      	nop
    }
  } 
  
  return status; 
 800382c:	7bfb      	ldrb	r3, [r7, #15]
}
 800382e:	4618      	mov	r0, r3
 8003830:	3714      	adds	r7, #20
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop

0800383c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800383c:	b480      	push	{r7}
 800383e:	b089      	sub	sp, #36	; 0x24
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003846:	2300      	movs	r3, #0
 8003848:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800384a:	2300      	movs	r3, #0
 800384c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800384e:	2300      	movs	r3, #0
 8003850:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003852:	2300      	movs	r3, #0
 8003854:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003856:	2300      	movs	r3, #0
 8003858:	61fb      	str	r3, [r7, #28]
 800385a:	e175      	b.n	8003b48 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800385c:	2201      	movs	r2, #1
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	4013      	ands	r3, r2
 800386e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	429a      	cmp	r2, r3
 8003876:	f040 8164 	bne.w	8003b42 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d00b      	beq.n	800389a <HAL_GPIO_Init+0x5e>
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	2b02      	cmp	r3, #2
 8003888:	d007      	beq.n	800389a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800388e:	2b11      	cmp	r3, #17
 8003890:	d003      	beq.n	800389a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	2b12      	cmp	r3, #18
 8003898:	d130      	bne.n	80038fc <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	005b      	lsls	r3, r3, #1
 80038a4:	2203      	movs	r2, #3
 80038a6:	fa02 f303 	lsl.w	r3, r2, r3
 80038aa:	43db      	mvns	r3, r3
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	4013      	ands	r3, r2
 80038b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	68da      	ldr	r2, [r3, #12]
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	fa02 f303 	lsl.w	r3, r2, r3
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	69ba      	ldr	r2, [r7, #24]
 80038c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038d0:	2201      	movs	r2, #1
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	fa02 f303 	lsl.w	r3, r2, r3
 80038d8:	43db      	mvns	r3, r3
 80038da:	69ba      	ldr	r2, [r7, #24]
 80038dc:	4013      	ands	r3, r2
 80038de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	091b      	lsrs	r3, r3, #4
 80038e6:	f003 0201 	and.w	r2, r3, #1
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	fa02 f303 	lsl.w	r3, r2, r3
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	69ba      	ldr	r2, [r7, #24]
 80038fa:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	005b      	lsls	r3, r3, #1
 8003906:	2203      	movs	r2, #3
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	43db      	mvns	r3, r3
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	4013      	ands	r3, r2
 8003912:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	689a      	ldr	r2, [r3, #8]
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	005b      	lsls	r3, r3, #1
 800391c:	fa02 f303 	lsl.w	r3, r2, r3
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	4313      	orrs	r3, r2
 8003924:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	69ba      	ldr	r2, [r7, #24]
 800392a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	2b02      	cmp	r3, #2
 8003932:	d003      	beq.n	800393c <HAL_GPIO_Init+0x100>
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	2b12      	cmp	r3, #18
 800393a:	d123      	bne.n	8003984 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	08da      	lsrs	r2, r3, #3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	3208      	adds	r2, #8
 8003944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003948:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	f003 0307 	and.w	r3, r3, #7
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	220f      	movs	r2, #15
 8003954:	fa02 f303 	lsl.w	r3, r2, r3
 8003958:	43db      	mvns	r3, r3
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	4013      	ands	r3, r2
 800395e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	691a      	ldr	r2, [r3, #16]
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	f003 0307 	and.w	r3, r3, #7
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	fa02 f303 	lsl.w	r3, r2, r3
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	4313      	orrs	r3, r2
 8003974:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	08da      	lsrs	r2, r3, #3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	3208      	adds	r2, #8
 800397e:	69b9      	ldr	r1, [r7, #24]
 8003980:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	2203      	movs	r2, #3
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	43db      	mvns	r3, r3
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	4013      	ands	r3, r2
 800399a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f003 0203 	and.w	r2, r3, #3
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	005b      	lsls	r3, r3, #1
 80039a8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f000 80be 	beq.w	8003b42 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039c6:	4b66      	ldr	r3, [pc, #408]	; (8003b60 <HAL_GPIO_Init+0x324>)
 80039c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ca:	4a65      	ldr	r2, [pc, #404]	; (8003b60 <HAL_GPIO_Init+0x324>)
 80039cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039d0:	6453      	str	r3, [r2, #68]	; 0x44
 80039d2:	4b63      	ldr	r3, [pc, #396]	; (8003b60 <HAL_GPIO_Init+0x324>)
 80039d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039da:	60fb      	str	r3, [r7, #12]
 80039dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80039de:	4a61      	ldr	r2, [pc, #388]	; (8003b64 <HAL_GPIO_Init+0x328>)
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	089b      	lsrs	r3, r3, #2
 80039e4:	3302      	adds	r3, #2
 80039e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	f003 0303 	and.w	r3, r3, #3
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	220f      	movs	r2, #15
 80039f6:	fa02 f303 	lsl.w	r3, r2, r3
 80039fa:	43db      	mvns	r3, r3
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	4013      	ands	r3, r2
 8003a00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a58      	ldr	r2, [pc, #352]	; (8003b68 <HAL_GPIO_Init+0x32c>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d037      	beq.n	8003a7a <HAL_GPIO_Init+0x23e>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a57      	ldr	r2, [pc, #348]	; (8003b6c <HAL_GPIO_Init+0x330>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d031      	beq.n	8003a76 <HAL_GPIO_Init+0x23a>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a56      	ldr	r2, [pc, #344]	; (8003b70 <HAL_GPIO_Init+0x334>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d02b      	beq.n	8003a72 <HAL_GPIO_Init+0x236>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a55      	ldr	r2, [pc, #340]	; (8003b74 <HAL_GPIO_Init+0x338>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d025      	beq.n	8003a6e <HAL_GPIO_Init+0x232>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a54      	ldr	r2, [pc, #336]	; (8003b78 <HAL_GPIO_Init+0x33c>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d01f      	beq.n	8003a6a <HAL_GPIO_Init+0x22e>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a53      	ldr	r2, [pc, #332]	; (8003b7c <HAL_GPIO_Init+0x340>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d019      	beq.n	8003a66 <HAL_GPIO_Init+0x22a>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a52      	ldr	r2, [pc, #328]	; (8003b80 <HAL_GPIO_Init+0x344>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d013      	beq.n	8003a62 <HAL_GPIO_Init+0x226>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a51      	ldr	r2, [pc, #324]	; (8003b84 <HAL_GPIO_Init+0x348>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d00d      	beq.n	8003a5e <HAL_GPIO_Init+0x222>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a50      	ldr	r2, [pc, #320]	; (8003b88 <HAL_GPIO_Init+0x34c>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d007      	beq.n	8003a5a <HAL_GPIO_Init+0x21e>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a4f      	ldr	r2, [pc, #316]	; (8003b8c <HAL_GPIO_Init+0x350>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d101      	bne.n	8003a56 <HAL_GPIO_Init+0x21a>
 8003a52:	2309      	movs	r3, #9
 8003a54:	e012      	b.n	8003a7c <HAL_GPIO_Init+0x240>
 8003a56:	230a      	movs	r3, #10
 8003a58:	e010      	b.n	8003a7c <HAL_GPIO_Init+0x240>
 8003a5a:	2308      	movs	r3, #8
 8003a5c:	e00e      	b.n	8003a7c <HAL_GPIO_Init+0x240>
 8003a5e:	2307      	movs	r3, #7
 8003a60:	e00c      	b.n	8003a7c <HAL_GPIO_Init+0x240>
 8003a62:	2306      	movs	r3, #6
 8003a64:	e00a      	b.n	8003a7c <HAL_GPIO_Init+0x240>
 8003a66:	2305      	movs	r3, #5
 8003a68:	e008      	b.n	8003a7c <HAL_GPIO_Init+0x240>
 8003a6a:	2304      	movs	r3, #4
 8003a6c:	e006      	b.n	8003a7c <HAL_GPIO_Init+0x240>
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e004      	b.n	8003a7c <HAL_GPIO_Init+0x240>
 8003a72:	2302      	movs	r3, #2
 8003a74:	e002      	b.n	8003a7c <HAL_GPIO_Init+0x240>
 8003a76:	2301      	movs	r3, #1
 8003a78:	e000      	b.n	8003a7c <HAL_GPIO_Init+0x240>
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	69fa      	ldr	r2, [r7, #28]
 8003a7e:	f002 0203 	and.w	r2, r2, #3
 8003a82:	0092      	lsls	r2, r2, #2
 8003a84:	4093      	lsls	r3, r2
 8003a86:	69ba      	ldr	r2, [r7, #24]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003a8c:	4935      	ldr	r1, [pc, #212]	; (8003b64 <HAL_GPIO_Init+0x328>)
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	089b      	lsrs	r3, r3, #2
 8003a92:	3302      	adds	r3, #2
 8003a94:	69ba      	ldr	r2, [r7, #24]
 8003a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a9a:	4b3d      	ldr	r3, [pc, #244]	; (8003b90 <HAL_GPIO_Init+0x354>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	43db      	mvns	r3, r3
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d003      	beq.n	8003abe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003ab6:	69ba      	ldr	r2, [r7, #24]
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003abe:	4a34      	ldr	r2, [pc, #208]	; (8003b90 <HAL_GPIO_Init+0x354>)
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003ac4:	4b32      	ldr	r3, [pc, #200]	; (8003b90 <HAL_GPIO_Init+0x354>)
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	43db      	mvns	r3, r3
 8003ace:	69ba      	ldr	r2, [r7, #24]
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d003      	beq.n	8003ae8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003ae0:	69ba      	ldr	r2, [r7, #24]
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ae8:	4a29      	ldr	r2, [pc, #164]	; (8003b90 <HAL_GPIO_Init+0x354>)
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003aee:	4b28      	ldr	r3, [pc, #160]	; (8003b90 <HAL_GPIO_Init+0x354>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	43db      	mvns	r3, r3
 8003af8:	69ba      	ldr	r2, [r7, #24]
 8003afa:	4013      	ands	r3, r2
 8003afc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d003      	beq.n	8003b12 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003b0a:	69ba      	ldr	r2, [r7, #24]
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b12:	4a1f      	ldr	r2, [pc, #124]	; (8003b90 <HAL_GPIO_Init+0x354>)
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b18:	4b1d      	ldr	r3, [pc, #116]	; (8003b90 <HAL_GPIO_Init+0x354>)
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	43db      	mvns	r3, r3
 8003b22:	69ba      	ldr	r2, [r7, #24]
 8003b24:	4013      	ands	r3, r2
 8003b26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d003      	beq.n	8003b3c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b3c:	4a14      	ldr	r2, [pc, #80]	; (8003b90 <HAL_GPIO_Init+0x354>)
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	3301      	adds	r3, #1
 8003b46:	61fb      	str	r3, [r7, #28]
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	2b0f      	cmp	r3, #15
 8003b4c:	f67f ae86 	bls.w	800385c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003b50:	bf00      	nop
 8003b52:	bf00      	nop
 8003b54:	3724      	adds	r7, #36	; 0x24
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	40023800 	.word	0x40023800
 8003b64:	40013800 	.word	0x40013800
 8003b68:	40020000 	.word	0x40020000
 8003b6c:	40020400 	.word	0x40020400
 8003b70:	40020800 	.word	0x40020800
 8003b74:	40020c00 	.word	0x40020c00
 8003b78:	40021000 	.word	0x40021000
 8003b7c:	40021400 	.word	0x40021400
 8003b80:	40021800 	.word	0x40021800
 8003b84:	40021c00 	.word	0x40021c00
 8003b88:	40022000 	.word	0x40022000
 8003b8c:	40022400 	.word	0x40022400
 8003b90:	40013c00 	.word	0x40013c00

08003b94 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b087      	sub	sp, #28
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003baa:	2300      	movs	r3, #0
 8003bac:	617b      	str	r3, [r7, #20]
 8003bae:	e0d9      	b.n	8003d64 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003bc2:	68fa      	ldr	r2, [r7, #12]
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	f040 80c9 	bne.w	8003d5e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8003bcc:	4a6b      	ldr	r2, [pc, #428]	; (8003d7c <HAL_GPIO_DeInit+0x1e8>)
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	089b      	lsrs	r3, r3, #2
 8003bd2:	3302      	adds	r3, #2
 8003bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bd8:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	f003 0303 	and.w	r3, r3, #3
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	220f      	movs	r2, #15
 8003be4:	fa02 f303 	lsl.w	r3, r2, r3
 8003be8:	68ba      	ldr	r2, [r7, #8]
 8003bea:	4013      	ands	r3, r2
 8003bec:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a63      	ldr	r2, [pc, #396]	; (8003d80 <HAL_GPIO_DeInit+0x1ec>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d037      	beq.n	8003c66 <HAL_GPIO_DeInit+0xd2>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a62      	ldr	r2, [pc, #392]	; (8003d84 <HAL_GPIO_DeInit+0x1f0>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d031      	beq.n	8003c62 <HAL_GPIO_DeInit+0xce>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a61      	ldr	r2, [pc, #388]	; (8003d88 <HAL_GPIO_DeInit+0x1f4>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d02b      	beq.n	8003c5e <HAL_GPIO_DeInit+0xca>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a60      	ldr	r2, [pc, #384]	; (8003d8c <HAL_GPIO_DeInit+0x1f8>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d025      	beq.n	8003c5a <HAL_GPIO_DeInit+0xc6>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a5f      	ldr	r2, [pc, #380]	; (8003d90 <HAL_GPIO_DeInit+0x1fc>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d01f      	beq.n	8003c56 <HAL_GPIO_DeInit+0xc2>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a5e      	ldr	r2, [pc, #376]	; (8003d94 <HAL_GPIO_DeInit+0x200>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d019      	beq.n	8003c52 <HAL_GPIO_DeInit+0xbe>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a5d      	ldr	r2, [pc, #372]	; (8003d98 <HAL_GPIO_DeInit+0x204>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d013      	beq.n	8003c4e <HAL_GPIO_DeInit+0xba>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a5c      	ldr	r2, [pc, #368]	; (8003d9c <HAL_GPIO_DeInit+0x208>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d00d      	beq.n	8003c4a <HAL_GPIO_DeInit+0xb6>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a5b      	ldr	r2, [pc, #364]	; (8003da0 <HAL_GPIO_DeInit+0x20c>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d007      	beq.n	8003c46 <HAL_GPIO_DeInit+0xb2>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a5a      	ldr	r2, [pc, #360]	; (8003da4 <HAL_GPIO_DeInit+0x210>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d101      	bne.n	8003c42 <HAL_GPIO_DeInit+0xae>
 8003c3e:	2309      	movs	r3, #9
 8003c40:	e012      	b.n	8003c68 <HAL_GPIO_DeInit+0xd4>
 8003c42:	230a      	movs	r3, #10
 8003c44:	e010      	b.n	8003c68 <HAL_GPIO_DeInit+0xd4>
 8003c46:	2308      	movs	r3, #8
 8003c48:	e00e      	b.n	8003c68 <HAL_GPIO_DeInit+0xd4>
 8003c4a:	2307      	movs	r3, #7
 8003c4c:	e00c      	b.n	8003c68 <HAL_GPIO_DeInit+0xd4>
 8003c4e:	2306      	movs	r3, #6
 8003c50:	e00a      	b.n	8003c68 <HAL_GPIO_DeInit+0xd4>
 8003c52:	2305      	movs	r3, #5
 8003c54:	e008      	b.n	8003c68 <HAL_GPIO_DeInit+0xd4>
 8003c56:	2304      	movs	r3, #4
 8003c58:	e006      	b.n	8003c68 <HAL_GPIO_DeInit+0xd4>
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e004      	b.n	8003c68 <HAL_GPIO_DeInit+0xd4>
 8003c5e:	2302      	movs	r3, #2
 8003c60:	e002      	b.n	8003c68 <HAL_GPIO_DeInit+0xd4>
 8003c62:	2301      	movs	r3, #1
 8003c64:	e000      	b.n	8003c68 <HAL_GPIO_DeInit+0xd4>
 8003c66:	2300      	movs	r3, #0
 8003c68:	697a      	ldr	r2, [r7, #20]
 8003c6a:	f002 0203 	and.w	r2, r2, #3
 8003c6e:	0092      	lsls	r2, r2, #2
 8003c70:	4093      	lsls	r3, r2
 8003c72:	68ba      	ldr	r2, [r7, #8]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d132      	bne.n	8003cde <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003c78:	4b4b      	ldr	r3, [pc, #300]	; (8003da8 <HAL_GPIO_DeInit+0x214>)
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	43db      	mvns	r3, r3
 8003c80:	4949      	ldr	r1, [pc, #292]	; (8003da8 <HAL_GPIO_DeInit+0x214>)
 8003c82:	4013      	ands	r3, r2
 8003c84:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003c86:	4b48      	ldr	r3, [pc, #288]	; (8003da8 <HAL_GPIO_DeInit+0x214>)
 8003c88:	685a      	ldr	r2, [r3, #4]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	43db      	mvns	r3, r3
 8003c8e:	4946      	ldr	r1, [pc, #280]	; (8003da8 <HAL_GPIO_DeInit+0x214>)
 8003c90:	4013      	ands	r3, r2
 8003c92:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003c94:	4b44      	ldr	r3, [pc, #272]	; (8003da8 <HAL_GPIO_DeInit+0x214>)
 8003c96:	689a      	ldr	r2, [r3, #8]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	43db      	mvns	r3, r3
 8003c9c:	4942      	ldr	r1, [pc, #264]	; (8003da8 <HAL_GPIO_DeInit+0x214>)
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003ca2:	4b41      	ldr	r3, [pc, #260]	; (8003da8 <HAL_GPIO_DeInit+0x214>)
 8003ca4:	68da      	ldr	r2, [r3, #12]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	43db      	mvns	r3, r3
 8003caa:	493f      	ldr	r1, [pc, #252]	; (8003da8 <HAL_GPIO_DeInit+0x214>)
 8003cac:	4013      	ands	r3, r2
 8003cae:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	f003 0303 	and.w	r3, r3, #3
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	220f      	movs	r2, #15
 8003cba:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbe:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8003cc0:	4a2e      	ldr	r2, [pc, #184]	; (8003d7c <HAL_GPIO_DeInit+0x1e8>)
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	089b      	lsrs	r3, r3, #2
 8003cc6:	3302      	adds	r3, #2
 8003cc8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	43da      	mvns	r2, r3
 8003cd0:	482a      	ldr	r0, [pc, #168]	; (8003d7c <HAL_GPIO_DeInit+0x1e8>)
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	089b      	lsrs	r3, r3, #2
 8003cd6:	400a      	ands	r2, r1
 8003cd8:	3302      	adds	r3, #2
 8003cda:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	005b      	lsls	r3, r3, #1
 8003ce6:	2103      	movs	r1, #3
 8003ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cec:	43db      	mvns	r3, r3
 8003cee:	401a      	ands	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	08da      	lsrs	r2, r3, #3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	3208      	adds	r2, #8
 8003cfc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	f003 0307 	and.w	r3, r3, #7
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	220f      	movs	r2, #15
 8003d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0e:	43db      	mvns	r3, r3
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	08d2      	lsrs	r2, r2, #3
 8003d14:	4019      	ands	r1, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	3208      	adds	r2, #8
 8003d1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	68da      	ldr	r2, [r3, #12]
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	005b      	lsls	r3, r3, #1
 8003d26:	2103      	movs	r1, #3
 8003d28:	fa01 f303 	lsl.w	r3, r1, r3
 8003d2c:	43db      	mvns	r3, r3
 8003d2e:	401a      	ands	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685a      	ldr	r2, [r3, #4]
 8003d38:	2101      	movs	r1, #1
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d40:	43db      	mvns	r3, r3
 8003d42:	401a      	ands	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	689a      	ldr	r2, [r3, #8]
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	005b      	lsls	r3, r3, #1
 8003d50:	2103      	movs	r1, #3
 8003d52:	fa01 f303 	lsl.w	r3, r1, r3
 8003d56:	43db      	mvns	r3, r3
 8003d58:	401a      	ands	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	3301      	adds	r3, #1
 8003d62:	617b      	str	r3, [r7, #20]
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	2b0f      	cmp	r3, #15
 8003d68:	f67f af22 	bls.w	8003bb0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003d6c:	bf00      	nop
 8003d6e:	bf00      	nop
 8003d70:	371c      	adds	r7, #28
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	40013800 	.word	0x40013800
 8003d80:	40020000 	.word	0x40020000
 8003d84:	40020400 	.word	0x40020400
 8003d88:	40020800 	.word	0x40020800
 8003d8c:	40020c00 	.word	0x40020c00
 8003d90:	40021000 	.word	0x40021000
 8003d94:	40021400 	.word	0x40021400
 8003d98:	40021800 	.word	0x40021800
 8003d9c:	40021c00 	.word	0x40021c00
 8003da0:	40022000 	.word	0x40022000
 8003da4:	40022400 	.word	0x40022400
 8003da8:	40013c00 	.word	0x40013c00

08003dac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d101      	bne.n	8003dbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e07f      	b.n	8003ebe <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d106      	bne.n	8003dd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f7fe fd64 	bl	80028a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2224      	movs	r2, #36	; 0x24
 8003ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f022 0201 	bic.w	r2, r2, #1
 8003dee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685a      	ldr	r2, [r3, #4]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003dfc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	689a      	ldr	r2, [r3, #8]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e0c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d107      	bne.n	8003e26 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	689a      	ldr	r2, [r3, #8]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e22:	609a      	str	r2, [r3, #8]
 8003e24:	e006      	b.n	8003e34 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	689a      	ldr	r2, [r3, #8]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003e32:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d104      	bne.n	8003e46 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e44:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	6859      	ldr	r1, [r3, #4]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	4b1d      	ldr	r3, [pc, #116]	; (8003ec8 <HAL_I2C_Init+0x11c>)
 8003e52:	430b      	orrs	r3, r1
 8003e54:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68da      	ldr	r2, [r3, #12]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e64:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	691a      	ldr	r2, [r3, #16]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	ea42 0103 	orr.w	r1, r2, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	021a      	lsls	r2, r3, #8
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	430a      	orrs	r2, r1
 8003e7e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	69d9      	ldr	r1, [r3, #28]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a1a      	ldr	r2, [r3, #32]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	430a      	orrs	r2, r1
 8003e8e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f042 0201 	orr.w	r2, r2, #1
 8003e9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2220      	movs	r2, #32
 8003eaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3708      	adds	r7, #8
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	02008000 	.word	0x02008000

08003ecc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e021      	b.n	8003f22 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2224      	movs	r2, #36	; 0x24
 8003ee2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f022 0201 	bic.w	r2, r2, #1
 8003ef4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f7fe fd4a 	bl	8002990 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3708      	adds	r7, #8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
	...

08003f2c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b088      	sub	sp, #32
 8003f30:	af02      	add	r7, sp, #8
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	4608      	mov	r0, r1
 8003f36:	4611      	mov	r1, r2
 8003f38:	461a      	mov	r2, r3
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	817b      	strh	r3, [r7, #10]
 8003f3e:	460b      	mov	r3, r1
 8003f40:	813b      	strh	r3, [r7, #8]
 8003f42:	4613      	mov	r3, r2
 8003f44:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b20      	cmp	r3, #32
 8003f50:	f040 80f9 	bne.w	8004146 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f54:	6a3b      	ldr	r3, [r7, #32]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d002      	beq.n	8003f60 <HAL_I2C_Mem_Write+0x34>
 8003f5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d105      	bne.n	8003f6c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f66:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e0ed      	b.n	8004148 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d101      	bne.n	8003f7a <HAL_I2C_Mem_Write+0x4e>
 8003f76:	2302      	movs	r3, #2
 8003f78:	e0e6      	b.n	8004148 <HAL_I2C_Mem_Write+0x21c>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f82:	f7fe ffa1 	bl	8002ec8 <HAL_GetTick>
 8003f86:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	9300      	str	r3, [sp, #0]
 8003f8c:	2319      	movs	r3, #25
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f94:	68f8      	ldr	r0, [r7, #12]
 8003f96:	f000 fad1 	bl	800453c <I2C_WaitOnFlagUntilTimeout>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d001      	beq.n	8003fa4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e0d1      	b.n	8004148 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2221      	movs	r2, #33	; 0x21
 8003fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2240      	movs	r2, #64	; 0x40
 8003fb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6a3a      	ldr	r2, [r7, #32]
 8003fbe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003fc4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fcc:	88f8      	ldrh	r0, [r7, #6]
 8003fce:	893a      	ldrh	r2, [r7, #8]
 8003fd0:	8979      	ldrh	r1, [r7, #10]
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	9301      	str	r3, [sp, #4]
 8003fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	4603      	mov	r3, r0
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	f000 f9e1 	bl	80043a4 <I2C_RequestMemoryWrite>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d005      	beq.n	8003ff4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e0a9      	b.n	8004148 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	2bff      	cmp	r3, #255	; 0xff
 8003ffc:	d90e      	bls.n	800401c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	22ff      	movs	r2, #255	; 0xff
 8004002:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004008:	b2da      	uxtb	r2, r3
 800400a:	8979      	ldrh	r1, [r7, #10]
 800400c:	2300      	movs	r3, #0
 800400e:	9300      	str	r3, [sp, #0]
 8004010:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004014:	68f8      	ldr	r0, [r7, #12]
 8004016:	f000 fbb3 	bl	8004780 <I2C_TransferConfig>
 800401a:	e00f      	b.n	800403c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004020:	b29a      	uxth	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800402a:	b2da      	uxtb	r2, r3
 800402c:	8979      	ldrh	r1, [r7, #10]
 800402e:	2300      	movs	r3, #0
 8004030:	9300      	str	r3, [sp, #0]
 8004032:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f000 fba2 	bl	8004780 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800403c:	697a      	ldr	r2, [r7, #20]
 800403e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f000 fabb 	bl	80045bc <I2C_WaitOnTXISFlagUntilTimeout>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e07b      	b.n	8004148 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004054:	781a      	ldrb	r2, [r3, #0]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004060:	1c5a      	adds	r2, r3, #1
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800406a:	b29b      	uxth	r3, r3
 800406c:	3b01      	subs	r3, #1
 800406e:	b29a      	uxth	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004078:	3b01      	subs	r3, #1
 800407a:	b29a      	uxth	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004084:	b29b      	uxth	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d034      	beq.n	80040f4 <HAL_I2C_Mem_Write+0x1c8>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800408e:	2b00      	cmp	r3, #0
 8004090:	d130      	bne.n	80040f4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004098:	2200      	movs	r2, #0
 800409a:	2180      	movs	r1, #128	; 0x80
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f000 fa4d 	bl	800453c <I2C_WaitOnFlagUntilTimeout>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d001      	beq.n	80040ac <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e04d      	b.n	8004148 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	2bff      	cmp	r3, #255	; 0xff
 80040b4:	d90e      	bls.n	80040d4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	22ff      	movs	r2, #255	; 0xff
 80040ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c0:	b2da      	uxtb	r2, r3
 80040c2:	8979      	ldrh	r1, [r7, #10]
 80040c4:	2300      	movs	r3, #0
 80040c6:	9300      	str	r3, [sp, #0]
 80040c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80040cc:	68f8      	ldr	r0, [r7, #12]
 80040ce:	f000 fb57 	bl	8004780 <I2C_TransferConfig>
 80040d2:	e00f      	b.n	80040f4 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d8:	b29a      	uxth	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040e2:	b2da      	uxtb	r2, r3
 80040e4:	8979      	ldrh	r1, [r7, #10]
 80040e6:	2300      	movs	r3, #0
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040ee:	68f8      	ldr	r0, [r7, #12]
 80040f0:	f000 fb46 	bl	8004780 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d19e      	bne.n	800403c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040fe:	697a      	ldr	r2, [r7, #20]
 8004100:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004102:	68f8      	ldr	r0, [r7, #12]
 8004104:	f000 fa9a 	bl	800463c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d001      	beq.n	8004112 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e01a      	b.n	8004148 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2220      	movs	r2, #32
 8004118:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	6859      	ldr	r1, [r3, #4]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	4b0a      	ldr	r3, [pc, #40]	; (8004150 <HAL_I2C_Mem_Write+0x224>)
 8004126:	400b      	ands	r3, r1
 8004128:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2220      	movs	r2, #32
 800412e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004142:	2300      	movs	r3, #0
 8004144:	e000      	b.n	8004148 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004146:	2302      	movs	r3, #2
  }
}
 8004148:	4618      	mov	r0, r3
 800414a:	3718      	adds	r7, #24
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	fe00e800 	.word	0xfe00e800

08004154 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b088      	sub	sp, #32
 8004158:	af02      	add	r7, sp, #8
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	4608      	mov	r0, r1
 800415e:	4611      	mov	r1, r2
 8004160:	461a      	mov	r2, r3
 8004162:	4603      	mov	r3, r0
 8004164:	817b      	strh	r3, [r7, #10]
 8004166:	460b      	mov	r3, r1
 8004168:	813b      	strh	r3, [r7, #8]
 800416a:	4613      	mov	r3, r2
 800416c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b20      	cmp	r3, #32
 8004178:	f040 80fd 	bne.w	8004376 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800417c:	6a3b      	ldr	r3, [r7, #32]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d002      	beq.n	8004188 <HAL_I2C_Mem_Read+0x34>
 8004182:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004184:	2b00      	cmp	r3, #0
 8004186:	d105      	bne.n	8004194 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800418e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e0f1      	b.n	8004378 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800419a:	2b01      	cmp	r3, #1
 800419c:	d101      	bne.n	80041a2 <HAL_I2C_Mem_Read+0x4e>
 800419e:	2302      	movs	r3, #2
 80041a0:	e0ea      	b.n	8004378 <HAL_I2C_Mem_Read+0x224>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2201      	movs	r2, #1
 80041a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80041aa:	f7fe fe8d 	bl	8002ec8 <HAL_GetTick>
 80041ae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	9300      	str	r3, [sp, #0]
 80041b4:	2319      	movs	r3, #25
 80041b6:	2201      	movs	r2, #1
 80041b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f000 f9bd 	bl	800453c <I2C_WaitOnFlagUntilTimeout>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d001      	beq.n	80041cc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e0d5      	b.n	8004378 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2222      	movs	r2, #34	; 0x22
 80041d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2240      	movs	r2, #64	; 0x40
 80041d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6a3a      	ldr	r2, [r7, #32]
 80041e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80041ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80041f4:	88f8      	ldrh	r0, [r7, #6]
 80041f6:	893a      	ldrh	r2, [r7, #8]
 80041f8:	8979      	ldrh	r1, [r7, #10]
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	9301      	str	r3, [sp, #4]
 80041fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004200:	9300      	str	r3, [sp, #0]
 8004202:	4603      	mov	r3, r0
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f000 f921 	bl	800444c <I2C_RequestMemoryRead>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d005      	beq.n	800421c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e0ad      	b.n	8004378 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004220:	b29b      	uxth	r3, r3
 8004222:	2bff      	cmp	r3, #255	; 0xff
 8004224:	d90e      	bls.n	8004244 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	22ff      	movs	r2, #255	; 0xff
 800422a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004230:	b2da      	uxtb	r2, r3
 8004232:	8979      	ldrh	r1, [r7, #10]
 8004234:	4b52      	ldr	r3, [pc, #328]	; (8004380 <HAL_I2C_Mem_Read+0x22c>)
 8004236:	9300      	str	r3, [sp, #0]
 8004238:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	f000 fa9f 	bl	8004780 <I2C_TransferConfig>
 8004242:	e00f      	b.n	8004264 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004248:	b29a      	uxth	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004252:	b2da      	uxtb	r2, r3
 8004254:	8979      	ldrh	r1, [r7, #10]
 8004256:	4b4a      	ldr	r3, [pc, #296]	; (8004380 <HAL_I2C_Mem_Read+0x22c>)
 8004258:	9300      	str	r3, [sp, #0]
 800425a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	f000 fa8e 	bl	8004780 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	9300      	str	r3, [sp, #0]
 8004268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800426a:	2200      	movs	r2, #0
 800426c:	2104      	movs	r1, #4
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f000 f964 	bl	800453c <I2C_WaitOnFlagUntilTimeout>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e07c      	b.n	8004378 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004288:	b2d2      	uxtb	r2, r2
 800428a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004290:	1c5a      	adds	r2, r3, #1
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800429a:	3b01      	subs	r3, #1
 800429c:	b29a      	uxth	r2, r3
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	3b01      	subs	r3, #1
 80042aa:	b29a      	uxth	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d034      	beq.n	8004324 <HAL_I2C_Mem_Read+0x1d0>
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d130      	bne.n	8004324 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	9300      	str	r3, [sp, #0]
 80042c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c8:	2200      	movs	r2, #0
 80042ca:	2180      	movs	r1, #128	; 0x80
 80042cc:	68f8      	ldr	r0, [r7, #12]
 80042ce:	f000 f935 	bl	800453c <I2C_WaitOnFlagUntilTimeout>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d001      	beq.n	80042dc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e04d      	b.n	8004378 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	2bff      	cmp	r3, #255	; 0xff
 80042e4:	d90e      	bls.n	8004304 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	22ff      	movs	r2, #255	; 0xff
 80042ea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042f0:	b2da      	uxtb	r2, r3
 80042f2:	8979      	ldrh	r1, [r7, #10]
 80042f4:	2300      	movs	r3, #0
 80042f6:	9300      	str	r3, [sp, #0]
 80042f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80042fc:	68f8      	ldr	r0, [r7, #12]
 80042fe:	f000 fa3f 	bl	8004780 <I2C_TransferConfig>
 8004302:	e00f      	b.n	8004324 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004308:	b29a      	uxth	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004312:	b2da      	uxtb	r2, r3
 8004314:	8979      	ldrh	r1, [r7, #10]
 8004316:	2300      	movs	r3, #0
 8004318:	9300      	str	r3, [sp, #0]
 800431a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	f000 fa2e 	bl	8004780 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004328:	b29b      	uxth	r3, r3
 800432a:	2b00      	cmp	r3, #0
 800432c:	d19a      	bne.n	8004264 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800432e:	697a      	ldr	r2, [r7, #20]
 8004330:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004332:	68f8      	ldr	r0, [r7, #12]
 8004334:	f000 f982 	bl	800463c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e01a      	b.n	8004378 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2220      	movs	r2, #32
 8004348:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	6859      	ldr	r1, [r3, #4]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	4b0b      	ldr	r3, [pc, #44]	; (8004384 <HAL_I2C_Mem_Read+0x230>)
 8004356:	400b      	ands	r3, r1
 8004358:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2220      	movs	r2, #32
 800435e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004372:	2300      	movs	r3, #0
 8004374:	e000      	b.n	8004378 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004376:	2302      	movs	r3, #2
  }
}
 8004378:	4618      	mov	r0, r3
 800437a:	3718      	adds	r7, #24
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}
 8004380:	80002400 	.word	0x80002400
 8004384:	fe00e800 	.word	0xfe00e800

08004388 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004396:	b2db      	uxtb	r3, r3
}
 8004398:	4618      	mov	r0, r3
 800439a:	370c      	adds	r7, #12
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b086      	sub	sp, #24
 80043a8:	af02      	add	r7, sp, #8
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	4608      	mov	r0, r1
 80043ae:	4611      	mov	r1, r2
 80043b0:	461a      	mov	r2, r3
 80043b2:	4603      	mov	r3, r0
 80043b4:	817b      	strh	r3, [r7, #10]
 80043b6:	460b      	mov	r3, r1
 80043b8:	813b      	strh	r3, [r7, #8]
 80043ba:	4613      	mov	r3, r2
 80043bc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80043be:	88fb      	ldrh	r3, [r7, #6]
 80043c0:	b2da      	uxtb	r2, r3
 80043c2:	8979      	ldrh	r1, [r7, #10]
 80043c4:	4b20      	ldr	r3, [pc, #128]	; (8004448 <I2C_RequestMemoryWrite+0xa4>)
 80043c6:	9300      	str	r3, [sp, #0]
 80043c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043cc:	68f8      	ldr	r0, [r7, #12]
 80043ce:	f000 f9d7 	bl	8004780 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043d2:	69fa      	ldr	r2, [r7, #28]
 80043d4:	69b9      	ldr	r1, [r7, #24]
 80043d6:	68f8      	ldr	r0, [r7, #12]
 80043d8:	f000 f8f0 	bl	80045bc <I2C_WaitOnTXISFlagUntilTimeout>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d001      	beq.n	80043e6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e02c      	b.n	8004440 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043e6:	88fb      	ldrh	r3, [r7, #6]
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d105      	bne.n	80043f8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80043ec:	893b      	ldrh	r3, [r7, #8]
 80043ee:	b2da      	uxtb	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	629a      	str	r2, [r3, #40]	; 0x28
 80043f6:	e015      	b.n	8004424 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80043f8:	893b      	ldrh	r3, [r7, #8]
 80043fa:	0a1b      	lsrs	r3, r3, #8
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	b2da      	uxtb	r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004406:	69fa      	ldr	r2, [r7, #28]
 8004408:	69b9      	ldr	r1, [r7, #24]
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f000 f8d6 	bl	80045bc <I2C_WaitOnTXISFlagUntilTimeout>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e012      	b.n	8004440 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800441a:	893b      	ldrh	r3, [r7, #8]
 800441c:	b2da      	uxtb	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	9300      	str	r3, [sp, #0]
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	2200      	movs	r2, #0
 800442c:	2180      	movs	r1, #128	; 0x80
 800442e:	68f8      	ldr	r0, [r7, #12]
 8004430:	f000 f884 	bl	800453c <I2C_WaitOnFlagUntilTimeout>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d001      	beq.n	800443e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e000      	b.n	8004440 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800443e:	2300      	movs	r3, #0
}
 8004440:	4618      	mov	r0, r3
 8004442:	3710      	adds	r7, #16
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	80002000 	.word	0x80002000

0800444c <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b086      	sub	sp, #24
 8004450:	af02      	add	r7, sp, #8
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	4608      	mov	r0, r1
 8004456:	4611      	mov	r1, r2
 8004458:	461a      	mov	r2, r3
 800445a:	4603      	mov	r3, r0
 800445c:	817b      	strh	r3, [r7, #10]
 800445e:	460b      	mov	r3, r1
 8004460:	813b      	strh	r3, [r7, #8]
 8004462:	4613      	mov	r3, r2
 8004464:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004466:	88fb      	ldrh	r3, [r7, #6]
 8004468:	b2da      	uxtb	r2, r3
 800446a:	8979      	ldrh	r1, [r7, #10]
 800446c:	4b20      	ldr	r3, [pc, #128]	; (80044f0 <I2C_RequestMemoryRead+0xa4>)
 800446e:	9300      	str	r3, [sp, #0]
 8004470:	2300      	movs	r3, #0
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	f000 f984 	bl	8004780 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004478:	69fa      	ldr	r2, [r7, #28]
 800447a:	69b9      	ldr	r1, [r7, #24]
 800447c:	68f8      	ldr	r0, [r7, #12]
 800447e:	f000 f89d 	bl	80045bc <I2C_WaitOnTXISFlagUntilTimeout>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d001      	beq.n	800448c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e02c      	b.n	80044e6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800448c:	88fb      	ldrh	r3, [r7, #6]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d105      	bne.n	800449e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004492:	893b      	ldrh	r3, [r7, #8]
 8004494:	b2da      	uxtb	r2, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	629a      	str	r2, [r3, #40]	; 0x28
 800449c:	e015      	b.n	80044ca <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800449e:	893b      	ldrh	r3, [r7, #8]
 80044a0:	0a1b      	lsrs	r3, r3, #8
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	b2da      	uxtb	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044ac:	69fa      	ldr	r2, [r7, #28]
 80044ae:	69b9      	ldr	r1, [r7, #24]
 80044b0:	68f8      	ldr	r0, [r7, #12]
 80044b2:	f000 f883 	bl	80045bc <I2C_WaitOnTXISFlagUntilTimeout>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d001      	beq.n	80044c0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e012      	b.n	80044e6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80044c0:	893b      	ldrh	r3, [r7, #8]
 80044c2:	b2da      	uxtb	r2, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	9300      	str	r3, [sp, #0]
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	2200      	movs	r2, #0
 80044d2:	2140      	movs	r1, #64	; 0x40
 80044d4:	68f8      	ldr	r0, [r7, #12]
 80044d6:	f000 f831 	bl	800453c <I2C_WaitOnFlagUntilTimeout>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d001      	beq.n	80044e4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e000      	b.n	80044e6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3710      	adds	r7, #16
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	80002000 	.word	0x80002000

080044f4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	f003 0302 	and.w	r3, r3, #2
 8004506:	2b02      	cmp	r3, #2
 8004508:	d103      	bne.n	8004512 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2200      	movs	r2, #0
 8004510:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	f003 0301 	and.w	r3, r3, #1
 800451c:	2b01      	cmp	r3, #1
 800451e:	d007      	beq.n	8004530 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	699a      	ldr	r2, [r3, #24]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f042 0201 	orr.w	r2, r2, #1
 800452e:	619a      	str	r2, [r3, #24]
  }
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	603b      	str	r3, [r7, #0]
 8004548:	4613      	mov	r3, r2
 800454a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800454c:	e022      	b.n	8004594 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004554:	d01e      	beq.n	8004594 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004556:	f7fe fcb7 	bl	8002ec8 <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	683a      	ldr	r2, [r7, #0]
 8004562:	429a      	cmp	r2, r3
 8004564:	d302      	bcc.n	800456c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d113      	bne.n	8004594 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004570:	f043 0220 	orr.w	r2, r3, #32
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2220      	movs	r2, #32
 800457c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e00f      	b.n	80045b4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	699a      	ldr	r2, [r3, #24]
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	4013      	ands	r3, r2
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	bf0c      	ite	eq
 80045a4:	2301      	moveq	r3, #1
 80045a6:	2300      	movne	r3, #0
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	461a      	mov	r2, r3
 80045ac:	79fb      	ldrb	r3, [r7, #7]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d0cd      	beq.n	800454e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3710      	adds	r7, #16
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80045c8:	e02c      	b.n	8004624 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	68b9      	ldr	r1, [r7, #8]
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f000 f870 	bl	80046b4 <I2C_IsAcknowledgeFailed>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d001      	beq.n	80045de <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e02a      	b.n	8004634 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e4:	d01e      	beq.n	8004624 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045e6:	f7fe fc6f 	bl	8002ec8 <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	68ba      	ldr	r2, [r7, #8]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d302      	bcc.n	80045fc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d113      	bne.n	8004624 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004600:	f043 0220 	orr.w	r2, r3, #32
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2220      	movs	r2, #32
 800460c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2200      	movs	r2, #0
 8004614:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e007      	b.n	8004634 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	f003 0302 	and.w	r3, r3, #2
 800462e:	2b02      	cmp	r3, #2
 8004630:	d1cb      	bne.n	80045ca <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3710      	adds	r7, #16
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004648:	e028      	b.n	800469c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	68b9      	ldr	r1, [r7, #8]
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	f000 f830 	bl	80046b4 <I2C_IsAcknowledgeFailed>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d001      	beq.n	800465e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e026      	b.n	80046ac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800465e:	f7fe fc33 	bl	8002ec8 <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	68ba      	ldr	r2, [r7, #8]
 800466a:	429a      	cmp	r2, r3
 800466c:	d302      	bcc.n	8004674 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d113      	bne.n	800469c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004678:	f043 0220 	orr.w	r2, r3, #32
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2220      	movs	r2, #32
 8004684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e007      	b.n	80046ac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	699b      	ldr	r3, [r3, #24]
 80046a2:	f003 0320 	and.w	r3, r3, #32
 80046a6:	2b20      	cmp	r3, #32
 80046a8:	d1cf      	bne.n	800464a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3710      	adds	r7, #16
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	f003 0310 	and.w	r3, r3, #16
 80046ca:	2b10      	cmp	r3, #16
 80046cc:	d151      	bne.n	8004772 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046ce:	e022      	b.n	8004716 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d6:	d01e      	beq.n	8004716 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046d8:	f7fe fbf6 	bl	8002ec8 <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	68ba      	ldr	r2, [r7, #8]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d302      	bcc.n	80046ee <I2C_IsAcknowledgeFailed+0x3a>
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d113      	bne.n	8004716 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f2:	f043 0220 	orr.w	r2, r3, #32
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2220      	movs	r2, #32
 80046fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e02e      	b.n	8004774 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	f003 0320 	and.w	r3, r3, #32
 8004720:	2b20      	cmp	r3, #32
 8004722:	d1d5      	bne.n	80046d0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2210      	movs	r2, #16
 800472a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2220      	movs	r2, #32
 8004732:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004734:	68f8      	ldr	r0, [r7, #12]
 8004736:	f7ff fedd 	bl	80044f4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	6859      	ldr	r1, [r3, #4]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	4b0d      	ldr	r3, [pc, #52]	; (800477c <I2C_IsAcknowledgeFailed+0xc8>)
 8004746:	400b      	ands	r3, r1
 8004748:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800474e:	f043 0204 	orr.w	r2, r3, #4
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2220      	movs	r2, #32
 800475a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e000      	b.n	8004774 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	3710      	adds	r7, #16
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	fe00e800 	.word	0xfe00e800

08004780 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	607b      	str	r3, [r7, #4]
 800478a:	460b      	mov	r3, r1
 800478c:	817b      	strh	r3, [r7, #10]
 800478e:	4613      	mov	r3, r2
 8004790:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	685a      	ldr	r2, [r3, #4]
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	0d5b      	lsrs	r3, r3, #21
 800479c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80047a0:	4b0d      	ldr	r3, [pc, #52]	; (80047d8 <I2C_TransferConfig+0x58>)
 80047a2:	430b      	orrs	r3, r1
 80047a4:	43db      	mvns	r3, r3
 80047a6:	ea02 0103 	and.w	r1, r2, r3
 80047aa:	897b      	ldrh	r3, [r7, #10]
 80047ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80047b0:	7a7b      	ldrb	r3, [r7, #9]
 80047b2:	041b      	lsls	r3, r3, #16
 80047b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80047b8:	431a      	orrs	r2, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	431a      	orrs	r2, r3
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	431a      	orrs	r2, r3
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	430a      	orrs	r2, r1
 80047c8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80047ca:	bf00      	nop
 80047cc:	3714      	adds	r7, #20
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop
 80047d8:	03ff63ff 	.word	0x03ff63ff

080047dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b088      	sub	sp, #32
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80047e4:	2300      	movs	r3, #0
 80047e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80047e8:	2300      	movs	r3, #0
 80047ea:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80047ec:	2300      	movs	r3, #0
 80047ee:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80047f0:	2300      	movs	r3, #0
 80047f2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80047f4:	2300      	movs	r3, #0
 80047f6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0301 	and.w	r3, r3, #1
 8004800:	2b00      	cmp	r3, #0
 8004802:	d012      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004804:	4b69      	ldr	r3, [pc, #420]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	4a68      	ldr	r2, [pc, #416]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800480a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800480e:	6093      	str	r3, [r2, #8]
 8004810:	4b66      	ldr	r3, [pc, #408]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004812:	689a      	ldr	r2, [r3, #8]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004818:	4964      	ldr	r1, [pc, #400]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800481a:	4313      	orrs	r3, r2
 800481c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004822:	2b00      	cmp	r3, #0
 8004824:	d101      	bne.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004826:	2301      	movs	r3, #1
 8004828:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d017      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004836:	4b5d      	ldr	r3, [pc, #372]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004838:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800483c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004844:	4959      	ldr	r1, [pc, #356]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004846:	4313      	orrs	r3, r2
 8004848:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004850:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004854:	d101      	bne.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004856:	2301      	movs	r3, #1
 8004858:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800485e:	2b00      	cmp	r3, #0
 8004860:	d101      	bne.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004862:	2301      	movs	r3, #1
 8004864:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d017      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004872:	4b4e      	ldr	r3, [pc, #312]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004874:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004878:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004880:	494a      	ldr	r1, [pc, #296]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004882:	4313      	orrs	r3, r2
 8004884:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004890:	d101      	bne.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004892:	2301      	movs	r3, #1
 8004894:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489a:	2b00      	cmp	r3, #0
 800489c:	d101      	bne.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800489e:	2301      	movs	r3, #1
 80048a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d001      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80048ae:	2301      	movs	r3, #1
 80048b0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0320 	and.w	r3, r3, #32
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	f000 808b 	beq.w	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80048c0:	4b3a      	ldr	r3, [pc, #232]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c4:	4a39      	ldr	r2, [pc, #228]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048ca:	6413      	str	r3, [r2, #64]	; 0x40
 80048cc:	4b37      	ldr	r3, [pc, #220]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048d4:	60bb      	str	r3, [r7, #8]
 80048d6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80048d8:	4b35      	ldr	r3, [pc, #212]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a34      	ldr	r2, [pc, #208]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80048de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048e4:	f7fe faf0 	bl	8002ec8 <HAL_GetTick>
 80048e8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80048ea:	e008      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048ec:	f7fe faec 	bl	8002ec8 <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	2b64      	cmp	r3, #100	; 0x64
 80048f8:	d901      	bls.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e357      	b.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80048fe:	4b2c      	ldr	r3, [pc, #176]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004906:	2b00      	cmp	r3, #0
 8004908:	d0f0      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800490a:	4b28      	ldr	r3, [pc, #160]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800490c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800490e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004912:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d035      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004922:	693a      	ldr	r2, [r7, #16]
 8004924:	429a      	cmp	r2, r3
 8004926:	d02e      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004928:	4b20      	ldr	r3, [pc, #128]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800492a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800492c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004930:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004932:	4b1e      	ldr	r3, [pc, #120]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004936:	4a1d      	ldr	r2, [pc, #116]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800493c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800493e:	4b1b      	ldr	r3, [pc, #108]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004942:	4a1a      	ldr	r2, [pc, #104]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004944:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004948:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800494a:	4a18      	ldr	r2, [pc, #96]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004950:	4b16      	ldr	r3, [pc, #88]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004954:	f003 0301 	and.w	r3, r3, #1
 8004958:	2b01      	cmp	r3, #1
 800495a:	d114      	bne.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800495c:	f7fe fab4 	bl	8002ec8 <HAL_GetTick>
 8004960:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004962:	e00a      	b.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004964:	f7fe fab0 	bl	8002ec8 <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004972:	4293      	cmp	r3, r2
 8004974:	d901      	bls.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e319      	b.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800497a:	4b0c      	ldr	r3, [pc, #48]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800497c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800497e:	f003 0302 	and.w	r3, r3, #2
 8004982:	2b00      	cmp	r3, #0
 8004984:	d0ee      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800498e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004992:	d111      	bne.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004994:	4b05      	ldr	r3, [pc, #20]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80049a0:	4b04      	ldr	r3, [pc, #16]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80049a2:	400b      	ands	r3, r1
 80049a4:	4901      	ldr	r1, [pc, #4]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	608b      	str	r3, [r1, #8]
 80049aa:	e00b      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80049ac:	40023800 	.word	0x40023800
 80049b0:	40007000 	.word	0x40007000
 80049b4:	0ffffcff 	.word	0x0ffffcff
 80049b8:	4bb1      	ldr	r3, [pc, #708]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	4ab0      	ldr	r2, [pc, #704]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049be:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80049c2:	6093      	str	r3, [r2, #8]
 80049c4:	4bae      	ldr	r3, [pc, #696]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049d0:	49ab      	ldr	r1, [pc, #684]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0310 	and.w	r3, r3, #16
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d010      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80049e2:	4ba7      	ldr	r3, [pc, #668]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049e8:	4aa5      	ldr	r2, [pc, #660]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049ee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80049f2:	4ba3      	ldr	r3, [pc, #652]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049f4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fc:	49a0      	ldr	r1, [pc, #640]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00a      	beq.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a10:	4b9b      	ldr	r3, [pc, #620]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a16:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a1e:	4998      	ldr	r1, [pc, #608]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00a      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a32:	4b93      	ldr	r3, [pc, #588]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a38:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a40:	498f      	ldr	r1, [pc, #572]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d00a      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a54:	4b8a      	ldr	r3, [pc, #552]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a62:	4987      	ldr	r1, [pc, #540]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a64:	4313      	orrs	r3, r2
 8004a66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00a      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a76:	4b82      	ldr	r3, [pc, #520]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a7c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a84:	497e      	ldr	r1, [pc, #504]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a86:	4313      	orrs	r3, r2
 8004a88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d00a      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a98:	4b79      	ldr	r3, [pc, #484]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a9e:	f023 0203 	bic.w	r2, r3, #3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aa6:	4976      	ldr	r1, [pc, #472]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00a      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004aba:	4b71      	ldr	r3, [pc, #452]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ac0:	f023 020c 	bic.w	r2, r3, #12
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ac8:	496d      	ldr	r1, [pc, #436]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00a      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004adc:	4b68      	ldr	r3, [pc, #416]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ae2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aea:	4965      	ldr	r1, [pc, #404]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00a      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004afe:	4b60      	ldr	r3, [pc, #384]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b04:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b0c:	495c      	ldr	r1, [pc, #368]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d00a      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b20:	4b57      	ldr	r3, [pc, #348]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b26:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b2e:	4954      	ldr	r1, [pc, #336]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00a      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004b42:	4b4f      	ldr	r3, [pc, #316]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b48:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b50:	494b      	ldr	r1, [pc, #300]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00a      	beq.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004b64:	4b46      	ldr	r3, [pc, #280]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b6a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b72:	4943      	ldr	r1, [pc, #268]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d00a      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004b86:	4b3e      	ldr	r3, [pc, #248]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b8c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b94:	493a      	ldr	r1, [pc, #232]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d00a      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004ba8:	4b35      	ldr	r3, [pc, #212]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bae:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bb6:	4932      	ldr	r1, [pc, #200]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d011      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004bca:	4b2d      	ldr	r3, [pc, #180]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bd0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bd8:	4929      	ldr	r1, [pc, #164]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004be4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004be8:	d101      	bne.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004bea:	2301      	movs	r3, #1
 8004bec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0308 	and.w	r3, r3, #8
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d001      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00a      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c0a:	4b1d      	ldr	r3, [pc, #116]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c10:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c18:	4919      	ldr	r1, [pc, #100]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d00b      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c2c:	4b14      	ldr	r3, [pc, #80]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c32:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c3c:	4910      	ldr	r1, [pc, #64]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d006      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	f000 80d9 	beq.w	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c58:	4b09      	ldr	r3, [pc, #36]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a08      	ldr	r2, [pc, #32]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004c5e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c64:	f7fe f930 	bl	8002ec8 <HAL_GetTick>
 8004c68:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c6a:	e00b      	b.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c6c:	f7fe f92c 	bl	8002ec8 <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	2b64      	cmp	r3, #100	; 0x64
 8004c78:	d904      	bls.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e197      	b.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004c7e:	bf00      	nop
 8004c80:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c84:	4b6c      	ldr	r3, [pc, #432]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d1ed      	bne.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0301 	and.w	r3, r3, #1
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d021      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d11d      	bne.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004ca4:	4b64      	ldr	r3, [pc, #400]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ca6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004caa:	0c1b      	lsrs	r3, r3, #16
 8004cac:	f003 0303 	and.w	r3, r3, #3
 8004cb0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004cb2:	4b61      	ldr	r3, [pc, #388]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cb8:	0e1b      	lsrs	r3, r3, #24
 8004cba:	f003 030f 	and.w	r3, r3, #15
 8004cbe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	019a      	lsls	r2, r3, #6
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	041b      	lsls	r3, r3, #16
 8004cca:	431a      	orrs	r2, r3
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	061b      	lsls	r3, r3, #24
 8004cd0:	431a      	orrs	r2, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	071b      	lsls	r3, r3, #28
 8004cd8:	4957      	ldr	r1, [pc, #348]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d004      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cf4:	d00a      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d02e      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d0a:	d129      	bne.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004d0c:	4b4a      	ldr	r3, [pc, #296]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d12:	0c1b      	lsrs	r3, r3, #16
 8004d14:	f003 0303 	and.w	r3, r3, #3
 8004d18:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004d1a:	4b47      	ldr	r3, [pc, #284]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d20:	0f1b      	lsrs	r3, r3, #28
 8004d22:	f003 0307 	and.w	r3, r3, #7
 8004d26:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	019a      	lsls	r2, r3, #6
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	041b      	lsls	r3, r3, #16
 8004d32:	431a      	orrs	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	061b      	lsls	r3, r3, #24
 8004d3a:	431a      	orrs	r2, r3
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	071b      	lsls	r3, r3, #28
 8004d40:	493d      	ldr	r1, [pc, #244]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004d48:	4b3b      	ldr	r3, [pc, #236]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d4e:	f023 021f 	bic.w	r2, r3, #31
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d56:	3b01      	subs	r3, #1
 8004d58:	4937      	ldr	r1, [pc, #220]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d01d      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004d6c:	4b32      	ldr	r3, [pc, #200]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d72:	0e1b      	lsrs	r3, r3, #24
 8004d74:	f003 030f 	and.w	r3, r3, #15
 8004d78:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004d7a:	4b2f      	ldr	r3, [pc, #188]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d80:	0f1b      	lsrs	r3, r3, #28
 8004d82:	f003 0307 	and.w	r3, r3, #7
 8004d86:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	019a      	lsls	r2, r3, #6
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	041b      	lsls	r3, r3, #16
 8004d94:	431a      	orrs	r2, r3
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	061b      	lsls	r3, r3, #24
 8004d9a:	431a      	orrs	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	071b      	lsls	r3, r3, #28
 8004da0:	4925      	ldr	r1, [pc, #148]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004da2:	4313      	orrs	r3, r2
 8004da4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d011      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	019a      	lsls	r2, r3, #6
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	041b      	lsls	r3, r3, #16
 8004dc0:	431a      	orrs	r2, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	061b      	lsls	r3, r3, #24
 8004dc8:	431a      	orrs	r2, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	071b      	lsls	r3, r3, #28
 8004dd0:	4919      	ldr	r1, [pc, #100]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004dd8:	4b17      	ldr	r3, [pc, #92]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a16      	ldr	r2, [pc, #88]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004dde:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004de2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004de4:	f7fe f870 	bl	8002ec8 <HAL_GetTick>
 8004de8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004dea:	e008      	b.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004dec:	f7fe f86c 	bl	8002ec8 <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	2b64      	cmp	r3, #100	; 0x64
 8004df8:	d901      	bls.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e0d7      	b.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004dfe:	4b0e      	ldr	r3, [pc, #56]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d0f0      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	f040 80cd 	bne.w	8004fac <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004e12:	4b09      	ldr	r3, [pc, #36]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a08      	ldr	r2, [pc, #32]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e1e:	f7fe f853 	bl	8002ec8 <HAL_GetTick>
 8004e22:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e24:	e00a      	b.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004e26:	f7fe f84f 	bl	8002ec8 <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	2b64      	cmp	r3, #100	; 0x64
 8004e32:	d903      	bls.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e0ba      	b.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004e38:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e3c:	4b5e      	ldr	r3, [pc, #376]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e48:	d0ed      	beq.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d003      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d009      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d02e      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d12a      	bne.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004e72:	4b51      	ldr	r3, [pc, #324]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e78:	0c1b      	lsrs	r3, r3, #16
 8004e7a:	f003 0303 	and.w	r3, r3, #3
 8004e7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004e80:	4b4d      	ldr	r3, [pc, #308]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e86:	0f1b      	lsrs	r3, r3, #28
 8004e88:	f003 0307 	and.w	r3, r3, #7
 8004e8c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	019a      	lsls	r2, r3, #6
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	041b      	lsls	r3, r3, #16
 8004e98:	431a      	orrs	r2, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	061b      	lsls	r3, r3, #24
 8004ea0:	431a      	orrs	r2, r3
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	071b      	lsls	r3, r3, #28
 8004ea6:	4944      	ldr	r1, [pc, #272]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004eae:	4b42      	ldr	r3, [pc, #264]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004eb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004eb4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	021b      	lsls	r3, r3, #8
 8004ec0:	493d      	ldr	r1, [pc, #244]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d022      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ed8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004edc:	d11d      	bne.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004ede:	4b36      	ldr	r3, [pc, #216]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ee4:	0e1b      	lsrs	r3, r3, #24
 8004ee6:	f003 030f 	and.w	r3, r3, #15
 8004eea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004eec:	4b32      	ldr	r3, [pc, #200]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ef2:	0f1b      	lsrs	r3, r3, #28
 8004ef4:	f003 0307 	and.w	r3, r3, #7
 8004ef8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	019a      	lsls	r2, r3, #6
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a1b      	ldr	r3, [r3, #32]
 8004f04:	041b      	lsls	r3, r3, #16
 8004f06:	431a      	orrs	r2, r3
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	061b      	lsls	r3, r3, #24
 8004f0c:	431a      	orrs	r2, r3
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	071b      	lsls	r3, r3, #28
 8004f12:	4929      	ldr	r1, [pc, #164]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f14:	4313      	orrs	r3, r2
 8004f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0308 	and.w	r3, r3, #8
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d028      	beq.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004f26:	4b24      	ldr	r3, [pc, #144]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f2c:	0e1b      	lsrs	r3, r3, #24
 8004f2e:	f003 030f 	and.w	r3, r3, #15
 8004f32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004f34:	4b20      	ldr	r3, [pc, #128]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f3a:	0c1b      	lsrs	r3, r3, #16
 8004f3c:	f003 0303 	and.w	r3, r3, #3
 8004f40:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	019a      	lsls	r2, r3, #6
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	041b      	lsls	r3, r3, #16
 8004f4c:	431a      	orrs	r2, r3
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	061b      	lsls	r3, r3, #24
 8004f52:	431a      	orrs	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	69db      	ldr	r3, [r3, #28]
 8004f58:	071b      	lsls	r3, r3, #28
 8004f5a:	4917      	ldr	r1, [pc, #92]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004f62:	4b15      	ldr	r3, [pc, #84]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f68:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f70:	4911      	ldr	r1, [pc, #68]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f72:	4313      	orrs	r3, r2
 8004f74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004f78:	4b0f      	ldr	r3, [pc, #60]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a0e      	ldr	r2, [pc, #56]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f84:	f7fd ffa0 	bl	8002ec8 <HAL_GetTick>
 8004f88:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f8a:	e008      	b.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004f8c:	f7fd ff9c 	bl	8002ec8 <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	2b64      	cmp	r3, #100	; 0x64
 8004f98:	d901      	bls.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e007      	b.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f9e:	4b06      	ldr	r3, [pc, #24]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fa6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004faa:	d1ef      	bne.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3720      	adds	r7, #32
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	40023800 	.word	0x40023800

08004fbc <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b085      	sub	sp, #20
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	60fb      	str	r3, [r7, #12]
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a80      	ldr	r2, [pc, #512]	; (80051cc <HAL_RCCEx_GetPeriphCLKConfig+0x210>)
 8004fcc:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8004fce:	4b80      	ldr	r3, [pc, #512]	; (80051d0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8004fd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fd4:	099b      	lsrs	r3, r3, #6
 8004fd6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004fde:	4b7c      	ldr	r3, [pc, #496]	; (80051d0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8004fe0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fe4:	0c1b      	lsrs	r3, r3, #16
 8004fe6:	f003 0203 	and.w	r2, r3, #3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004fee:	4b78      	ldr	r3, [pc, #480]	; (80051d0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8004ff0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ff4:	0e1b      	lsrs	r3, r3, #24
 8004ff6:	f003 020f 	and.w	r2, r3, #15
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004ffe:	4b74      	ldr	r3, [pc, #464]	; (80051d0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8005000:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005004:	0f1b      	lsrs	r3, r3, #28
 8005006:	f003 0207 	and.w	r2, r3, #7
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	609a      	str	r2, [r3, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 800500e:	4b70      	ldr	r3, [pc, #448]	; (80051d0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8005010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005014:	099b      	lsrs	r3, r3, #6
 8005016:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800501e:	4b6c      	ldr	r3, [pc, #432]	; (80051d0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8005020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005024:	0c1b      	lsrs	r3, r3, #16
 8005026:	f003 0203 	and.w	r2, r3, #3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800502e:	4b68      	ldr	r3, [pc, #416]	; (80051d0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8005030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005034:	0e1b      	lsrs	r3, r3, #24
 8005036:	f003 020f 	and.w	r2, r3, #15
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800503e:	4b64      	ldr	r3, [pc, #400]	; (80051d0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8005040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005044:	0f1b      	lsrs	r3, r3, #28
 8005046:	f003 0207 	and.w	r2, r3, #7
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	61da      	str	r2, [r3, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 800504e:	4b60      	ldr	r3, [pc, #384]	; (80051d0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8005050:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005054:	f003 021f 	and.w	r2, r3, #31
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 800505c:	4b5c      	ldr	r3, [pc, #368]	; (80051d0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800505e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005062:	0a1b      	lsrs	r3, r3, #8
 8005064:	f003 021f 	and.w	r2, r3, #31
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 800506c:	4b58      	ldr	r3, [pc, #352]	; (80051d0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800506e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005072:	0c1b      	lsrs	r3, r3, #16
 8005074:	f003 0203 	and.w	r2, r3, #3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 800507c:	4b54      	ldr	r3, [pc, #336]	; (80051d0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800507e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005082:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 800508a:	4b51      	ldr	r3, [pc, #324]	; (80051d0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800508c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005090:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 8005098:	4b4d      	ldr	r3, [pc, #308]	; (80051d0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	f403 0200 	and.w	r2, r3, #8388608	; 0x800000
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 80050a4:	4b4a      	ldr	r3, [pc, #296]	; (80051d0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80050a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 80050b2:	4b47      	ldr	r3, [pc, #284]	; (80051d0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80050b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b8:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	669a      	str	r2, [r3, #104]	; 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 80050c0:	4b43      	ldr	r3, [pc, #268]	; (80051d0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80050c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050c6:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 80050ce:	4b40      	ldr	r3, [pc, #256]	; (80051d0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80050d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d4:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	671a      	str	r2, [r3, #112]	; 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 80050dc:	4b3c      	ldr	r3, [pc, #240]	; (80051d0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80050de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050e2:	f003 0203 	and.w	r2, r3, #3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 80050ea:	4b39      	ldr	r3, [pc, #228]	; (80051d0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80050ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050f0:	f003 020c 	and.w	r2, r3, #12
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	649a      	str	r2, [r3, #72]	; 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 80050f8:	4b35      	ldr	r3, [pc, #212]	; (80051d0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80050fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050fe:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 8005106:	4b32      	ldr	r3, [pc, #200]	; (80051d0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8005108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800510c:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	651a      	str	r2, [r3, #80]	; 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 8005114:	4b2e      	ldr	r3, [pc, #184]	; (80051d0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8005116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800511a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 8005122:	4b2b      	ldr	r3, [pc, #172]	; (80051d0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8005124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005128:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 8005130:	4b27      	ldr	r3, [pc, #156]	; (80051d0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8005132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005136:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 800513e:	4b24      	ldr	r3, [pc, #144]	; (80051d0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8005140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005144:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 800514c:	4b20      	ldr	r3, [pc, #128]	; (80051d0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800514e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005152:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	675a      	str	r2, [r3, #116]	; 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 800515a:	4b1d      	ldr	r3, [pc, #116]	; (80051d0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800515c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005160:	f003 6280 	and.w	r2, r3, #67108864	; 0x4000000
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	679a      	str	r2, [r3, #120]	; 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 8005168:	4b19      	ldr	r3, [pc, #100]	; (80051d0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800516a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800516e:	f003 6200 	and.w	r2, r3, #134217728	; 0x8000000
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 8005176:	4b16      	ldr	r3, [pc, #88]	; (80051d0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8005178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800517c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8005186:	4b12      	ldr	r3, [pc, #72]	; (80051d0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800518e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8005190:	4b0f      	ldr	r3, [pc, #60]	; (80051d0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8005192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005194:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	431a      	orrs	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 80051a0:	4b0b      	ldr	r3, [pc, #44]	; (80051d0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80051a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d103      	bne.n	80051b6 <HAL_RCCEx_GetPeriphCLKConfig+0x1fa>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 80051b4:	e003      	b.n	80051be <HAL_RCCEx_GetPeriphCLKConfig+0x202>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80051bc:	639a      	str	r2, [r3, #56]	; 0x38
}
 80051be:	bf00      	nop
 80051c0:	3714      	adds	r7, #20
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	00fffff1 	.word	0x00fffff1
 80051d0:	40023800 	.word	0x40023800

080051d4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b087      	sub	sp, #28
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80051dc:	2300      	movs	r3, #0
 80051de:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 80051e0:	2300      	movs	r3, #0
 80051e2:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 80051e4:	2300      	movs	r3, #0
 80051e6:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 80051e8:	2300      	movs	r3, #0
 80051ea:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80051f2:	f040 808c 	bne.w	800530e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 80051f6:	4b95      	ldr	r3, [pc, #596]	; (800544c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80051f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051fc:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005204:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800520c:	d07c      	beq.n	8005308 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005214:	d87d      	bhi.n	8005312 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d004      	beq.n	8005226 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005222:	d039      	beq.n	8005298 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8005224:	e075      	b.n	8005312 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005226:	4b89      	ldr	r3, [pc, #548]	; (800544c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d108      	bne.n	8005244 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005232:	4b86      	ldr	r3, [pc, #536]	; (800544c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800523a:	4a85      	ldr	r2, [pc, #532]	; (8005450 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800523c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005240:	613b      	str	r3, [r7, #16]
 8005242:	e007      	b.n	8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005244:	4b81      	ldr	r3, [pc, #516]	; (800544c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800524c:	4a81      	ldr	r2, [pc, #516]	; (8005454 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800524e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005252:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8005254:	4b7d      	ldr	r3, [pc, #500]	; (800544c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800525a:	0e1b      	lsrs	r3, r3, #24
 800525c:	f003 030f 	and.w	r3, r3, #15
 8005260:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8005262:	4b7a      	ldr	r3, [pc, #488]	; (800544c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005268:	099b      	lsrs	r3, r3, #6
 800526a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800526e:	693a      	ldr	r2, [r7, #16]
 8005270:	fb02 f203 	mul.w	r2, r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	fbb2 f3f3 	udiv	r3, r2, r3
 800527a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800527c:	4b73      	ldr	r3, [pc, #460]	; (800544c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800527e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005282:	0a1b      	lsrs	r3, r3, #8
 8005284:	f003 031f 	and.w	r3, r3, #31
 8005288:	3301      	adds	r3, #1
 800528a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800528c:	697a      	ldr	r2, [r7, #20]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	fbb2 f3f3 	udiv	r3, r2, r3
 8005294:	617b      	str	r3, [r7, #20]
        break;
 8005296:	e03d      	b.n	8005314 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005298:	4b6c      	ldr	r3, [pc, #432]	; (800544c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d108      	bne.n	80052b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80052a4:	4b69      	ldr	r3, [pc, #420]	; (800544c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052ac:	4a68      	ldr	r2, [pc, #416]	; (8005450 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80052ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80052b2:	613b      	str	r3, [r7, #16]
 80052b4:	e007      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80052b6:	4b65      	ldr	r3, [pc, #404]	; (800544c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052be:	4a65      	ldr	r2, [pc, #404]	; (8005454 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80052c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052c4:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80052c6:	4b61      	ldr	r3, [pc, #388]	; (800544c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80052c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052cc:	0e1b      	lsrs	r3, r3, #24
 80052ce:	f003 030f 	and.w	r3, r3, #15
 80052d2:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80052d4:	4b5d      	ldr	r3, [pc, #372]	; (800544c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80052d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052da:	099b      	lsrs	r3, r3, #6
 80052dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052e0:	693a      	ldr	r2, [r7, #16]
 80052e2:	fb02 f203 	mul.w	r2, r2, r3
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ec:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80052ee:	4b57      	ldr	r3, [pc, #348]	; (800544c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80052f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052f4:	f003 031f 	and.w	r3, r3, #31
 80052f8:	3301      	adds	r3, #1
 80052fa:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80052fc:	697a      	ldr	r2, [r7, #20]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	fbb2 f3f3 	udiv	r3, r2, r3
 8005304:	617b      	str	r3, [r7, #20]
        break;
 8005306:	e005      	b.n	8005314 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 8005308:	4b53      	ldr	r3, [pc, #332]	; (8005458 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800530a:	617b      	str	r3, [r7, #20]
        break;
 800530c:	e002      	b.n	8005314 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 800530e:	bf00      	nop
 8005310:	e000      	b.n	8005314 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 8005312:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800531a:	f040 808c 	bne.w	8005436 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 800531e:	4b4b      	ldr	r3, [pc, #300]	; (800544c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005320:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005324:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800532c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005334:	d07c      	beq.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800533c:	d87d      	bhi.n	800543a <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d004      	beq.n	800534e <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800534a:	d039      	beq.n	80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800534c:	e075      	b.n	800543a <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800534e:	4b3f      	ldr	r3, [pc, #252]	; (800544c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005356:	2b00      	cmp	r3, #0
 8005358:	d108      	bne.n	800536c <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800535a:	4b3c      	ldr	r3, [pc, #240]	; (800544c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005362:	4a3b      	ldr	r2, [pc, #236]	; (8005450 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8005364:	fbb2 f3f3 	udiv	r3, r2, r3
 8005368:	613b      	str	r3, [r7, #16]
 800536a:	e007      	b.n	800537c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800536c:	4b37      	ldr	r3, [pc, #220]	; (800544c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005374:	4a37      	ldr	r2, [pc, #220]	; (8005454 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005376:	fbb2 f3f3 	udiv	r3, r2, r3
 800537a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800537c:	4b33      	ldr	r3, [pc, #204]	; (800544c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800537e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005382:	0e1b      	lsrs	r3, r3, #24
 8005384:	f003 030f 	and.w	r3, r3, #15
 8005388:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800538a:	4b30      	ldr	r3, [pc, #192]	; (800544c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800538c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005390:	099b      	lsrs	r3, r3, #6
 8005392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005396:	693a      	ldr	r2, [r7, #16]
 8005398:	fb02 f203 	mul.w	r2, r2, r3
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	fbb2 f3f3 	udiv	r3, r2, r3
 80053a2:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80053a4:	4b29      	ldr	r3, [pc, #164]	; (800544c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80053a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053aa:	0a1b      	lsrs	r3, r3, #8
 80053ac:	f003 031f 	and.w	r3, r3, #31
 80053b0:	3301      	adds	r3, #1
 80053b2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80053b4:	697a      	ldr	r2, [r7, #20]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053bc:	617b      	str	r3, [r7, #20]
        break;
 80053be:	e03d      	b.n	800543c <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80053c0:	4b22      	ldr	r3, [pc, #136]	; (800544c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d108      	bne.n	80053de <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80053cc:	4b1f      	ldr	r3, [pc, #124]	; (800544c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053d4:	4a1e      	ldr	r2, [pc, #120]	; (8005450 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80053d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80053da:	613b      	str	r3, [r7, #16]
 80053dc:	e007      	b.n	80053ee <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80053de:	4b1b      	ldr	r3, [pc, #108]	; (800544c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053e6:	4a1b      	ldr	r2, [pc, #108]	; (8005454 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80053e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ec:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80053ee:	4b17      	ldr	r3, [pc, #92]	; (800544c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80053f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053f4:	0e1b      	lsrs	r3, r3, #24
 80053f6:	f003 030f 	and.w	r3, r3, #15
 80053fa:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80053fc:	4b13      	ldr	r3, [pc, #76]	; (800544c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80053fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005402:	099b      	lsrs	r3, r3, #6
 8005404:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005408:	693a      	ldr	r2, [r7, #16]
 800540a:	fb02 f203 	mul.w	r2, r2, r3
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	fbb2 f3f3 	udiv	r3, r2, r3
 8005414:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8005416:	4b0d      	ldr	r3, [pc, #52]	; (800544c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005418:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800541c:	f003 031f 	and.w	r3, r3, #31
 8005420:	3301      	adds	r3, #1
 8005422:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005424:	697a      	ldr	r2, [r7, #20]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	fbb2 f3f3 	udiv	r3, r2, r3
 800542c:	617b      	str	r3, [r7, #20]
        break;
 800542e:	e005      	b.n	800543c <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 8005430:	4b09      	ldr	r3, [pc, #36]	; (8005458 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005432:	617b      	str	r3, [r7, #20]
        break;
 8005434:	e002      	b.n	800543c <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 8005436:	bf00      	nop
 8005438:	e000      	b.n	800543c <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 800543a:	bf00      	nop

  return frequency;
 800543c:	697b      	ldr	r3, [r7, #20]
}
 800543e:	4618      	mov	r0, r3
 8005440:	371c      	adds	r7, #28
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	40023800 	.word	0x40023800
 8005450:	00f42400 	.word	0x00f42400
 8005454:	017d7840 	.word	0x017d7840
 8005458:	00bb8000 	.word	0x00bb8000

0800545c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b088      	sub	sp, #32
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8005464:	2300      	movs	r3, #0
 8005466:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8005468:	2300      	movs	r3, #0
 800546a:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800546c:	2300      	movs	r3, #0
 800546e:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d101      	bne.n	800547a <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e156      	b.n	8005728 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8005480:	b2db      	uxtb	r3, r3
 8005482:	2b00      	cmp	r3, #0
 8005484:	d106      	bne.n	8005494 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f7fd fb54 	bl	8002b3c <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2202      	movs	r2, #2
 8005498:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 fb13 	bl	8005ac8 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d00c      	beq.n	80054c4 <HAL_SAI_Init+0x68>
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d80d      	bhi.n	80054ca <HAL_SAI_Init+0x6e>
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d002      	beq.n	80054b8 <HAL_SAI_Init+0x5c>
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d003      	beq.n	80054be <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 80054b6:	e008      	b.n	80054ca <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 80054b8:	2300      	movs	r3, #0
 80054ba:	61fb      	str	r3, [r7, #28]
      break;
 80054bc:	e006      	b.n	80054cc <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80054be:	2310      	movs	r3, #16
 80054c0:	61fb      	str	r3, [r7, #28]
      break;
 80054c2:	e003      	b.n	80054cc <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80054c4:	2320      	movs	r3, #32
 80054c6:	61fb      	str	r3, [r7, #28]
      break;
 80054c8:	e000      	b.n	80054cc <HAL_SAI_Init+0x70>
      break;
 80054ca:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	2b03      	cmp	r3, #3
 80054d2:	d81e      	bhi.n	8005512 <HAL_SAI_Init+0xb6>
 80054d4:	a201      	add	r2, pc, #4	; (adr r2, 80054dc <HAL_SAI_Init+0x80>)
 80054d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054da:	bf00      	nop
 80054dc:	080054ed 	.word	0x080054ed
 80054e0:	080054f3 	.word	0x080054f3
 80054e4:	080054fb 	.word	0x080054fb
 80054e8:	08005503 	.word	0x08005503
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 80054ec:	2300      	movs	r3, #0
 80054ee:	617b      	str	r3, [r7, #20]
    }
    break;
 80054f0:	e010      	b.n	8005514 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80054f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054f6:	617b      	str	r3, [r7, #20]
    }
    break;
 80054f8:	e00c      	b.n	8005514 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80054fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80054fe:	617b      	str	r3, [r7, #20]
    }
    break;
 8005500:	e008      	b.n	8005514 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005502:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005506:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	f043 0301 	orr.w	r3, r3, #1
 800550e:	61fb      	str	r3, [r7, #28]
    }
    break;
 8005510:	e000      	b.n	8005514 <HAL_SAI_Init+0xb8>
    default:
      break;
 8005512:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a85      	ldr	r2, [pc, #532]	; (8005730 <HAL_SAI_Init+0x2d4>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d004      	beq.n	8005528 <HAL_SAI_Init+0xcc>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a84      	ldr	r2, [pc, #528]	; (8005734 <HAL_SAI_Init+0x2d8>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d103      	bne.n	8005530 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8005528:	4a83      	ldr	r2, [pc, #524]	; (8005738 <HAL_SAI_Init+0x2dc>)
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	6013      	str	r3, [r2, #0]
 800552e:	e002      	b.n	8005536 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8005530:	4a82      	ldr	r2, [pc, #520]	; (800573c <HAL_SAI_Init+0x2e0>)
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	69db      	ldr	r3, [r3, #28]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d04c      	beq.n	80055d8 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800553e:	2300      	movs	r3, #0
 8005540:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a7a      	ldr	r2, [pc, #488]	; (8005730 <HAL_SAI_Init+0x2d4>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d004      	beq.n	8005556 <HAL_SAI_Init+0xfa>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a78      	ldr	r2, [pc, #480]	; (8005734 <HAL_SAI_Init+0x2d8>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d104      	bne.n	8005560 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8005556:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800555a:	f7ff fe3b 	bl	80051d4 <HAL_RCCEx_GetPeriphCLKFreq>
 800555e:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a76      	ldr	r2, [pc, #472]	; (8005740 <HAL_SAI_Init+0x2e4>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d004      	beq.n	8005574 <HAL_SAI_Init+0x118>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a75      	ldr	r2, [pc, #468]	; (8005744 <HAL_SAI_Init+0x2e8>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d104      	bne.n	800557e <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8005574:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005578:	f7ff fe2c 	bl	80051d4 <HAL_RCCEx_GetPeriphCLKFreq>
 800557c:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800557e:	693a      	ldr	r2, [r7, #16]
 8005580:	4613      	mov	r3, r2
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	4413      	add	r3, r2
 8005586:	005b      	lsls	r3, r3, #1
 8005588:	461a      	mov	r2, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	69db      	ldr	r3, [r3, #28]
 800558e:	025b      	lsls	r3, r3, #9
 8005590:	fbb2 f3f3 	udiv	r3, r2, r3
 8005594:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	4a6b      	ldr	r2, [pc, #428]	; (8005748 <HAL_SAI_Init+0x2ec>)
 800559a:	fba2 2303 	umull	r2, r3, r2, r3
 800559e:	08da      	lsrs	r2, r3, #3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 80055a4:	68f9      	ldr	r1, [r7, #12]
 80055a6:	4b68      	ldr	r3, [pc, #416]	; (8005748 <HAL_SAI_Init+0x2ec>)
 80055a8:	fba3 2301 	umull	r2, r3, r3, r1
 80055ac:	08da      	lsrs	r2, r3, #3
 80055ae:	4613      	mov	r3, r2
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	4413      	add	r3, r2
 80055b4:	005b      	lsls	r3, r3, #1
 80055b6:	1aca      	subs	r2, r1, r3
 80055b8:	2a08      	cmp	r2, #8
 80055ba:	d904      	bls.n	80055c6 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6a1b      	ldr	r3, [r3, #32]
 80055c0:	1c5a      	adds	r2, r3, #1
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ca:	2b04      	cmp	r3, #4
 80055cc:	d104      	bne.n	80055d8 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a1b      	ldr	r3, [r3, #32]
 80055d2:	085a      	lsrs	r2, r3, #1
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d003      	beq.n	80055e8 <HAL_SAI_Init+0x18c>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	d109      	bne.n	80055fc <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d101      	bne.n	80055f4 <HAL_SAI_Init+0x198>
 80055f0:	2300      	movs	r3, #0
 80055f2:	e001      	b.n	80055f8 <HAL_SAI_Init+0x19c>
 80055f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055f8:	61bb      	str	r3, [r7, #24]
 80055fa:	e008      	b.n	800560e <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005600:	2b01      	cmp	r3, #1
 8005602:	d102      	bne.n	800560a <HAL_SAI_Init+0x1ae>
 8005604:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005608:	e000      	b.n	800560c <HAL_SAI_Init+0x1b0>
 800560a:	2300      	movs	r3, #0
 800560c:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	6819      	ldr	r1, [r3, #0]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	4b4c      	ldr	r3, [pc, #304]	; (800574c <HAL_SAI_Init+0x2f0>)
 800561a:	400b      	ands	r3, r1
 800561c:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	6819      	ldr	r1, [r3, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685a      	ldr	r2, [r3, #4]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800562c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005632:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005638:	431a      	orrs	r2, r3
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 8005646:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005652:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6a1b      	ldr	r3, [r3, #32]
 8005658:	051b      	lsls	r3, r3, #20
 800565a:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	430a      	orrs	r2, r1
 8005662:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	6859      	ldr	r1, [r3, #4]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	4b38      	ldr	r3, [pc, #224]	; (8005750 <HAL_SAI_Init+0x2f4>)
 8005670:	400b      	ands	r3, r1
 8005672:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	6859      	ldr	r1, [r3, #4]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	699a      	ldr	r2, [r3, #24]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005682:	431a      	orrs	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005688:	431a      	orrs	r2, r3
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	430a      	orrs	r2, r1
 8005690:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	6899      	ldr	r1, [r3, #8]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	4b2d      	ldr	r3, [pc, #180]	; (8005754 <HAL_SAI_Init+0x2f8>)
 800569e:	400b      	ands	r3, r1
 80056a0:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	6899      	ldr	r1, [r3, #8]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ac:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80056b2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 80056b8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 80056be:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056c4:	3b01      	subs	r3, #1
 80056c6:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80056c8:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	430a      	orrs	r2, r1
 80056d0:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	68d9      	ldr	r1, [r3, #12]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	f24f 0320 	movw	r3, #61472	; 0xf020
 80056e0:	400b      	ands	r3, r1
 80056e2:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68d9      	ldr	r1, [r3, #12]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056f2:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056f8:	041b      	lsls	r3, r3, #16
 80056fa:	431a      	orrs	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005700:	3b01      	subs	r3, #1
 8005702:	021b      	lsls	r3, r3, #8
 8005704:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	430a      	orrs	r2, r1
 800570c:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2201      	movs	r2, #1
 800571a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005726:	2300      	movs	r3, #0
}
 8005728:	4618      	mov	r0, r3
 800572a:	3720      	adds	r7, #32
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}
 8005730:	40015804 	.word	0x40015804
 8005734:	40015824 	.word	0x40015824
 8005738:	40015800 	.word	0x40015800
 800573c:	40015c00 	.word	0x40015c00
 8005740:	40015c04 	.word	0x40015c04
 8005744:	40015c24 	.word	0x40015c24
 8005748:	cccccccd 	.word	0xcccccccd
 800574c:	ff05c010 	.word	0xff05c010
 8005750:	ffff1ff0 	.word	0xffff1ff0
 8005754:	fff88000 	.word	0xfff88000

08005758 <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d101      	bne.n	800576a <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e027      	b.n	80057ba <HAL_SAI_DeInit+0x62>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2202      	movs	r2, #2
 800576e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2200      	movs	r2, #0
 8005778:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f04f 32ff 	mov.w	r2, #4294967295
 8005782:	619a      	str	r2, [r3, #24]

  /* Disable the SAI */
  SAI_Disable(hsai);
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 f99f 	bl	8005ac8 <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	685a      	ldr	r2, [r3, #4]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f042 0208 	orr.w	r2, r2, #8
 8005798:	605a      	str	r2, [r3, #4]
  {
    hsai->MspDeInitCallback = HAL_SAI_MspDeInit;
  }
  hsai->MspDeInitCallback(hsai);
#else
  HAL_SAI_MspDeInit(hsai);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f7fd fa38 	bl	8002c10 <HAL_SAI_MspDeInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3708      	adds	r7, #8
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
	...

080057c4 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b086      	sub	sp, #24
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	4613      	mov	r3, r2
 80057d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 80057d2:	f7fd fb79 	bl	8002ec8 <HAL_GetTick>
 80057d6:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d002      	beq.n	80057e4 <HAL_SAI_Transmit_DMA+0x20>
 80057de:	88fb      	ldrh	r3, [r7, #6]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d101      	bne.n	80057e8 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e093      	b.n	8005910 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	f040 808c 	bne.w	800590e <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d101      	bne.n	8005804 <HAL_SAI_Transmit_DMA+0x40>
 8005800:	2302      	movs	r3, #2
 8005802:	e085      	b.n	8005910 <HAL_SAI_Transmit_DMA+0x14c>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	68ba      	ldr	r2, [r7, #8]
 8005810:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	88fa      	ldrh	r2, [r7, #6]
 8005816:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	88fa      	ldrh	r2, [r7, #6]
 800581e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2200      	movs	r2, #0
 8005826:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2212      	movs	r2, #18
 800582e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005836:	4a38      	ldr	r2, [pc, #224]	; (8005918 <HAL_SAI_Transmit_DMA+0x154>)
 8005838:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800583e:	4a37      	ldr	r2, [pc, #220]	; (800591c <HAL_SAI_Transmit_DMA+0x158>)
 8005840:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005846:	4a36      	ldr	r2, [pc, #216]	; (8005920 <HAL_SAI_Transmit_DMA+0x15c>)
 8005848:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800584e:	2200      	movs	r2, #0
 8005850:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800585a:	4619      	mov	r1, r3
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	331c      	adds	r3, #28
 8005862:	461a      	mov	r2, r3
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800586a:	f7fd fd1d 	bl	80032a8 <HAL_DMA_Start_IT>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d005      	beq.n	8005880 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2200      	movs	r2, #0
 8005878:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	e047      	b.n	8005910 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005880:	2100      	movs	r1, #0
 8005882:	68f8      	ldr	r0, [r7, #12]
 8005884:	f000 f8ea 	bl	8005a5c <SAI_InterruptFlag>
 8005888:	4601      	mov	r1, r0
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	691a      	ldr	r2, [r3, #16]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	430a      	orrs	r2, r1
 8005896:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80058a6:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 80058a8:	e015      	b.n	80058d6 <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 80058aa:	f7fd fb0d 	bl	8002ec8 <HAL_GetTick>
 80058ae:	4602      	mov	r2, r0
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	1ad3      	subs	r3, r2, r3
 80058b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058b8:	d90d      	bls.n	80058d6 <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80058d2:	2303      	movs	r3, #3
 80058d4:	e01c      	b.n	8005910 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	695b      	ldr	r3, [r3, #20]
 80058dc:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d0e2      	beq.n	80058aa <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d107      	bne.n	8005902 <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005900:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2200      	movs	r2, #0
 8005906:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800590a:	2300      	movs	r3, #0
 800590c:	e000      	b.n	8005910 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 800590e:	2302      	movs	r3, #2
  }
}
 8005910:	4618      	mov	r0, r3
 8005912:	3718      	adds	r7, #24
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}
 8005918:	08005b99 	.word	0x08005b99
 800591c:	08005b39 	.word	0x08005b39
 8005920:	08005c31 	.word	0x08005c31

08005924 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	4613      	mov	r3, r2
 8005930:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0))
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d002      	beq.n	800593e <HAL_SAI_Receive_DMA+0x1a>
 8005938:	88fb      	ldrh	r3, [r7, #6]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d101      	bne.n	8005942 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e074      	b.n	8005a2c <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8005948:	b2db      	uxtb	r3, r3
 800594a:	2b01      	cmp	r3, #1
 800594c:	d16d      	bne.n	8005a2a <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005954:	2b01      	cmp	r3, #1
 8005956:	d101      	bne.n	800595c <HAL_SAI_Receive_DMA+0x38>
 8005958:	2302      	movs	r3, #2
 800595a:	e067      	b.n	8005a2c <HAL_SAI_Receive_DMA+0x108>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	68ba      	ldr	r2, [r7, #8]
 8005968:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	88fa      	ldrh	r2, [r7, #6]
 800596e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	88fa      	ldrh	r2, [r7, #6]
 8005976:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2200      	movs	r2, #0
 800597e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2222      	movs	r2, #34	; 0x22
 8005986:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800598e:	4a29      	ldr	r2, [pc, #164]	; (8005a34 <HAL_SAI_Receive_DMA+0x110>)
 8005990:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005996:	4a28      	ldr	r2, [pc, #160]	; (8005a38 <HAL_SAI_Receive_DMA+0x114>)
 8005998:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800599e:	4a27      	ldr	r2, [pc, #156]	; (8005a3c <HAL_SAI_Receive_DMA+0x118>)
 80059a0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059a6:	2200      	movs	r2, #0
 80059a8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	331c      	adds	r3, #28
 80059b4:	4619      	mov	r1, r3
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059ba:	461a      	mov	r2, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80059c2:	f7fd fc71 	bl	80032a8 <HAL_DMA_Start_IT>
 80059c6:	4603      	mov	r3, r0
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d005      	beq.n	80059d8 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e029      	b.n	8005a2c <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80059d8:	2100      	movs	r1, #0
 80059da:	68f8      	ldr	r0, [r7, #12]
 80059dc:	f000 f83e 	bl	8005a5c <SAI_InterruptFlag>
 80059e0:	4601      	mov	r1, r0
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	691a      	ldr	r2, [r3, #16]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	430a      	orrs	r2, r1
 80059ee:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80059fe:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d107      	bne.n	8005a1e <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005a1c:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005a26:	2300      	movs	r3, #0
 8005a28:	e000      	b.n	8005a2c <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 8005a2a:	2302      	movs	r3, #2
  }
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3710      	adds	r7, #16
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	08005c15 	.word	0x08005c15
 8005a38:	08005bb5 	.word	0x08005bb5
 8005a3c:	08005c31 	.word	0x08005c31

08005a40 <HAL_SAI_GetState>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL state
  */
HAL_SAI_StateTypeDef HAL_SAI_GetState(SAI_HandleTypeDef *hsai)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  return hsai->State;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8005a4e:	b2db      	uxtb	r3, r3
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b085      	sub	sp, #20
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d103      	bne.n	8005a78 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f043 0308 	orr.w	r3, r3, #8
 8005a76:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a7c:	2b08      	cmp	r3, #8
 8005a7e:	d10b      	bne.n	8005a98 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005a84:	2b03      	cmp	r3, #3
 8005a86:	d003      	beq.n	8005a90 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d103      	bne.n	8005a98 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f043 0310 	orr.w	r3, r3, #16
 8005a96:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	2b03      	cmp	r3, #3
 8005a9e:	d003      	beq.n	8005aa8 <SAI_InterruptFlag+0x4c>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	2b02      	cmp	r3, #2
 8005aa6:	d104      	bne.n	8005ab2 <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005aae:	60fb      	str	r3, [r7, #12]
 8005ab0:	e003      	b.n	8005aba <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f043 0304 	orr.w	r3, r3, #4
 8005ab8:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8005aba:	68fb      	ldr	r3, [r7, #12]
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3714      	adds	r7, #20
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b085      	sub	sp, #20
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8005ad0:	4b17      	ldr	r3, [pc, #92]	; (8005b30 <SAI_Disable+0x68>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a17      	ldr	r2, [pc, #92]	; (8005b34 <SAI_Disable+0x6c>)
 8005ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8005ada:	0b1b      	lsrs	r3, r3, #12
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005af2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	1e5a      	subs	r2, r3, #1
 8005af8:	60fa      	str	r2, [r7, #12]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d10a      	bne.n	8005b14 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b04:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	72fb      	strb	r3, [r7, #11]
      break;
 8005b12:	e006      	b.n	8005b22 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1e8      	bne.n	8005af4 <SAI_Disable+0x2c>

  return status;
 8005b22:	7afb      	ldrb	r3, [r7, #11]
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3714      	adds	r7, #20
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr
 8005b30:	20000034 	.word	0x20000034
 8005b34:	95cbec1b 	.word	0x95cbec1b

08005b38 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b44:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	69db      	ldr	r3, [r3, #28]
 8005b4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b4e:	d01c      	beq.n	8005b8a <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005b66:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005b68:	2100      	movs	r1, #0
 8005b6a:	68f8      	ldr	r0, [r7, #12]
 8005b6c:	f7ff ff76 	bl	8005a5c <SAI_InterruptFlag>
 8005b70:	4603      	mov	r3, r0
 8005b72:	43d9      	mvns	r1, r3
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	691a      	ldr	r2, [r3, #16]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	400a      	ands	r2, r1
 8005b80:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2201      	movs	r2, #1
 8005b86:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8005b8a:	68f8      	ldr	r0, [r7, #12]
 8005b8c:	f7fc f882 	bl	8001c94 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8005b90:	bf00      	nop
 8005b92:	3710      	adds	r7, #16
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b084      	sub	sp, #16
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8005ba6:	68f8      	ldr	r0, [r7, #12]
 8005ba8:	f7fc f87e 	bl	8001ca8 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8005bac:	bf00      	nop
 8005bae:	3710      	adds	r7, #16
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc0:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	69db      	ldr	r3, [r3, #28]
 8005bc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bca:	d01c      	beq.n	8005c06 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005bda:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005be4:	2100      	movs	r1, #0
 8005be6:	68f8      	ldr	r0, [r7, #12]
 8005be8:	f7ff ff38 	bl	8005a5c <SAI_InterruptFlag>
 8005bec:	4603      	mov	r3, r0
 8005bee:	43d9      	mvns	r1, r3
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	691a      	ldr	r2, [r3, #16]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	400a      	ands	r2, r1
 8005bfc:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8005c06:	68f8      	ldr	r0, [r7, #12]
 8005c08:	f7fc fa56 	bl	80020b8 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8005c0c:	bf00      	nop
 8005c0e:	3710      	adds	r7, #16
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c20:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8005c22:	68f8      	ldr	r0, [r7, #12]
 8005c24:	f7fc fa52 	bl	80020cc <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8005c28:	bf00      	nop
 8005c2a:	3710      	adds	r7, #16
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c3c:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c44:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d004      	beq.n	8005c62 <SAI_DMAError+0x32>
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d112      	bne.n	8005c88 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005c70:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	f7ff ff28 	bl	8005ac8 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8005c88:	68f8      	ldr	r0, [r7, #12]
 8005c8a:	f7fc f817 	bl	8001cbc <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8005c8e:	bf00      	nop
 8005c90:	3710      	adds	r7, #16
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}

08005c96 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8005c96:	b580      	push	{r7, lr}
 8005c98:	b082      	sub	sp, #8
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
 8005c9e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d101      	bne.n	8005caa <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e025      	b.n	8005cf6 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d106      	bne.n	8005cc4 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f7fc ff32 	bl	8002b28 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2202      	movs	r2, #2
 8005cc8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	3304      	adds	r3, #4
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	4610      	mov	r0, r2
 8005cd8:	f000 f9cc 	bl	8006074 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6818      	ldr	r0, [r3, #0]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	6839      	ldr	r1, [r7, #0]
 8005ce8:	f000 fa36 	bl	8006158 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3708      	adds	r7, #8
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}

08005cfe <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005cfe:	b580      	push	{r7, lr}
 8005d00:	b084      	sub	sp, #16
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	60f8      	str	r0, [r7, #12]
 8005d06:	60b9      	str	r1, [r7, #8]
 8005d08:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d101      	bne.n	8005d1a <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8005d16:	2302      	movs	r3, #2
 8005d18:	e018      	b.n	8005d4c <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2202      	movs	r2, #2
 8005d1e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	68b9      	ldr	r1, [r7, #8]
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f000 fa94 	bl	8006258 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	2b02      	cmp	r3, #2
 8005d36:	d104      	bne.n	8005d42 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2205      	movs	r2, #5
 8005d3c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8005d40:	e003      	b.n	8005d4a <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2201      	movs	r2, #1
 8005d46:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8005d4a:	2300      	movs	r3, #0
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3710      	adds	r7, #16
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b082      	sub	sp, #8
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	2b02      	cmp	r3, #2
 8005d68:	d101      	bne.n	8005d6e <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8005d6a:	2302      	movs	r3, #2
 8005d6c:	e00e      	b.n	8005d8c <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2202      	movs	r2, #2
 8005d72:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	6839      	ldr	r1, [r7, #0]
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f000 fa8f 	bl	80062a0 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2201      	movs	r2, #1
 8005d86:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8005d8a:	2300      	movs	r3, #0
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3708      	adds	r7, #8
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	f003 0302 	and.w	r3, r3, #2
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d122      	bne.n	8005df0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	f003 0302 	and.w	r3, r3, #2
 8005db4:	2b02      	cmp	r3, #2
 8005db6:	d11b      	bne.n	8005df0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f06f 0202 	mvn.w	r2, #2
 8005dc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	699b      	ldr	r3, [r3, #24]
 8005dce:	f003 0303 	and.w	r3, r3, #3
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d003      	beq.n	8005dde <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 f90f 	bl	8005ffa <HAL_TIM_IC_CaptureCallback>
 8005ddc:	e005      	b.n	8005dea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 f901 	bl	8005fe6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 f912 	bl	800600e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	f003 0304 	and.w	r3, r3, #4
 8005dfa:	2b04      	cmp	r3, #4
 8005dfc:	d122      	bne.n	8005e44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	f003 0304 	and.w	r3, r3, #4
 8005e08:	2b04      	cmp	r3, #4
 8005e0a:	d11b      	bne.n	8005e44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f06f 0204 	mvn.w	r2, #4
 8005e14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2202      	movs	r2, #2
 8005e1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	699b      	ldr	r3, [r3, #24]
 8005e22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d003      	beq.n	8005e32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 f8e5 	bl	8005ffa <HAL_TIM_IC_CaptureCallback>
 8005e30:	e005      	b.n	8005e3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 f8d7 	bl	8005fe6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 f8e8 	bl	800600e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	f003 0308 	and.w	r3, r3, #8
 8005e4e:	2b08      	cmp	r3, #8
 8005e50:	d122      	bne.n	8005e98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	f003 0308 	and.w	r3, r3, #8
 8005e5c:	2b08      	cmp	r3, #8
 8005e5e:	d11b      	bne.n	8005e98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f06f 0208 	mvn.w	r2, #8
 8005e68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2204      	movs	r2, #4
 8005e6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	69db      	ldr	r3, [r3, #28]
 8005e76:	f003 0303 	and.w	r3, r3, #3
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d003      	beq.n	8005e86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 f8bb 	bl	8005ffa <HAL_TIM_IC_CaptureCallback>
 8005e84:	e005      	b.n	8005e92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 f8ad 	bl	8005fe6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f000 f8be 	bl	800600e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	f003 0310 	and.w	r3, r3, #16
 8005ea2:	2b10      	cmp	r3, #16
 8005ea4:	d122      	bne.n	8005eec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	f003 0310 	and.w	r3, r3, #16
 8005eb0:	2b10      	cmp	r3, #16
 8005eb2:	d11b      	bne.n	8005eec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f06f 0210 	mvn.w	r2, #16
 8005ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2208      	movs	r2, #8
 8005ec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	69db      	ldr	r3, [r3, #28]
 8005eca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d003      	beq.n	8005eda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 f891 	bl	8005ffa <HAL_TIM_IC_CaptureCallback>
 8005ed8:	e005      	b.n	8005ee6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 f883 	bl	8005fe6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f000 f894 	bl	800600e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	f003 0301 	and.w	r3, r3, #1
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d10e      	bne.n	8005f18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	f003 0301 	and.w	r3, r3, #1
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d107      	bne.n	8005f18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f06f 0201 	mvn.w	r2, #1
 8005f10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 f85d 	bl	8005fd2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f22:	2b80      	cmp	r3, #128	; 0x80
 8005f24:	d10e      	bne.n	8005f44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f30:	2b80      	cmp	r3, #128	; 0x80
 8005f32:	d107      	bne.n	8005f44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 f883 	bl	800604a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f52:	d10e      	bne.n	8005f72 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f5e:	2b80      	cmp	r3, #128	; 0x80
 8005f60:	d107      	bne.n	8005f72 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005f6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 f876 	bl	800605e <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f7c:	2b40      	cmp	r3, #64	; 0x40
 8005f7e:	d10e      	bne.n	8005f9e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f8a:	2b40      	cmp	r3, #64	; 0x40
 8005f8c:	d107      	bne.n	8005f9e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f000 f842 	bl	8006022 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	691b      	ldr	r3, [r3, #16]
 8005fa4:	f003 0320 	and.w	r3, r3, #32
 8005fa8:	2b20      	cmp	r3, #32
 8005faa:	d10e      	bne.n	8005fca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	f003 0320 	and.w	r3, r3, #32
 8005fb6:	2b20      	cmp	r3, #32
 8005fb8:	d107      	bne.n	8005fca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f06f 0220 	mvn.w	r2, #32
 8005fc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 f836 	bl	8006036 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005fca:	bf00      	nop
 8005fcc:	3708      	adds	r7, #8
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}

08005fd2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fd2:	b480      	push	{r7}
 8005fd4:	b083      	sub	sp, #12
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005fda:	bf00      	nop
 8005fdc:	370c      	adds	r7, #12
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr

08005fe6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fe6:	b480      	push	{r7}
 8005fe8:	b083      	sub	sp, #12
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fee:	bf00      	nop
 8005ff0:	370c      	adds	r7, #12
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr

08005ffa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ffa:	b480      	push	{r7}
 8005ffc:	b083      	sub	sp, #12
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006002:	bf00      	nop
 8006004:	370c      	adds	r7, #12
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr

0800600e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800600e:	b480      	push	{r7}
 8006010:	b083      	sub	sp, #12
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006016:	bf00      	nop
 8006018:	370c      	adds	r7, #12
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr

08006022 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006022:	b480      	push	{r7}
 8006024:	b083      	sub	sp, #12
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800602a:	bf00      	nop
 800602c:	370c      	adds	r7, #12
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr

08006036 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006036:	b480      	push	{r7}
 8006038:	b083      	sub	sp, #12
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800603e:	bf00      	nop
 8006040:	370c      	adds	r7, #12
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr

0800604a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800604a:	b480      	push	{r7}
 800604c:	b083      	sub	sp, #12
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006052:	bf00      	nop
 8006054:	370c      	adds	r7, #12
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr

0800605e <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800605e:	b480      	push	{r7}
 8006060:	b083      	sub	sp, #12
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006066:	bf00      	nop
 8006068:	370c      	adds	r7, #12
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr
	...

08006074 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006074:	b480      	push	{r7}
 8006076:	b085      	sub	sp, #20
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800607e:	2300      	movs	r3, #0
 8006080:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8006082:	2300      	movs	r3, #0
 8006084:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	2b01      	cmp	r3, #1
 800608c:	d027      	beq.n	80060de <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006094:	68fa      	ldr	r2, [r7, #12]
 8006096:	4b2f      	ldr	r3, [pc, #188]	; (8006154 <FMC_SDRAM_Init+0xe0>)
 8006098:	4013      	ands	r3, r2
 800609a:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80060a4:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 80060aa:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 80060b0:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 80060b6:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 80060bc:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 80060c2:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 80060c8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80060ce:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	601a      	str	r2, [r3, #0]
 80060dc:	e032      	b.n	8006144 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80060ea:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80060f4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80060fa:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	4313      	orrs	r3, r2
 8006100:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006108:	68ba      	ldr	r2, [r7, #8]
 800610a:	4b12      	ldr	r3, [pc, #72]	; (8006154 <FMC_SDRAM_Init+0xe0>)
 800610c:	4013      	ands	r3, r2
 800610e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006118:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800611e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8006124:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800612a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8006130:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006132:	68ba      	ldr	r2, [r7, #8]
 8006134:	4313      	orrs	r3, r2
 8006136:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	68ba      	ldr	r2, [r7, #8]
 8006142:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	3714      	adds	r7, #20
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr
 8006152:	bf00      	nop
 8006154:	ffff8000 	.word	0xffff8000

08006158 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006158:	b480      	push	{r7}
 800615a:	b087      	sub	sp, #28
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8006164:	2300      	movs	r3, #0
 8006166:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8006168:	2300      	movs	r3, #0
 800616a:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2b01      	cmp	r3, #1
 8006170:	d02e      	beq.n	80061d0 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800617e:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	3b01      	subs	r3, #1
 800618c:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800618e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	3b01      	subs	r3, #1
 8006196:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8006198:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	68db      	ldr	r3, [r3, #12]
 800619e:	3b01      	subs	r3, #1
 80061a0:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80061a2:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	3b01      	subs	r3, #1
 80061aa:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80061ac:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	695b      	ldr	r3, [r3, #20]
 80061b2:	3b01      	subs	r3, #1
 80061b4:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80061b6:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	699b      	ldr	r3, [r3, #24]
 80061bc:	3b01      	subs	r3, #1
 80061be:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80061c0:	4313      	orrs	r3, r2
 80061c2:	697a      	ldr	r2, [r7, #20]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	697a      	ldr	r2, [r7, #20]
 80061cc:	609a      	str	r2, [r3, #8]
 80061ce:	e039      	b.n	8006244 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80061d6:	697a      	ldr	r2, [r7, #20]
 80061d8:	4b1e      	ldr	r3, [pc, #120]	; (8006254 <FMC_SDRAM_Timing_Init+0xfc>)
 80061da:	4013      	ands	r3, r2
 80061dc:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	3b01      	subs	r3, #1
 80061e4:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	695b      	ldr	r3, [r3, #20]
 80061ea:	3b01      	subs	r3, #1
 80061ec:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80061ee:	4313      	orrs	r3, r2
 80061f0:	697a      	ldr	r2, [r7, #20]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006202:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	3b01      	subs	r3, #1
 8006210:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006212:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	3b01      	subs	r3, #1
 800621a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800621c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	3b01      	subs	r3, #1
 8006224:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8006226:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	699b      	ldr	r3, [r3, #24]
 800622c:	3b01      	subs	r3, #1
 800622e:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006230:	4313      	orrs	r3, r2
 8006232:	693a      	ldr	r2, [r7, #16]
 8006234:	4313      	orrs	r3, r2
 8006236:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	697a      	ldr	r2, [r7, #20]
 800623c:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	693a      	ldr	r2, [r7, #16]
 8006242:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	371c      	adds	r7, #28
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop
 8006254:	ff0f0fff 	.word	0xff0f0fff

08006258 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 8006258:	b480      	push	{r7}
 800625a:	b085      	sub	sp, #20
 800625c:	af00      	add	r7, sp, #0
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	691a      	ldr	r2, [r3, #16]
 8006268:	4b0c      	ldr	r3, [pc, #48]	; (800629c <FMC_SDRAM_SendCommand+0x44>)
 800626a:	4013      	ands	r3, r2
 800626c:	68ba      	ldr	r2, [r7, #8]
 800626e:	6811      	ldr	r1, [r2, #0]
 8006270:	68ba      	ldr	r2, [r7, #8]
 8006272:	6852      	ldr	r2, [r2, #4]
 8006274:	4311      	orrs	r1, r2
 8006276:	68ba      	ldr	r2, [r7, #8]
 8006278:	6892      	ldr	r2, [r2, #8]
 800627a:	3a01      	subs	r2, #1
 800627c:	0152      	lsls	r2, r2, #5
 800627e:	4311      	orrs	r1, r2
 8006280:	68ba      	ldr	r2, [r7, #8]
 8006282:	68d2      	ldr	r2, [r2, #12]
 8006284:	0252      	lsls	r2, r2, #9
 8006286:	430a      	orrs	r2, r1
 8006288:	431a      	orrs	r2, r3
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
 800628e:	2300      	movs	r3, #0
}
 8006290:	4618      	mov	r0, r3
 8006292:	3714      	adds	r7, #20
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr
 800629c:	ffc00000 	.word	0xffc00000

080062a0 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	695a      	ldr	r2, [r3, #20]
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	005b      	lsls	r3, r3, #1
 80062b2:	431a      	orrs	r2, r3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	370c      	adds	r7, #12
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr
	...

080062c8 <__errno>:
 80062c8:	4b01      	ldr	r3, [pc, #4]	; (80062d0 <__errno+0x8>)
 80062ca:	6818      	ldr	r0, [r3, #0]
 80062cc:	4770      	bx	lr
 80062ce:	bf00      	nop
 80062d0:	2000003c 	.word	0x2000003c

080062d4 <__libc_init_array>:
 80062d4:	b570      	push	{r4, r5, r6, lr}
 80062d6:	4d0d      	ldr	r5, [pc, #52]	; (800630c <__libc_init_array+0x38>)
 80062d8:	4c0d      	ldr	r4, [pc, #52]	; (8006310 <__libc_init_array+0x3c>)
 80062da:	1b64      	subs	r4, r4, r5
 80062dc:	10a4      	asrs	r4, r4, #2
 80062de:	2600      	movs	r6, #0
 80062e0:	42a6      	cmp	r6, r4
 80062e2:	d109      	bne.n	80062f8 <__libc_init_array+0x24>
 80062e4:	4d0b      	ldr	r5, [pc, #44]	; (8006314 <__libc_init_array+0x40>)
 80062e6:	4c0c      	ldr	r4, [pc, #48]	; (8006318 <__libc_init_array+0x44>)
 80062e8:	f000 fcf4 	bl	8006cd4 <_init>
 80062ec:	1b64      	subs	r4, r4, r5
 80062ee:	10a4      	asrs	r4, r4, #2
 80062f0:	2600      	movs	r6, #0
 80062f2:	42a6      	cmp	r6, r4
 80062f4:	d105      	bne.n	8006302 <__libc_init_array+0x2e>
 80062f6:	bd70      	pop	{r4, r5, r6, pc}
 80062f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80062fc:	4798      	blx	r3
 80062fe:	3601      	adds	r6, #1
 8006300:	e7ee      	b.n	80062e0 <__libc_init_array+0xc>
 8006302:	f855 3b04 	ldr.w	r3, [r5], #4
 8006306:	4798      	blx	r3
 8006308:	3601      	adds	r6, #1
 800630a:	e7f2      	b.n	80062f2 <__libc_init_array+0x1e>
 800630c:	08006e40 	.word	0x08006e40
 8006310:	08006e40 	.word	0x08006e40
 8006314:	08006e40 	.word	0x08006e40
 8006318:	08006e44 	.word	0x08006e44

0800631c <memcpy>:
 800631c:	440a      	add	r2, r1
 800631e:	4291      	cmp	r1, r2
 8006320:	f100 33ff 	add.w	r3, r0, #4294967295
 8006324:	d100      	bne.n	8006328 <memcpy+0xc>
 8006326:	4770      	bx	lr
 8006328:	b510      	push	{r4, lr}
 800632a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800632e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006332:	4291      	cmp	r1, r2
 8006334:	d1f9      	bne.n	800632a <memcpy+0xe>
 8006336:	bd10      	pop	{r4, pc}

08006338 <memset>:
 8006338:	4402      	add	r2, r0
 800633a:	4603      	mov	r3, r0
 800633c:	4293      	cmp	r3, r2
 800633e:	d100      	bne.n	8006342 <memset+0xa>
 8006340:	4770      	bx	lr
 8006342:	f803 1b01 	strb.w	r1, [r3], #1
 8006346:	e7f9      	b.n	800633c <memset+0x4>

08006348 <_puts_r>:
 8006348:	b570      	push	{r4, r5, r6, lr}
 800634a:	460e      	mov	r6, r1
 800634c:	4605      	mov	r5, r0
 800634e:	b118      	cbz	r0, 8006358 <_puts_r+0x10>
 8006350:	6983      	ldr	r3, [r0, #24]
 8006352:	b90b      	cbnz	r3, 8006358 <_puts_r+0x10>
 8006354:	f000 fa48 	bl	80067e8 <__sinit>
 8006358:	69ab      	ldr	r3, [r5, #24]
 800635a:	68ac      	ldr	r4, [r5, #8]
 800635c:	b913      	cbnz	r3, 8006364 <_puts_r+0x1c>
 800635e:	4628      	mov	r0, r5
 8006360:	f000 fa42 	bl	80067e8 <__sinit>
 8006364:	4b2c      	ldr	r3, [pc, #176]	; (8006418 <_puts_r+0xd0>)
 8006366:	429c      	cmp	r4, r3
 8006368:	d120      	bne.n	80063ac <_puts_r+0x64>
 800636a:	686c      	ldr	r4, [r5, #4]
 800636c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800636e:	07db      	lsls	r3, r3, #31
 8006370:	d405      	bmi.n	800637e <_puts_r+0x36>
 8006372:	89a3      	ldrh	r3, [r4, #12]
 8006374:	0598      	lsls	r0, r3, #22
 8006376:	d402      	bmi.n	800637e <_puts_r+0x36>
 8006378:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800637a:	f000 fad3 	bl	8006924 <__retarget_lock_acquire_recursive>
 800637e:	89a3      	ldrh	r3, [r4, #12]
 8006380:	0719      	lsls	r1, r3, #28
 8006382:	d51d      	bpl.n	80063c0 <_puts_r+0x78>
 8006384:	6923      	ldr	r3, [r4, #16]
 8006386:	b1db      	cbz	r3, 80063c0 <_puts_r+0x78>
 8006388:	3e01      	subs	r6, #1
 800638a:	68a3      	ldr	r3, [r4, #8]
 800638c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006390:	3b01      	subs	r3, #1
 8006392:	60a3      	str	r3, [r4, #8]
 8006394:	bb39      	cbnz	r1, 80063e6 <_puts_r+0x9e>
 8006396:	2b00      	cmp	r3, #0
 8006398:	da38      	bge.n	800640c <_puts_r+0xc4>
 800639a:	4622      	mov	r2, r4
 800639c:	210a      	movs	r1, #10
 800639e:	4628      	mov	r0, r5
 80063a0:	f000 f848 	bl	8006434 <__swbuf_r>
 80063a4:	3001      	adds	r0, #1
 80063a6:	d011      	beq.n	80063cc <_puts_r+0x84>
 80063a8:	250a      	movs	r5, #10
 80063aa:	e011      	b.n	80063d0 <_puts_r+0x88>
 80063ac:	4b1b      	ldr	r3, [pc, #108]	; (800641c <_puts_r+0xd4>)
 80063ae:	429c      	cmp	r4, r3
 80063b0:	d101      	bne.n	80063b6 <_puts_r+0x6e>
 80063b2:	68ac      	ldr	r4, [r5, #8]
 80063b4:	e7da      	b.n	800636c <_puts_r+0x24>
 80063b6:	4b1a      	ldr	r3, [pc, #104]	; (8006420 <_puts_r+0xd8>)
 80063b8:	429c      	cmp	r4, r3
 80063ba:	bf08      	it	eq
 80063bc:	68ec      	ldreq	r4, [r5, #12]
 80063be:	e7d5      	b.n	800636c <_puts_r+0x24>
 80063c0:	4621      	mov	r1, r4
 80063c2:	4628      	mov	r0, r5
 80063c4:	f000 f888 	bl	80064d8 <__swsetup_r>
 80063c8:	2800      	cmp	r0, #0
 80063ca:	d0dd      	beq.n	8006388 <_puts_r+0x40>
 80063cc:	f04f 35ff 	mov.w	r5, #4294967295
 80063d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80063d2:	07da      	lsls	r2, r3, #31
 80063d4:	d405      	bmi.n	80063e2 <_puts_r+0x9a>
 80063d6:	89a3      	ldrh	r3, [r4, #12]
 80063d8:	059b      	lsls	r3, r3, #22
 80063da:	d402      	bmi.n	80063e2 <_puts_r+0x9a>
 80063dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80063de:	f000 faa2 	bl	8006926 <__retarget_lock_release_recursive>
 80063e2:	4628      	mov	r0, r5
 80063e4:	bd70      	pop	{r4, r5, r6, pc}
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	da04      	bge.n	80063f4 <_puts_r+0xac>
 80063ea:	69a2      	ldr	r2, [r4, #24]
 80063ec:	429a      	cmp	r2, r3
 80063ee:	dc06      	bgt.n	80063fe <_puts_r+0xb6>
 80063f0:	290a      	cmp	r1, #10
 80063f2:	d004      	beq.n	80063fe <_puts_r+0xb6>
 80063f4:	6823      	ldr	r3, [r4, #0]
 80063f6:	1c5a      	adds	r2, r3, #1
 80063f8:	6022      	str	r2, [r4, #0]
 80063fa:	7019      	strb	r1, [r3, #0]
 80063fc:	e7c5      	b.n	800638a <_puts_r+0x42>
 80063fe:	4622      	mov	r2, r4
 8006400:	4628      	mov	r0, r5
 8006402:	f000 f817 	bl	8006434 <__swbuf_r>
 8006406:	3001      	adds	r0, #1
 8006408:	d1bf      	bne.n	800638a <_puts_r+0x42>
 800640a:	e7df      	b.n	80063cc <_puts_r+0x84>
 800640c:	6823      	ldr	r3, [r4, #0]
 800640e:	250a      	movs	r5, #10
 8006410:	1c5a      	adds	r2, r3, #1
 8006412:	6022      	str	r2, [r4, #0]
 8006414:	701d      	strb	r5, [r3, #0]
 8006416:	e7db      	b.n	80063d0 <_puts_r+0x88>
 8006418:	08006e00 	.word	0x08006e00
 800641c:	08006e20 	.word	0x08006e20
 8006420:	08006de0 	.word	0x08006de0

08006424 <puts>:
 8006424:	4b02      	ldr	r3, [pc, #8]	; (8006430 <puts+0xc>)
 8006426:	4601      	mov	r1, r0
 8006428:	6818      	ldr	r0, [r3, #0]
 800642a:	f7ff bf8d 	b.w	8006348 <_puts_r>
 800642e:	bf00      	nop
 8006430:	2000003c 	.word	0x2000003c

08006434 <__swbuf_r>:
 8006434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006436:	460e      	mov	r6, r1
 8006438:	4614      	mov	r4, r2
 800643a:	4605      	mov	r5, r0
 800643c:	b118      	cbz	r0, 8006446 <__swbuf_r+0x12>
 800643e:	6983      	ldr	r3, [r0, #24]
 8006440:	b90b      	cbnz	r3, 8006446 <__swbuf_r+0x12>
 8006442:	f000 f9d1 	bl	80067e8 <__sinit>
 8006446:	4b21      	ldr	r3, [pc, #132]	; (80064cc <__swbuf_r+0x98>)
 8006448:	429c      	cmp	r4, r3
 800644a:	d12b      	bne.n	80064a4 <__swbuf_r+0x70>
 800644c:	686c      	ldr	r4, [r5, #4]
 800644e:	69a3      	ldr	r3, [r4, #24]
 8006450:	60a3      	str	r3, [r4, #8]
 8006452:	89a3      	ldrh	r3, [r4, #12]
 8006454:	071a      	lsls	r2, r3, #28
 8006456:	d52f      	bpl.n	80064b8 <__swbuf_r+0x84>
 8006458:	6923      	ldr	r3, [r4, #16]
 800645a:	b36b      	cbz	r3, 80064b8 <__swbuf_r+0x84>
 800645c:	6923      	ldr	r3, [r4, #16]
 800645e:	6820      	ldr	r0, [r4, #0]
 8006460:	1ac0      	subs	r0, r0, r3
 8006462:	6963      	ldr	r3, [r4, #20]
 8006464:	b2f6      	uxtb	r6, r6
 8006466:	4283      	cmp	r3, r0
 8006468:	4637      	mov	r7, r6
 800646a:	dc04      	bgt.n	8006476 <__swbuf_r+0x42>
 800646c:	4621      	mov	r1, r4
 800646e:	4628      	mov	r0, r5
 8006470:	f000 f926 	bl	80066c0 <_fflush_r>
 8006474:	bb30      	cbnz	r0, 80064c4 <__swbuf_r+0x90>
 8006476:	68a3      	ldr	r3, [r4, #8]
 8006478:	3b01      	subs	r3, #1
 800647a:	60a3      	str	r3, [r4, #8]
 800647c:	6823      	ldr	r3, [r4, #0]
 800647e:	1c5a      	adds	r2, r3, #1
 8006480:	6022      	str	r2, [r4, #0]
 8006482:	701e      	strb	r6, [r3, #0]
 8006484:	6963      	ldr	r3, [r4, #20]
 8006486:	3001      	adds	r0, #1
 8006488:	4283      	cmp	r3, r0
 800648a:	d004      	beq.n	8006496 <__swbuf_r+0x62>
 800648c:	89a3      	ldrh	r3, [r4, #12]
 800648e:	07db      	lsls	r3, r3, #31
 8006490:	d506      	bpl.n	80064a0 <__swbuf_r+0x6c>
 8006492:	2e0a      	cmp	r6, #10
 8006494:	d104      	bne.n	80064a0 <__swbuf_r+0x6c>
 8006496:	4621      	mov	r1, r4
 8006498:	4628      	mov	r0, r5
 800649a:	f000 f911 	bl	80066c0 <_fflush_r>
 800649e:	b988      	cbnz	r0, 80064c4 <__swbuf_r+0x90>
 80064a0:	4638      	mov	r0, r7
 80064a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064a4:	4b0a      	ldr	r3, [pc, #40]	; (80064d0 <__swbuf_r+0x9c>)
 80064a6:	429c      	cmp	r4, r3
 80064a8:	d101      	bne.n	80064ae <__swbuf_r+0x7a>
 80064aa:	68ac      	ldr	r4, [r5, #8]
 80064ac:	e7cf      	b.n	800644e <__swbuf_r+0x1a>
 80064ae:	4b09      	ldr	r3, [pc, #36]	; (80064d4 <__swbuf_r+0xa0>)
 80064b0:	429c      	cmp	r4, r3
 80064b2:	bf08      	it	eq
 80064b4:	68ec      	ldreq	r4, [r5, #12]
 80064b6:	e7ca      	b.n	800644e <__swbuf_r+0x1a>
 80064b8:	4621      	mov	r1, r4
 80064ba:	4628      	mov	r0, r5
 80064bc:	f000 f80c 	bl	80064d8 <__swsetup_r>
 80064c0:	2800      	cmp	r0, #0
 80064c2:	d0cb      	beq.n	800645c <__swbuf_r+0x28>
 80064c4:	f04f 37ff 	mov.w	r7, #4294967295
 80064c8:	e7ea      	b.n	80064a0 <__swbuf_r+0x6c>
 80064ca:	bf00      	nop
 80064cc:	08006e00 	.word	0x08006e00
 80064d0:	08006e20 	.word	0x08006e20
 80064d4:	08006de0 	.word	0x08006de0

080064d8 <__swsetup_r>:
 80064d8:	4b32      	ldr	r3, [pc, #200]	; (80065a4 <__swsetup_r+0xcc>)
 80064da:	b570      	push	{r4, r5, r6, lr}
 80064dc:	681d      	ldr	r5, [r3, #0]
 80064de:	4606      	mov	r6, r0
 80064e0:	460c      	mov	r4, r1
 80064e2:	b125      	cbz	r5, 80064ee <__swsetup_r+0x16>
 80064e4:	69ab      	ldr	r3, [r5, #24]
 80064e6:	b913      	cbnz	r3, 80064ee <__swsetup_r+0x16>
 80064e8:	4628      	mov	r0, r5
 80064ea:	f000 f97d 	bl	80067e8 <__sinit>
 80064ee:	4b2e      	ldr	r3, [pc, #184]	; (80065a8 <__swsetup_r+0xd0>)
 80064f0:	429c      	cmp	r4, r3
 80064f2:	d10f      	bne.n	8006514 <__swsetup_r+0x3c>
 80064f4:	686c      	ldr	r4, [r5, #4]
 80064f6:	89a3      	ldrh	r3, [r4, #12]
 80064f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80064fc:	0719      	lsls	r1, r3, #28
 80064fe:	d42c      	bmi.n	800655a <__swsetup_r+0x82>
 8006500:	06dd      	lsls	r5, r3, #27
 8006502:	d411      	bmi.n	8006528 <__swsetup_r+0x50>
 8006504:	2309      	movs	r3, #9
 8006506:	6033      	str	r3, [r6, #0]
 8006508:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800650c:	81a3      	strh	r3, [r4, #12]
 800650e:	f04f 30ff 	mov.w	r0, #4294967295
 8006512:	e03e      	b.n	8006592 <__swsetup_r+0xba>
 8006514:	4b25      	ldr	r3, [pc, #148]	; (80065ac <__swsetup_r+0xd4>)
 8006516:	429c      	cmp	r4, r3
 8006518:	d101      	bne.n	800651e <__swsetup_r+0x46>
 800651a:	68ac      	ldr	r4, [r5, #8]
 800651c:	e7eb      	b.n	80064f6 <__swsetup_r+0x1e>
 800651e:	4b24      	ldr	r3, [pc, #144]	; (80065b0 <__swsetup_r+0xd8>)
 8006520:	429c      	cmp	r4, r3
 8006522:	bf08      	it	eq
 8006524:	68ec      	ldreq	r4, [r5, #12]
 8006526:	e7e6      	b.n	80064f6 <__swsetup_r+0x1e>
 8006528:	0758      	lsls	r0, r3, #29
 800652a:	d512      	bpl.n	8006552 <__swsetup_r+0x7a>
 800652c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800652e:	b141      	cbz	r1, 8006542 <__swsetup_r+0x6a>
 8006530:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006534:	4299      	cmp	r1, r3
 8006536:	d002      	beq.n	800653e <__swsetup_r+0x66>
 8006538:	4630      	mov	r0, r6
 800653a:	f000 fa59 	bl	80069f0 <_free_r>
 800653e:	2300      	movs	r3, #0
 8006540:	6363      	str	r3, [r4, #52]	; 0x34
 8006542:	89a3      	ldrh	r3, [r4, #12]
 8006544:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006548:	81a3      	strh	r3, [r4, #12]
 800654a:	2300      	movs	r3, #0
 800654c:	6063      	str	r3, [r4, #4]
 800654e:	6923      	ldr	r3, [r4, #16]
 8006550:	6023      	str	r3, [r4, #0]
 8006552:	89a3      	ldrh	r3, [r4, #12]
 8006554:	f043 0308 	orr.w	r3, r3, #8
 8006558:	81a3      	strh	r3, [r4, #12]
 800655a:	6923      	ldr	r3, [r4, #16]
 800655c:	b94b      	cbnz	r3, 8006572 <__swsetup_r+0x9a>
 800655e:	89a3      	ldrh	r3, [r4, #12]
 8006560:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006564:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006568:	d003      	beq.n	8006572 <__swsetup_r+0x9a>
 800656a:	4621      	mov	r1, r4
 800656c:	4630      	mov	r0, r6
 800656e:	f000 f9ff 	bl	8006970 <__smakebuf_r>
 8006572:	89a0      	ldrh	r0, [r4, #12]
 8006574:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006578:	f010 0301 	ands.w	r3, r0, #1
 800657c:	d00a      	beq.n	8006594 <__swsetup_r+0xbc>
 800657e:	2300      	movs	r3, #0
 8006580:	60a3      	str	r3, [r4, #8]
 8006582:	6963      	ldr	r3, [r4, #20]
 8006584:	425b      	negs	r3, r3
 8006586:	61a3      	str	r3, [r4, #24]
 8006588:	6923      	ldr	r3, [r4, #16]
 800658a:	b943      	cbnz	r3, 800659e <__swsetup_r+0xc6>
 800658c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006590:	d1ba      	bne.n	8006508 <__swsetup_r+0x30>
 8006592:	bd70      	pop	{r4, r5, r6, pc}
 8006594:	0781      	lsls	r1, r0, #30
 8006596:	bf58      	it	pl
 8006598:	6963      	ldrpl	r3, [r4, #20]
 800659a:	60a3      	str	r3, [r4, #8]
 800659c:	e7f4      	b.n	8006588 <__swsetup_r+0xb0>
 800659e:	2000      	movs	r0, #0
 80065a0:	e7f7      	b.n	8006592 <__swsetup_r+0xba>
 80065a2:	bf00      	nop
 80065a4:	2000003c 	.word	0x2000003c
 80065a8:	08006e00 	.word	0x08006e00
 80065ac:	08006e20 	.word	0x08006e20
 80065b0:	08006de0 	.word	0x08006de0

080065b4 <__sflush_r>:
 80065b4:	898a      	ldrh	r2, [r1, #12]
 80065b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065ba:	4605      	mov	r5, r0
 80065bc:	0710      	lsls	r0, r2, #28
 80065be:	460c      	mov	r4, r1
 80065c0:	d458      	bmi.n	8006674 <__sflush_r+0xc0>
 80065c2:	684b      	ldr	r3, [r1, #4]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	dc05      	bgt.n	80065d4 <__sflush_r+0x20>
 80065c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	dc02      	bgt.n	80065d4 <__sflush_r+0x20>
 80065ce:	2000      	movs	r0, #0
 80065d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80065d6:	2e00      	cmp	r6, #0
 80065d8:	d0f9      	beq.n	80065ce <__sflush_r+0x1a>
 80065da:	2300      	movs	r3, #0
 80065dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80065e0:	682f      	ldr	r7, [r5, #0]
 80065e2:	602b      	str	r3, [r5, #0]
 80065e4:	d032      	beq.n	800664c <__sflush_r+0x98>
 80065e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80065e8:	89a3      	ldrh	r3, [r4, #12]
 80065ea:	075a      	lsls	r2, r3, #29
 80065ec:	d505      	bpl.n	80065fa <__sflush_r+0x46>
 80065ee:	6863      	ldr	r3, [r4, #4]
 80065f0:	1ac0      	subs	r0, r0, r3
 80065f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80065f4:	b10b      	cbz	r3, 80065fa <__sflush_r+0x46>
 80065f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80065f8:	1ac0      	subs	r0, r0, r3
 80065fa:	2300      	movs	r3, #0
 80065fc:	4602      	mov	r2, r0
 80065fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006600:	6a21      	ldr	r1, [r4, #32]
 8006602:	4628      	mov	r0, r5
 8006604:	47b0      	blx	r6
 8006606:	1c43      	adds	r3, r0, #1
 8006608:	89a3      	ldrh	r3, [r4, #12]
 800660a:	d106      	bne.n	800661a <__sflush_r+0x66>
 800660c:	6829      	ldr	r1, [r5, #0]
 800660e:	291d      	cmp	r1, #29
 8006610:	d82c      	bhi.n	800666c <__sflush_r+0xb8>
 8006612:	4a2a      	ldr	r2, [pc, #168]	; (80066bc <__sflush_r+0x108>)
 8006614:	40ca      	lsrs	r2, r1
 8006616:	07d6      	lsls	r6, r2, #31
 8006618:	d528      	bpl.n	800666c <__sflush_r+0xb8>
 800661a:	2200      	movs	r2, #0
 800661c:	6062      	str	r2, [r4, #4]
 800661e:	04d9      	lsls	r1, r3, #19
 8006620:	6922      	ldr	r2, [r4, #16]
 8006622:	6022      	str	r2, [r4, #0]
 8006624:	d504      	bpl.n	8006630 <__sflush_r+0x7c>
 8006626:	1c42      	adds	r2, r0, #1
 8006628:	d101      	bne.n	800662e <__sflush_r+0x7a>
 800662a:	682b      	ldr	r3, [r5, #0]
 800662c:	b903      	cbnz	r3, 8006630 <__sflush_r+0x7c>
 800662e:	6560      	str	r0, [r4, #84]	; 0x54
 8006630:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006632:	602f      	str	r7, [r5, #0]
 8006634:	2900      	cmp	r1, #0
 8006636:	d0ca      	beq.n	80065ce <__sflush_r+0x1a>
 8006638:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800663c:	4299      	cmp	r1, r3
 800663e:	d002      	beq.n	8006646 <__sflush_r+0x92>
 8006640:	4628      	mov	r0, r5
 8006642:	f000 f9d5 	bl	80069f0 <_free_r>
 8006646:	2000      	movs	r0, #0
 8006648:	6360      	str	r0, [r4, #52]	; 0x34
 800664a:	e7c1      	b.n	80065d0 <__sflush_r+0x1c>
 800664c:	6a21      	ldr	r1, [r4, #32]
 800664e:	2301      	movs	r3, #1
 8006650:	4628      	mov	r0, r5
 8006652:	47b0      	blx	r6
 8006654:	1c41      	adds	r1, r0, #1
 8006656:	d1c7      	bne.n	80065e8 <__sflush_r+0x34>
 8006658:	682b      	ldr	r3, [r5, #0]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d0c4      	beq.n	80065e8 <__sflush_r+0x34>
 800665e:	2b1d      	cmp	r3, #29
 8006660:	d001      	beq.n	8006666 <__sflush_r+0xb2>
 8006662:	2b16      	cmp	r3, #22
 8006664:	d101      	bne.n	800666a <__sflush_r+0xb6>
 8006666:	602f      	str	r7, [r5, #0]
 8006668:	e7b1      	b.n	80065ce <__sflush_r+0x1a>
 800666a:	89a3      	ldrh	r3, [r4, #12]
 800666c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006670:	81a3      	strh	r3, [r4, #12]
 8006672:	e7ad      	b.n	80065d0 <__sflush_r+0x1c>
 8006674:	690f      	ldr	r7, [r1, #16]
 8006676:	2f00      	cmp	r7, #0
 8006678:	d0a9      	beq.n	80065ce <__sflush_r+0x1a>
 800667a:	0793      	lsls	r3, r2, #30
 800667c:	680e      	ldr	r6, [r1, #0]
 800667e:	bf08      	it	eq
 8006680:	694b      	ldreq	r3, [r1, #20]
 8006682:	600f      	str	r7, [r1, #0]
 8006684:	bf18      	it	ne
 8006686:	2300      	movne	r3, #0
 8006688:	eba6 0807 	sub.w	r8, r6, r7
 800668c:	608b      	str	r3, [r1, #8]
 800668e:	f1b8 0f00 	cmp.w	r8, #0
 8006692:	dd9c      	ble.n	80065ce <__sflush_r+0x1a>
 8006694:	6a21      	ldr	r1, [r4, #32]
 8006696:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006698:	4643      	mov	r3, r8
 800669a:	463a      	mov	r2, r7
 800669c:	4628      	mov	r0, r5
 800669e:	47b0      	blx	r6
 80066a0:	2800      	cmp	r0, #0
 80066a2:	dc06      	bgt.n	80066b2 <__sflush_r+0xfe>
 80066a4:	89a3      	ldrh	r3, [r4, #12]
 80066a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066aa:	81a3      	strh	r3, [r4, #12]
 80066ac:	f04f 30ff 	mov.w	r0, #4294967295
 80066b0:	e78e      	b.n	80065d0 <__sflush_r+0x1c>
 80066b2:	4407      	add	r7, r0
 80066b4:	eba8 0800 	sub.w	r8, r8, r0
 80066b8:	e7e9      	b.n	800668e <__sflush_r+0xda>
 80066ba:	bf00      	nop
 80066bc:	20400001 	.word	0x20400001

080066c0 <_fflush_r>:
 80066c0:	b538      	push	{r3, r4, r5, lr}
 80066c2:	690b      	ldr	r3, [r1, #16]
 80066c4:	4605      	mov	r5, r0
 80066c6:	460c      	mov	r4, r1
 80066c8:	b913      	cbnz	r3, 80066d0 <_fflush_r+0x10>
 80066ca:	2500      	movs	r5, #0
 80066cc:	4628      	mov	r0, r5
 80066ce:	bd38      	pop	{r3, r4, r5, pc}
 80066d0:	b118      	cbz	r0, 80066da <_fflush_r+0x1a>
 80066d2:	6983      	ldr	r3, [r0, #24]
 80066d4:	b90b      	cbnz	r3, 80066da <_fflush_r+0x1a>
 80066d6:	f000 f887 	bl	80067e8 <__sinit>
 80066da:	4b14      	ldr	r3, [pc, #80]	; (800672c <_fflush_r+0x6c>)
 80066dc:	429c      	cmp	r4, r3
 80066de:	d11b      	bne.n	8006718 <_fflush_r+0x58>
 80066e0:	686c      	ldr	r4, [r5, #4]
 80066e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d0ef      	beq.n	80066ca <_fflush_r+0xa>
 80066ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80066ec:	07d0      	lsls	r0, r2, #31
 80066ee:	d404      	bmi.n	80066fa <_fflush_r+0x3a>
 80066f0:	0599      	lsls	r1, r3, #22
 80066f2:	d402      	bmi.n	80066fa <_fflush_r+0x3a>
 80066f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066f6:	f000 f915 	bl	8006924 <__retarget_lock_acquire_recursive>
 80066fa:	4628      	mov	r0, r5
 80066fc:	4621      	mov	r1, r4
 80066fe:	f7ff ff59 	bl	80065b4 <__sflush_r>
 8006702:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006704:	07da      	lsls	r2, r3, #31
 8006706:	4605      	mov	r5, r0
 8006708:	d4e0      	bmi.n	80066cc <_fflush_r+0xc>
 800670a:	89a3      	ldrh	r3, [r4, #12]
 800670c:	059b      	lsls	r3, r3, #22
 800670e:	d4dd      	bmi.n	80066cc <_fflush_r+0xc>
 8006710:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006712:	f000 f908 	bl	8006926 <__retarget_lock_release_recursive>
 8006716:	e7d9      	b.n	80066cc <_fflush_r+0xc>
 8006718:	4b05      	ldr	r3, [pc, #20]	; (8006730 <_fflush_r+0x70>)
 800671a:	429c      	cmp	r4, r3
 800671c:	d101      	bne.n	8006722 <_fflush_r+0x62>
 800671e:	68ac      	ldr	r4, [r5, #8]
 8006720:	e7df      	b.n	80066e2 <_fflush_r+0x22>
 8006722:	4b04      	ldr	r3, [pc, #16]	; (8006734 <_fflush_r+0x74>)
 8006724:	429c      	cmp	r4, r3
 8006726:	bf08      	it	eq
 8006728:	68ec      	ldreq	r4, [r5, #12]
 800672a:	e7da      	b.n	80066e2 <_fflush_r+0x22>
 800672c:	08006e00 	.word	0x08006e00
 8006730:	08006e20 	.word	0x08006e20
 8006734:	08006de0 	.word	0x08006de0

08006738 <std>:
 8006738:	2300      	movs	r3, #0
 800673a:	b510      	push	{r4, lr}
 800673c:	4604      	mov	r4, r0
 800673e:	e9c0 3300 	strd	r3, r3, [r0]
 8006742:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006746:	6083      	str	r3, [r0, #8]
 8006748:	8181      	strh	r1, [r0, #12]
 800674a:	6643      	str	r3, [r0, #100]	; 0x64
 800674c:	81c2      	strh	r2, [r0, #14]
 800674e:	6183      	str	r3, [r0, #24]
 8006750:	4619      	mov	r1, r3
 8006752:	2208      	movs	r2, #8
 8006754:	305c      	adds	r0, #92	; 0x5c
 8006756:	f7ff fdef 	bl	8006338 <memset>
 800675a:	4b05      	ldr	r3, [pc, #20]	; (8006770 <std+0x38>)
 800675c:	6263      	str	r3, [r4, #36]	; 0x24
 800675e:	4b05      	ldr	r3, [pc, #20]	; (8006774 <std+0x3c>)
 8006760:	62a3      	str	r3, [r4, #40]	; 0x28
 8006762:	4b05      	ldr	r3, [pc, #20]	; (8006778 <std+0x40>)
 8006764:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006766:	4b05      	ldr	r3, [pc, #20]	; (800677c <std+0x44>)
 8006768:	6224      	str	r4, [r4, #32]
 800676a:	6323      	str	r3, [r4, #48]	; 0x30
 800676c:	bd10      	pop	{r4, pc}
 800676e:	bf00      	nop
 8006770:	08006b65 	.word	0x08006b65
 8006774:	08006b87 	.word	0x08006b87
 8006778:	08006bbf 	.word	0x08006bbf
 800677c:	08006be3 	.word	0x08006be3

08006780 <_cleanup_r>:
 8006780:	4901      	ldr	r1, [pc, #4]	; (8006788 <_cleanup_r+0x8>)
 8006782:	f000 b8af 	b.w	80068e4 <_fwalk_reent>
 8006786:	bf00      	nop
 8006788:	080066c1 	.word	0x080066c1

0800678c <__sfmoreglue>:
 800678c:	b570      	push	{r4, r5, r6, lr}
 800678e:	1e4a      	subs	r2, r1, #1
 8006790:	2568      	movs	r5, #104	; 0x68
 8006792:	4355      	muls	r5, r2
 8006794:	460e      	mov	r6, r1
 8006796:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800679a:	f000 f979 	bl	8006a90 <_malloc_r>
 800679e:	4604      	mov	r4, r0
 80067a0:	b140      	cbz	r0, 80067b4 <__sfmoreglue+0x28>
 80067a2:	2100      	movs	r1, #0
 80067a4:	e9c0 1600 	strd	r1, r6, [r0]
 80067a8:	300c      	adds	r0, #12
 80067aa:	60a0      	str	r0, [r4, #8]
 80067ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80067b0:	f7ff fdc2 	bl	8006338 <memset>
 80067b4:	4620      	mov	r0, r4
 80067b6:	bd70      	pop	{r4, r5, r6, pc}

080067b8 <__sfp_lock_acquire>:
 80067b8:	4801      	ldr	r0, [pc, #4]	; (80067c0 <__sfp_lock_acquire+0x8>)
 80067ba:	f000 b8b3 	b.w	8006924 <__retarget_lock_acquire_recursive>
 80067be:	bf00      	nop
 80067c0:	20000458 	.word	0x20000458

080067c4 <__sfp_lock_release>:
 80067c4:	4801      	ldr	r0, [pc, #4]	; (80067cc <__sfp_lock_release+0x8>)
 80067c6:	f000 b8ae 	b.w	8006926 <__retarget_lock_release_recursive>
 80067ca:	bf00      	nop
 80067cc:	20000458 	.word	0x20000458

080067d0 <__sinit_lock_acquire>:
 80067d0:	4801      	ldr	r0, [pc, #4]	; (80067d8 <__sinit_lock_acquire+0x8>)
 80067d2:	f000 b8a7 	b.w	8006924 <__retarget_lock_acquire_recursive>
 80067d6:	bf00      	nop
 80067d8:	20000453 	.word	0x20000453

080067dc <__sinit_lock_release>:
 80067dc:	4801      	ldr	r0, [pc, #4]	; (80067e4 <__sinit_lock_release+0x8>)
 80067de:	f000 b8a2 	b.w	8006926 <__retarget_lock_release_recursive>
 80067e2:	bf00      	nop
 80067e4:	20000453 	.word	0x20000453

080067e8 <__sinit>:
 80067e8:	b510      	push	{r4, lr}
 80067ea:	4604      	mov	r4, r0
 80067ec:	f7ff fff0 	bl	80067d0 <__sinit_lock_acquire>
 80067f0:	69a3      	ldr	r3, [r4, #24]
 80067f2:	b11b      	cbz	r3, 80067fc <__sinit+0x14>
 80067f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067f8:	f7ff bff0 	b.w	80067dc <__sinit_lock_release>
 80067fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006800:	6523      	str	r3, [r4, #80]	; 0x50
 8006802:	4b13      	ldr	r3, [pc, #76]	; (8006850 <__sinit+0x68>)
 8006804:	4a13      	ldr	r2, [pc, #76]	; (8006854 <__sinit+0x6c>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	62a2      	str	r2, [r4, #40]	; 0x28
 800680a:	42a3      	cmp	r3, r4
 800680c:	bf04      	itt	eq
 800680e:	2301      	moveq	r3, #1
 8006810:	61a3      	streq	r3, [r4, #24]
 8006812:	4620      	mov	r0, r4
 8006814:	f000 f820 	bl	8006858 <__sfp>
 8006818:	6060      	str	r0, [r4, #4]
 800681a:	4620      	mov	r0, r4
 800681c:	f000 f81c 	bl	8006858 <__sfp>
 8006820:	60a0      	str	r0, [r4, #8]
 8006822:	4620      	mov	r0, r4
 8006824:	f000 f818 	bl	8006858 <__sfp>
 8006828:	2200      	movs	r2, #0
 800682a:	60e0      	str	r0, [r4, #12]
 800682c:	2104      	movs	r1, #4
 800682e:	6860      	ldr	r0, [r4, #4]
 8006830:	f7ff ff82 	bl	8006738 <std>
 8006834:	68a0      	ldr	r0, [r4, #8]
 8006836:	2201      	movs	r2, #1
 8006838:	2109      	movs	r1, #9
 800683a:	f7ff ff7d 	bl	8006738 <std>
 800683e:	68e0      	ldr	r0, [r4, #12]
 8006840:	2202      	movs	r2, #2
 8006842:	2112      	movs	r1, #18
 8006844:	f7ff ff78 	bl	8006738 <std>
 8006848:	2301      	movs	r3, #1
 800684a:	61a3      	str	r3, [r4, #24]
 800684c:	e7d2      	b.n	80067f4 <__sinit+0xc>
 800684e:	bf00      	nop
 8006850:	08006ddc 	.word	0x08006ddc
 8006854:	08006781 	.word	0x08006781

08006858 <__sfp>:
 8006858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800685a:	4607      	mov	r7, r0
 800685c:	f7ff ffac 	bl	80067b8 <__sfp_lock_acquire>
 8006860:	4b1e      	ldr	r3, [pc, #120]	; (80068dc <__sfp+0x84>)
 8006862:	681e      	ldr	r6, [r3, #0]
 8006864:	69b3      	ldr	r3, [r6, #24]
 8006866:	b913      	cbnz	r3, 800686e <__sfp+0x16>
 8006868:	4630      	mov	r0, r6
 800686a:	f7ff ffbd 	bl	80067e8 <__sinit>
 800686e:	3648      	adds	r6, #72	; 0x48
 8006870:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006874:	3b01      	subs	r3, #1
 8006876:	d503      	bpl.n	8006880 <__sfp+0x28>
 8006878:	6833      	ldr	r3, [r6, #0]
 800687a:	b30b      	cbz	r3, 80068c0 <__sfp+0x68>
 800687c:	6836      	ldr	r6, [r6, #0]
 800687e:	e7f7      	b.n	8006870 <__sfp+0x18>
 8006880:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006884:	b9d5      	cbnz	r5, 80068bc <__sfp+0x64>
 8006886:	4b16      	ldr	r3, [pc, #88]	; (80068e0 <__sfp+0x88>)
 8006888:	60e3      	str	r3, [r4, #12]
 800688a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800688e:	6665      	str	r5, [r4, #100]	; 0x64
 8006890:	f000 f847 	bl	8006922 <__retarget_lock_init_recursive>
 8006894:	f7ff ff96 	bl	80067c4 <__sfp_lock_release>
 8006898:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800689c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80068a0:	6025      	str	r5, [r4, #0]
 80068a2:	61a5      	str	r5, [r4, #24]
 80068a4:	2208      	movs	r2, #8
 80068a6:	4629      	mov	r1, r5
 80068a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80068ac:	f7ff fd44 	bl	8006338 <memset>
 80068b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80068b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80068b8:	4620      	mov	r0, r4
 80068ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068bc:	3468      	adds	r4, #104	; 0x68
 80068be:	e7d9      	b.n	8006874 <__sfp+0x1c>
 80068c0:	2104      	movs	r1, #4
 80068c2:	4638      	mov	r0, r7
 80068c4:	f7ff ff62 	bl	800678c <__sfmoreglue>
 80068c8:	4604      	mov	r4, r0
 80068ca:	6030      	str	r0, [r6, #0]
 80068cc:	2800      	cmp	r0, #0
 80068ce:	d1d5      	bne.n	800687c <__sfp+0x24>
 80068d0:	f7ff ff78 	bl	80067c4 <__sfp_lock_release>
 80068d4:	230c      	movs	r3, #12
 80068d6:	603b      	str	r3, [r7, #0]
 80068d8:	e7ee      	b.n	80068b8 <__sfp+0x60>
 80068da:	bf00      	nop
 80068dc:	08006ddc 	.word	0x08006ddc
 80068e0:	ffff0001 	.word	0xffff0001

080068e4 <_fwalk_reent>:
 80068e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068e8:	4606      	mov	r6, r0
 80068ea:	4688      	mov	r8, r1
 80068ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80068f0:	2700      	movs	r7, #0
 80068f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80068f6:	f1b9 0901 	subs.w	r9, r9, #1
 80068fa:	d505      	bpl.n	8006908 <_fwalk_reent+0x24>
 80068fc:	6824      	ldr	r4, [r4, #0]
 80068fe:	2c00      	cmp	r4, #0
 8006900:	d1f7      	bne.n	80068f2 <_fwalk_reent+0xe>
 8006902:	4638      	mov	r0, r7
 8006904:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006908:	89ab      	ldrh	r3, [r5, #12]
 800690a:	2b01      	cmp	r3, #1
 800690c:	d907      	bls.n	800691e <_fwalk_reent+0x3a>
 800690e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006912:	3301      	adds	r3, #1
 8006914:	d003      	beq.n	800691e <_fwalk_reent+0x3a>
 8006916:	4629      	mov	r1, r5
 8006918:	4630      	mov	r0, r6
 800691a:	47c0      	blx	r8
 800691c:	4307      	orrs	r7, r0
 800691e:	3568      	adds	r5, #104	; 0x68
 8006920:	e7e9      	b.n	80068f6 <_fwalk_reent+0x12>

08006922 <__retarget_lock_init_recursive>:
 8006922:	4770      	bx	lr

08006924 <__retarget_lock_acquire_recursive>:
 8006924:	4770      	bx	lr

08006926 <__retarget_lock_release_recursive>:
 8006926:	4770      	bx	lr

08006928 <__swhatbuf_r>:
 8006928:	b570      	push	{r4, r5, r6, lr}
 800692a:	460e      	mov	r6, r1
 800692c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006930:	2900      	cmp	r1, #0
 8006932:	b096      	sub	sp, #88	; 0x58
 8006934:	4614      	mov	r4, r2
 8006936:	461d      	mov	r5, r3
 8006938:	da07      	bge.n	800694a <__swhatbuf_r+0x22>
 800693a:	2300      	movs	r3, #0
 800693c:	602b      	str	r3, [r5, #0]
 800693e:	89b3      	ldrh	r3, [r6, #12]
 8006940:	061a      	lsls	r2, r3, #24
 8006942:	d410      	bmi.n	8006966 <__swhatbuf_r+0x3e>
 8006944:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006948:	e00e      	b.n	8006968 <__swhatbuf_r+0x40>
 800694a:	466a      	mov	r2, sp
 800694c:	f000 f970 	bl	8006c30 <_fstat_r>
 8006950:	2800      	cmp	r0, #0
 8006952:	dbf2      	blt.n	800693a <__swhatbuf_r+0x12>
 8006954:	9a01      	ldr	r2, [sp, #4]
 8006956:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800695a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800695e:	425a      	negs	r2, r3
 8006960:	415a      	adcs	r2, r3
 8006962:	602a      	str	r2, [r5, #0]
 8006964:	e7ee      	b.n	8006944 <__swhatbuf_r+0x1c>
 8006966:	2340      	movs	r3, #64	; 0x40
 8006968:	2000      	movs	r0, #0
 800696a:	6023      	str	r3, [r4, #0]
 800696c:	b016      	add	sp, #88	; 0x58
 800696e:	bd70      	pop	{r4, r5, r6, pc}

08006970 <__smakebuf_r>:
 8006970:	898b      	ldrh	r3, [r1, #12]
 8006972:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006974:	079d      	lsls	r5, r3, #30
 8006976:	4606      	mov	r6, r0
 8006978:	460c      	mov	r4, r1
 800697a:	d507      	bpl.n	800698c <__smakebuf_r+0x1c>
 800697c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006980:	6023      	str	r3, [r4, #0]
 8006982:	6123      	str	r3, [r4, #16]
 8006984:	2301      	movs	r3, #1
 8006986:	6163      	str	r3, [r4, #20]
 8006988:	b002      	add	sp, #8
 800698a:	bd70      	pop	{r4, r5, r6, pc}
 800698c:	ab01      	add	r3, sp, #4
 800698e:	466a      	mov	r2, sp
 8006990:	f7ff ffca 	bl	8006928 <__swhatbuf_r>
 8006994:	9900      	ldr	r1, [sp, #0]
 8006996:	4605      	mov	r5, r0
 8006998:	4630      	mov	r0, r6
 800699a:	f000 f879 	bl	8006a90 <_malloc_r>
 800699e:	b948      	cbnz	r0, 80069b4 <__smakebuf_r+0x44>
 80069a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069a4:	059a      	lsls	r2, r3, #22
 80069a6:	d4ef      	bmi.n	8006988 <__smakebuf_r+0x18>
 80069a8:	f023 0303 	bic.w	r3, r3, #3
 80069ac:	f043 0302 	orr.w	r3, r3, #2
 80069b0:	81a3      	strh	r3, [r4, #12]
 80069b2:	e7e3      	b.n	800697c <__smakebuf_r+0xc>
 80069b4:	4b0d      	ldr	r3, [pc, #52]	; (80069ec <__smakebuf_r+0x7c>)
 80069b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80069b8:	89a3      	ldrh	r3, [r4, #12]
 80069ba:	6020      	str	r0, [r4, #0]
 80069bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069c0:	81a3      	strh	r3, [r4, #12]
 80069c2:	9b00      	ldr	r3, [sp, #0]
 80069c4:	6163      	str	r3, [r4, #20]
 80069c6:	9b01      	ldr	r3, [sp, #4]
 80069c8:	6120      	str	r0, [r4, #16]
 80069ca:	b15b      	cbz	r3, 80069e4 <__smakebuf_r+0x74>
 80069cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069d0:	4630      	mov	r0, r6
 80069d2:	f000 f93f 	bl	8006c54 <_isatty_r>
 80069d6:	b128      	cbz	r0, 80069e4 <__smakebuf_r+0x74>
 80069d8:	89a3      	ldrh	r3, [r4, #12]
 80069da:	f023 0303 	bic.w	r3, r3, #3
 80069de:	f043 0301 	orr.w	r3, r3, #1
 80069e2:	81a3      	strh	r3, [r4, #12]
 80069e4:	89a0      	ldrh	r0, [r4, #12]
 80069e6:	4305      	orrs	r5, r0
 80069e8:	81a5      	strh	r5, [r4, #12]
 80069ea:	e7cd      	b.n	8006988 <__smakebuf_r+0x18>
 80069ec:	08006781 	.word	0x08006781

080069f0 <_free_r>:
 80069f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80069f2:	2900      	cmp	r1, #0
 80069f4:	d048      	beq.n	8006a88 <_free_r+0x98>
 80069f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069fa:	9001      	str	r0, [sp, #4]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	f1a1 0404 	sub.w	r4, r1, #4
 8006a02:	bfb8      	it	lt
 8006a04:	18e4      	addlt	r4, r4, r3
 8006a06:	f000 f947 	bl	8006c98 <__malloc_lock>
 8006a0a:	4a20      	ldr	r2, [pc, #128]	; (8006a8c <_free_r+0x9c>)
 8006a0c:	9801      	ldr	r0, [sp, #4]
 8006a0e:	6813      	ldr	r3, [r2, #0]
 8006a10:	4615      	mov	r5, r2
 8006a12:	b933      	cbnz	r3, 8006a22 <_free_r+0x32>
 8006a14:	6063      	str	r3, [r4, #4]
 8006a16:	6014      	str	r4, [r2, #0]
 8006a18:	b003      	add	sp, #12
 8006a1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a1e:	f000 b941 	b.w	8006ca4 <__malloc_unlock>
 8006a22:	42a3      	cmp	r3, r4
 8006a24:	d90b      	bls.n	8006a3e <_free_r+0x4e>
 8006a26:	6821      	ldr	r1, [r4, #0]
 8006a28:	1862      	adds	r2, r4, r1
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	bf04      	itt	eq
 8006a2e:	681a      	ldreq	r2, [r3, #0]
 8006a30:	685b      	ldreq	r3, [r3, #4]
 8006a32:	6063      	str	r3, [r4, #4]
 8006a34:	bf04      	itt	eq
 8006a36:	1852      	addeq	r2, r2, r1
 8006a38:	6022      	streq	r2, [r4, #0]
 8006a3a:	602c      	str	r4, [r5, #0]
 8006a3c:	e7ec      	b.n	8006a18 <_free_r+0x28>
 8006a3e:	461a      	mov	r2, r3
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	b10b      	cbz	r3, 8006a48 <_free_r+0x58>
 8006a44:	42a3      	cmp	r3, r4
 8006a46:	d9fa      	bls.n	8006a3e <_free_r+0x4e>
 8006a48:	6811      	ldr	r1, [r2, #0]
 8006a4a:	1855      	adds	r5, r2, r1
 8006a4c:	42a5      	cmp	r5, r4
 8006a4e:	d10b      	bne.n	8006a68 <_free_r+0x78>
 8006a50:	6824      	ldr	r4, [r4, #0]
 8006a52:	4421      	add	r1, r4
 8006a54:	1854      	adds	r4, r2, r1
 8006a56:	42a3      	cmp	r3, r4
 8006a58:	6011      	str	r1, [r2, #0]
 8006a5a:	d1dd      	bne.n	8006a18 <_free_r+0x28>
 8006a5c:	681c      	ldr	r4, [r3, #0]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	6053      	str	r3, [r2, #4]
 8006a62:	4421      	add	r1, r4
 8006a64:	6011      	str	r1, [r2, #0]
 8006a66:	e7d7      	b.n	8006a18 <_free_r+0x28>
 8006a68:	d902      	bls.n	8006a70 <_free_r+0x80>
 8006a6a:	230c      	movs	r3, #12
 8006a6c:	6003      	str	r3, [r0, #0]
 8006a6e:	e7d3      	b.n	8006a18 <_free_r+0x28>
 8006a70:	6825      	ldr	r5, [r4, #0]
 8006a72:	1961      	adds	r1, r4, r5
 8006a74:	428b      	cmp	r3, r1
 8006a76:	bf04      	itt	eq
 8006a78:	6819      	ldreq	r1, [r3, #0]
 8006a7a:	685b      	ldreq	r3, [r3, #4]
 8006a7c:	6063      	str	r3, [r4, #4]
 8006a7e:	bf04      	itt	eq
 8006a80:	1949      	addeq	r1, r1, r5
 8006a82:	6021      	streq	r1, [r4, #0]
 8006a84:	6054      	str	r4, [r2, #4]
 8006a86:	e7c7      	b.n	8006a18 <_free_r+0x28>
 8006a88:	b003      	add	sp, #12
 8006a8a:	bd30      	pop	{r4, r5, pc}
 8006a8c:	20000374 	.word	0x20000374

08006a90 <_malloc_r>:
 8006a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a92:	1ccd      	adds	r5, r1, #3
 8006a94:	f025 0503 	bic.w	r5, r5, #3
 8006a98:	3508      	adds	r5, #8
 8006a9a:	2d0c      	cmp	r5, #12
 8006a9c:	bf38      	it	cc
 8006a9e:	250c      	movcc	r5, #12
 8006aa0:	2d00      	cmp	r5, #0
 8006aa2:	4606      	mov	r6, r0
 8006aa4:	db01      	blt.n	8006aaa <_malloc_r+0x1a>
 8006aa6:	42a9      	cmp	r1, r5
 8006aa8:	d903      	bls.n	8006ab2 <_malloc_r+0x22>
 8006aaa:	230c      	movs	r3, #12
 8006aac:	6033      	str	r3, [r6, #0]
 8006aae:	2000      	movs	r0, #0
 8006ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ab2:	f000 f8f1 	bl	8006c98 <__malloc_lock>
 8006ab6:	4921      	ldr	r1, [pc, #132]	; (8006b3c <_malloc_r+0xac>)
 8006ab8:	680a      	ldr	r2, [r1, #0]
 8006aba:	4614      	mov	r4, r2
 8006abc:	b99c      	cbnz	r4, 8006ae6 <_malloc_r+0x56>
 8006abe:	4f20      	ldr	r7, [pc, #128]	; (8006b40 <_malloc_r+0xb0>)
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	b923      	cbnz	r3, 8006ace <_malloc_r+0x3e>
 8006ac4:	4621      	mov	r1, r4
 8006ac6:	4630      	mov	r0, r6
 8006ac8:	f000 f83c 	bl	8006b44 <_sbrk_r>
 8006acc:	6038      	str	r0, [r7, #0]
 8006ace:	4629      	mov	r1, r5
 8006ad0:	4630      	mov	r0, r6
 8006ad2:	f000 f837 	bl	8006b44 <_sbrk_r>
 8006ad6:	1c43      	adds	r3, r0, #1
 8006ad8:	d123      	bne.n	8006b22 <_malloc_r+0x92>
 8006ada:	230c      	movs	r3, #12
 8006adc:	6033      	str	r3, [r6, #0]
 8006ade:	4630      	mov	r0, r6
 8006ae0:	f000 f8e0 	bl	8006ca4 <__malloc_unlock>
 8006ae4:	e7e3      	b.n	8006aae <_malloc_r+0x1e>
 8006ae6:	6823      	ldr	r3, [r4, #0]
 8006ae8:	1b5b      	subs	r3, r3, r5
 8006aea:	d417      	bmi.n	8006b1c <_malloc_r+0x8c>
 8006aec:	2b0b      	cmp	r3, #11
 8006aee:	d903      	bls.n	8006af8 <_malloc_r+0x68>
 8006af0:	6023      	str	r3, [r4, #0]
 8006af2:	441c      	add	r4, r3
 8006af4:	6025      	str	r5, [r4, #0]
 8006af6:	e004      	b.n	8006b02 <_malloc_r+0x72>
 8006af8:	6863      	ldr	r3, [r4, #4]
 8006afa:	42a2      	cmp	r2, r4
 8006afc:	bf0c      	ite	eq
 8006afe:	600b      	streq	r3, [r1, #0]
 8006b00:	6053      	strne	r3, [r2, #4]
 8006b02:	4630      	mov	r0, r6
 8006b04:	f000 f8ce 	bl	8006ca4 <__malloc_unlock>
 8006b08:	f104 000b 	add.w	r0, r4, #11
 8006b0c:	1d23      	adds	r3, r4, #4
 8006b0e:	f020 0007 	bic.w	r0, r0, #7
 8006b12:	1ac2      	subs	r2, r0, r3
 8006b14:	d0cc      	beq.n	8006ab0 <_malloc_r+0x20>
 8006b16:	1a1b      	subs	r3, r3, r0
 8006b18:	50a3      	str	r3, [r4, r2]
 8006b1a:	e7c9      	b.n	8006ab0 <_malloc_r+0x20>
 8006b1c:	4622      	mov	r2, r4
 8006b1e:	6864      	ldr	r4, [r4, #4]
 8006b20:	e7cc      	b.n	8006abc <_malloc_r+0x2c>
 8006b22:	1cc4      	adds	r4, r0, #3
 8006b24:	f024 0403 	bic.w	r4, r4, #3
 8006b28:	42a0      	cmp	r0, r4
 8006b2a:	d0e3      	beq.n	8006af4 <_malloc_r+0x64>
 8006b2c:	1a21      	subs	r1, r4, r0
 8006b2e:	4630      	mov	r0, r6
 8006b30:	f000 f808 	bl	8006b44 <_sbrk_r>
 8006b34:	3001      	adds	r0, #1
 8006b36:	d1dd      	bne.n	8006af4 <_malloc_r+0x64>
 8006b38:	e7cf      	b.n	8006ada <_malloc_r+0x4a>
 8006b3a:	bf00      	nop
 8006b3c:	20000374 	.word	0x20000374
 8006b40:	20000378 	.word	0x20000378

08006b44 <_sbrk_r>:
 8006b44:	b538      	push	{r3, r4, r5, lr}
 8006b46:	4d06      	ldr	r5, [pc, #24]	; (8006b60 <_sbrk_r+0x1c>)
 8006b48:	2300      	movs	r3, #0
 8006b4a:	4604      	mov	r4, r0
 8006b4c:	4608      	mov	r0, r1
 8006b4e:	602b      	str	r3, [r5, #0]
 8006b50:	f7fc f948 	bl	8002de4 <_sbrk>
 8006b54:	1c43      	adds	r3, r0, #1
 8006b56:	d102      	bne.n	8006b5e <_sbrk_r+0x1a>
 8006b58:	682b      	ldr	r3, [r5, #0]
 8006b5a:	b103      	cbz	r3, 8006b5e <_sbrk_r+0x1a>
 8006b5c:	6023      	str	r3, [r4, #0]
 8006b5e:	bd38      	pop	{r3, r4, r5, pc}
 8006b60:	2000045c 	.word	0x2000045c

08006b64 <__sread>:
 8006b64:	b510      	push	{r4, lr}
 8006b66:	460c      	mov	r4, r1
 8006b68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b6c:	f000 f8a0 	bl	8006cb0 <_read_r>
 8006b70:	2800      	cmp	r0, #0
 8006b72:	bfab      	itete	ge
 8006b74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006b76:	89a3      	ldrhlt	r3, [r4, #12]
 8006b78:	181b      	addge	r3, r3, r0
 8006b7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006b7e:	bfac      	ite	ge
 8006b80:	6563      	strge	r3, [r4, #84]	; 0x54
 8006b82:	81a3      	strhlt	r3, [r4, #12]
 8006b84:	bd10      	pop	{r4, pc}

08006b86 <__swrite>:
 8006b86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b8a:	461f      	mov	r7, r3
 8006b8c:	898b      	ldrh	r3, [r1, #12]
 8006b8e:	05db      	lsls	r3, r3, #23
 8006b90:	4605      	mov	r5, r0
 8006b92:	460c      	mov	r4, r1
 8006b94:	4616      	mov	r6, r2
 8006b96:	d505      	bpl.n	8006ba4 <__swrite+0x1e>
 8006b98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b9c:	2302      	movs	r3, #2
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f000 f868 	bl	8006c74 <_lseek_r>
 8006ba4:	89a3      	ldrh	r3, [r4, #12]
 8006ba6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006baa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bae:	81a3      	strh	r3, [r4, #12]
 8006bb0:	4632      	mov	r2, r6
 8006bb2:	463b      	mov	r3, r7
 8006bb4:	4628      	mov	r0, r5
 8006bb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bba:	f000 b817 	b.w	8006bec <_write_r>

08006bbe <__sseek>:
 8006bbe:	b510      	push	{r4, lr}
 8006bc0:	460c      	mov	r4, r1
 8006bc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bc6:	f000 f855 	bl	8006c74 <_lseek_r>
 8006bca:	1c43      	adds	r3, r0, #1
 8006bcc:	89a3      	ldrh	r3, [r4, #12]
 8006bce:	bf15      	itete	ne
 8006bd0:	6560      	strne	r0, [r4, #84]	; 0x54
 8006bd2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006bd6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006bda:	81a3      	strheq	r3, [r4, #12]
 8006bdc:	bf18      	it	ne
 8006bde:	81a3      	strhne	r3, [r4, #12]
 8006be0:	bd10      	pop	{r4, pc}

08006be2 <__sclose>:
 8006be2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006be6:	f000 b813 	b.w	8006c10 <_close_r>
	...

08006bec <_write_r>:
 8006bec:	b538      	push	{r3, r4, r5, lr}
 8006bee:	4d07      	ldr	r5, [pc, #28]	; (8006c0c <_write_r+0x20>)
 8006bf0:	4604      	mov	r4, r0
 8006bf2:	4608      	mov	r0, r1
 8006bf4:	4611      	mov	r1, r2
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	602a      	str	r2, [r5, #0]
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	f7fc f8a1 	bl	8002d42 <_write>
 8006c00:	1c43      	adds	r3, r0, #1
 8006c02:	d102      	bne.n	8006c0a <_write_r+0x1e>
 8006c04:	682b      	ldr	r3, [r5, #0]
 8006c06:	b103      	cbz	r3, 8006c0a <_write_r+0x1e>
 8006c08:	6023      	str	r3, [r4, #0]
 8006c0a:	bd38      	pop	{r3, r4, r5, pc}
 8006c0c:	2000045c 	.word	0x2000045c

08006c10 <_close_r>:
 8006c10:	b538      	push	{r3, r4, r5, lr}
 8006c12:	4d06      	ldr	r5, [pc, #24]	; (8006c2c <_close_r+0x1c>)
 8006c14:	2300      	movs	r3, #0
 8006c16:	4604      	mov	r4, r0
 8006c18:	4608      	mov	r0, r1
 8006c1a:	602b      	str	r3, [r5, #0]
 8006c1c:	f7fc f8ad 	bl	8002d7a <_close>
 8006c20:	1c43      	adds	r3, r0, #1
 8006c22:	d102      	bne.n	8006c2a <_close_r+0x1a>
 8006c24:	682b      	ldr	r3, [r5, #0]
 8006c26:	b103      	cbz	r3, 8006c2a <_close_r+0x1a>
 8006c28:	6023      	str	r3, [r4, #0]
 8006c2a:	bd38      	pop	{r3, r4, r5, pc}
 8006c2c:	2000045c 	.word	0x2000045c

08006c30 <_fstat_r>:
 8006c30:	b538      	push	{r3, r4, r5, lr}
 8006c32:	4d07      	ldr	r5, [pc, #28]	; (8006c50 <_fstat_r+0x20>)
 8006c34:	2300      	movs	r3, #0
 8006c36:	4604      	mov	r4, r0
 8006c38:	4608      	mov	r0, r1
 8006c3a:	4611      	mov	r1, r2
 8006c3c:	602b      	str	r3, [r5, #0]
 8006c3e:	f7fc f8a8 	bl	8002d92 <_fstat>
 8006c42:	1c43      	adds	r3, r0, #1
 8006c44:	d102      	bne.n	8006c4c <_fstat_r+0x1c>
 8006c46:	682b      	ldr	r3, [r5, #0]
 8006c48:	b103      	cbz	r3, 8006c4c <_fstat_r+0x1c>
 8006c4a:	6023      	str	r3, [r4, #0]
 8006c4c:	bd38      	pop	{r3, r4, r5, pc}
 8006c4e:	bf00      	nop
 8006c50:	2000045c 	.word	0x2000045c

08006c54 <_isatty_r>:
 8006c54:	b538      	push	{r3, r4, r5, lr}
 8006c56:	4d06      	ldr	r5, [pc, #24]	; (8006c70 <_isatty_r+0x1c>)
 8006c58:	2300      	movs	r3, #0
 8006c5a:	4604      	mov	r4, r0
 8006c5c:	4608      	mov	r0, r1
 8006c5e:	602b      	str	r3, [r5, #0]
 8006c60:	f7fc f8a7 	bl	8002db2 <_isatty>
 8006c64:	1c43      	adds	r3, r0, #1
 8006c66:	d102      	bne.n	8006c6e <_isatty_r+0x1a>
 8006c68:	682b      	ldr	r3, [r5, #0]
 8006c6a:	b103      	cbz	r3, 8006c6e <_isatty_r+0x1a>
 8006c6c:	6023      	str	r3, [r4, #0]
 8006c6e:	bd38      	pop	{r3, r4, r5, pc}
 8006c70:	2000045c 	.word	0x2000045c

08006c74 <_lseek_r>:
 8006c74:	b538      	push	{r3, r4, r5, lr}
 8006c76:	4d07      	ldr	r5, [pc, #28]	; (8006c94 <_lseek_r+0x20>)
 8006c78:	4604      	mov	r4, r0
 8006c7a:	4608      	mov	r0, r1
 8006c7c:	4611      	mov	r1, r2
 8006c7e:	2200      	movs	r2, #0
 8006c80:	602a      	str	r2, [r5, #0]
 8006c82:	461a      	mov	r2, r3
 8006c84:	f7fc f8a0 	bl	8002dc8 <_lseek>
 8006c88:	1c43      	adds	r3, r0, #1
 8006c8a:	d102      	bne.n	8006c92 <_lseek_r+0x1e>
 8006c8c:	682b      	ldr	r3, [r5, #0]
 8006c8e:	b103      	cbz	r3, 8006c92 <_lseek_r+0x1e>
 8006c90:	6023      	str	r3, [r4, #0]
 8006c92:	bd38      	pop	{r3, r4, r5, pc}
 8006c94:	2000045c 	.word	0x2000045c

08006c98 <__malloc_lock>:
 8006c98:	4801      	ldr	r0, [pc, #4]	; (8006ca0 <__malloc_lock+0x8>)
 8006c9a:	f7ff be43 	b.w	8006924 <__retarget_lock_acquire_recursive>
 8006c9e:	bf00      	nop
 8006ca0:	20000454 	.word	0x20000454

08006ca4 <__malloc_unlock>:
 8006ca4:	4801      	ldr	r0, [pc, #4]	; (8006cac <__malloc_unlock+0x8>)
 8006ca6:	f7ff be3e 	b.w	8006926 <__retarget_lock_release_recursive>
 8006caa:	bf00      	nop
 8006cac:	20000454 	.word	0x20000454

08006cb0 <_read_r>:
 8006cb0:	b538      	push	{r3, r4, r5, lr}
 8006cb2:	4d07      	ldr	r5, [pc, #28]	; (8006cd0 <_read_r+0x20>)
 8006cb4:	4604      	mov	r4, r0
 8006cb6:	4608      	mov	r0, r1
 8006cb8:	4611      	mov	r1, r2
 8006cba:	2200      	movs	r2, #0
 8006cbc:	602a      	str	r2, [r5, #0]
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	f7fc f822 	bl	8002d08 <_read>
 8006cc4:	1c43      	adds	r3, r0, #1
 8006cc6:	d102      	bne.n	8006cce <_read_r+0x1e>
 8006cc8:	682b      	ldr	r3, [r5, #0]
 8006cca:	b103      	cbz	r3, 8006cce <_read_r+0x1e>
 8006ccc:	6023      	str	r3, [r4, #0]
 8006cce:	bd38      	pop	{r3, r4, r5, pc}
 8006cd0:	2000045c 	.word	0x2000045c

08006cd4 <_init>:
 8006cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cd6:	bf00      	nop
 8006cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cda:	bc08      	pop	{r3}
 8006cdc:	469e      	mov	lr, r3
 8006cde:	4770      	bx	lr

08006ce0 <_fini>:
 8006ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ce2:	bf00      	nop
 8006ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ce6:	bc08      	pop	{r3}
 8006ce8:	469e      	mov	lr, r3
 8006cea:	4770      	bx	lr
